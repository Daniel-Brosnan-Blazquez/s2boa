"""
Automated tests for the ingestion of the REP_PASS_E_EDRS files

Written by DEIMOS Space S.L. (femd)

module ingestions
"""
# Import python utilities
import os
import sys
import unittest
import datetime

# Import engine of the DDBB
import eboa.engine.engine as eboa_engine
from eboa.engine.engine import Engine
from eboa.engine.query import Query
from eboa.datamodel.base import Session, engine, Base
from eboa.engine.errors import LinksInconsistency, UndefinedEventLink, DuplicatedEventLinkRef, WrongPeriod, SourceAlreadyIngested, WrongValue, OddNumberOfCoordinates, EboaResourcesPathNotAvailable, WrongGeometry, ErrorParsingDictionary
from eboa.engine.query import Query

# Import datamodel
from eboa.datamodel.dim_signatures import DimSignature
from eboa.datamodel.events import Event, EventLink, EventKey, EventText, EventDouble, EventObject, EventGeometry, EventBoolean, EventTimestamp
from eboa.datamodel.gauges import Gauge
from eboa.datamodel.sources import Source, SourceStatus
from eboa.datamodel.explicit_refs import ExplicitRef, ExplicitRefGrp, ExplicitRefLink
from eboa.datamodel.annotations import Annotation, AnnotationCnf, AnnotationText, AnnotationDouble, AnnotationObject, AnnotationGeometry, AnnotationBoolean, AnnotationTimestamp

# Import ingestion
import eboa.ingestion.eboa_ingestion as ingestion

class TestEdrsAcquisitionIngestion(unittest.TestCase):
    def setUp(self):
        # Create the engine to manage the data
        self.engine_eboa = Engine()
        self.query_eboa = Query()

        # Create session to connectx to the database
        self.session = Session()

        # Clear all tables before executing the test
        self.query_eboa.clear_db()

    def tearDown(self):
        # Close connections to the DDBB
        self.engine_eboa.close_session()
        self.query_eboa.close_session()
        self.session.close()

    def test_insert_only_rep_pass(self):
        filename = "S2A_OPER_REP_PASS_E_CONTAINING_ALL_DATA_TO_BE_PROCESS.EOF"
        file_path = os.path.dirname(os.path.abspath(__file__)) + "/inputs/" + filename

        exit_status = ingestion.command_process_file("s2boa.ingestions.ingestion_edrs_acquisition.ingestion_edrs_acquisition", file_path, "2018-01-01T00:00:00")

        assert len([item for item in exit_status if item["status"] != eboa_engine.exit_codes["OK"]["status"]]) == 0

        # Check number of sources generated
        sources = self.session.query(Source).all()

        assert len(sources) == 2

        # Check that the validity period of the input has taken into consideration the MSI sensing received
        source = self.session.query(Source).filter(Source.reported_validity_start == "2018-07-21T07:28:23",
                                                   Source.reported_validity_stop == "2018-07-21T07:37:55",
                                                   Source.validity_start == "2018-07-20 17:33:12.859268",
                                                   Source.validity_stop == "2018-07-21T07:37:55.121772").all()

        assert len(source) == 2

        dim_signatures = self.session.query(DimSignature).all()

        # Check number of dim_signatures generated
        assert len(dim_signatures) == 2

        dim_signature = self.session.query(DimSignature).filter(DimSignature.dim_signature == "RECEPTION_S2A").all()

        assert len(dim_signature) == 1

        dim_signature = self.session.query(DimSignature).filter(DimSignature.dim_signature == "ISP_VALIDITY_PROCESSING_COMPLETENESS_S2A").all()

        assert len(dim_signature) == 1

        # Check number of annotations generated
        annotations = self.session.query(Annotation).all()

        assert len(annotations) == 1

        # Check LINK_DETAILS annotations
        link_details = self.session.query(Annotation).join(AnnotationCnf,ExplicitRef).filter(AnnotationCnf.name == "LINK_DETAILS_CH2",
                                                                                             ExplicitRef.explicit_ref == "L20180608110336202000113").all()

        assert len(link_details) == 1

        assert link_details[0].get_structured_values() == [
            {
                "name": "session_id",
                "type": "text",
                "value": "L20180608110336202000113"
            },
            {
                "name": "downlink_orbit",
                "type": "double",
                "value": "16076.0"
            },
            {
                "name": "satellite",
                "type": "text",
                "value": "S2A"
            },
            {
                "name": "reception_station",
                "type": "text",
                "value": "EDRS"
            },
            {
                "name": "isp_status",
                "type": "text",
                "value": "COMPLETE"
            },
            {
                "name": "acquisition_status",
                "type": "text",
                "value": "COMPLETE"
            }
        ]

        # Check number of events generated
        events = self.session.query(Event).all()

        assert len(events) == 4

        # Check ISP_VALIDITY events
        playback_validity_events = self.session.query(Event).join(Gauge).filter(Gauge.name.like("PLAYBACK_VALIDITY_%")).all()

        assert len(playback_validity_events) == 2

        definite_playback_validity_event1 = self.session.query(Event).join(Gauge).filter(Gauge.name == "PLAYBACK_VALIDITY_20",
                                                                                   Event.start == "2018-07-21T07:28:23.002358",
                                                                                   Event.stop == "2018-07-21T07:37:40.689924").all()

        assert definite_playback_validity_event1[0].get_structured_values() == [
            {
                "name": "downlink_orbit",
                "type": "double",
                "value": "16076.0"
            },{
                "name": "satellite",
                "type": "text",
                "value": "S2A"
            },{
                "name": "reception_station",
                "type": "text",
                "value": "EDRS"
            },{
                "name": "channel",
                "type": "double",
                "value": "2.0"
            },{
                "name": "vcid",
                "type": "double",
                "value": "20.0"
            },{
                "name": "playback_type",
                "type": "text",
                "value": "NOMINAL"
            },{
                "name": "status",
                "type": "text",
                "value": "COMPLETE"
            }
        ]

        definite_playback_validity_event2 = self.session.query(Event).join(Gauge).filter(Gauge.name == "PLAYBACK_VALIDITY_2",
                                                                                   Event.start == "2018-07-21T07:37:41.747087",
                                                                                   Event.stop == "2018-07-21T07:37:55.121772").all()

        assert definite_playback_validity_event2[0].get_structured_values() == [
            {
                "name": "downlink_orbit",
                "type": "double",
                "value": "16076.0"
            },{
                "name": "satellite",
                "type": "text",
                "value": "S2A"
            },{
                "name": "reception_station",
                "type": "text",
                "value": "EDRS"
            },{
                "name": "channel",
                "type": "double",
                "value": "2.0"
            },{
                "name": "vcid",
                "type": "double",
                "value": "2.0"
            },{
                "name": "playback_type",
                "type": "text",
                "value": "SAD"
            },{
                "name": "status",
                "type": "text",
                "value": "COMPLETE"
            }
        ]

        raw_isp_validity_events = self.session.query(Event).join(Gauge).filter(Gauge.name == "RAW_ISP_VALIDITY").all()

        assert len(raw_isp_validity_events) == 1

        assert raw_isp_validity_events[0].get_structured_values() == [
            {
                "name": "status",
                "type": "text",
                "value": "COMPLETE"
            },{
                "name": "downlink_orbit",
                "type": "double",
                "value": "16076.0"
            },{
                "name": "satellite",
                "type": "text",
                "value": "S2A"
            },{
                "name": "reception_station",
                "type": "text",
                "value": "EDRS"
            },{
                "name": "channel",
                "type": "double",
                "value": "2.0"
            },{
                "name": "vcid",
                "type": "double",
                "value": "20.0"
            },{
                "name": "playback_type",
                "type": "text",
                "value": "NOMINAL"
            },{
                "name": "num_packets",
                "type": "double",
                "value": "1931040.0"
            },{
                "name": "num_frames",
                "type": "double",
                "value": "17927163.0"
            },
            {
                "name": "sad_status",
                "type": "text",
                "value": "COMPLETE"
            },{
                "name": "expected_num_packets",
                "type": "double",
                "value": "0.0"
            },{
                "name": "diff_expected_received",
                "type": "double",
                "value": "-1931040.0"
            },{
                "name": "packet_status",
                "type": "text",
                "value": "MISSING"
            }
        ]

        explicit_refs = self.session.query(ExplicitRef).all()

        assert len(explicit_refs) == 1

        definite_explicit_ref = self.session.query(ExplicitRef).join(ExplicitRefGrp).filter(ExplicitRef.explicit_ref == "L20180608110336202000113",
                                                                                    ExplicitRefGrp.name == "EDRS_LINK_SESSION_IDs").all()

        assert len(definite_explicit_ref) == 1

    #Issues to be fixed in the ingestion
    def test_insert_rep_pass_with_msi_gaps(self):

        filename = "S2A_NPPF.EOF"
        file_path = os.path.dirname(os.path.abspath(__file__)) + "/inputs/" + filename

        exit_status = ingestion.command_process_file("s2boa.ingestions.ingestion_nppf.ingestion_nppf", file_path, "2018-01-01T00:00:00")

        assert len([item for item in exit_status if item["status"] != eboa_engine.exit_codes["OK"]["status"]]) == 0

        filename = "S2A_ORBPRE.EOF"
        file_path = os.path.dirname(os.path.abspath(__file__)) + "/inputs/" + filename

        exit_status = ingestion.command_process_file("s2boa.ingestions.ingestion_orbpre.ingestion_orbpre", file_path, "2018-01-01T00:00:00")

        assert len([item for item in exit_status if item["status"] != eboa_engine.exit_codes["OK"]["status"]]) == 0

        filename = "S2__SRA.EOF"
        file_path = os.path.dirname(os.path.abspath(__file__)) + "/inputs/" + filename

        exit_status = ingestion.command_process_file("s2boa.ingestions.ingestion_slot_request_edrs.ingestion_slot_request_edrs", file_path, "2018-01-01T00:00:00")

        assert len([item for item in exit_status if item["status"] != eboa_engine.exit_codes["OK"]["status"]]) == 0

        filename = "S2A_OPER_REP_PASS_E_CONTAINING_GAPS.EOF"
        file_path = os.path.dirname(os.path.abspath(__file__)) + "/inputs/" + filename

        exit_status = ingestion.command_process_file("s2boa.ingestions.ingestion_edrs_acquisition.ingestion_edrs_acquisition", file_path, "2018-01-01T00:00:00")

        assert len([item for item in exit_status if item["status"] != eboa_engine.exit_codes["OK"]["status"]]) == 0

        # Check number of events generated
        events = self.session.query(Event).join(Source).filter(Source.name == "S2A_OPER_REP_PASS_E_CONTAINING_GAPS.EOF").all()

        assert len(events) == 22

        # Check number of annotations generated
        annotations = self.session.query(Annotation).all()

        assert len(annotations) == 1

        # Check that the validity period of the input has taken into consideration the MSI sensing received
        source = self.session.query(Source).filter(Source.reported_validity_start == "2018-07-21T07:28:23",
                                                   Source.reported_validity_stop == "2018-07-21T07:37:55",
                                                   Source.validity_start == "2018-07-20T17:33:12.859268",
                                                   Source.validity_stop == "2018-07-21T07:37:55.121772").all()

        assert len(source) == 2

        # Check LINK_DETAILS annotations
        link_details = self.session.query(Annotation).join(AnnotationCnf).filter(AnnotationCnf.name == "LINK_DETAILS_CH2").all()

        assert len(link_details) == 1

        assert link_details[0].get_structured_values() == [
            {
                "value": "L20180608110336202000113",
                "type": "text",
                "name": "session_id"
            },{
                "value": "16076.0",
                "type": "double",
                "name": "downlink_orbit"
            },
            {
                "value": "S2A",
                "type": "text",
                "name": "satellite"
            },
            {
                "value": "EDRS",
                "type": "text",
                "name": "reception_station"
            },
            {
                "value": "INCOMPLETE",
                "type": "text",
                "name": "isp_status"
            },
            {
                "value": "INCOMPLETE",
                "type": "text",
                "name": "acquisition_status"
            }
        ]

        # Check RAW_ISP_VALIDITY events
        raw_isp_validities = self.session.query(Event).join(Gauge).filter(Gauge.name == "RAW_ISP_VALIDITY").all()

        assert len(raw_isp_validities) == 1

        # Check specific RAW_ISP_VALIDITY
        specific_raw_isp_validity1 = self.session.query(Event).join(Gauge).filter(Gauge.name == "RAW_ISP_VALIDITY",
                                                                                 Event.start == "2018-07-21T05:22:08.947423",
                                                                                 Event.stop == "2018-07-21T05:40:39.608000").all()

        assert len(specific_raw_isp_validity1) == 1

        assert specific_raw_isp_validity1[0].get_structured_values() == [
            {
                "name": "status",
                "value": "INCOMPLETE",
                "type": "text"
            },
            {
                "name": "downlink_orbit",
                "value": "16076.0",
                "type": "double"
            },
            {
                "name": "satellite",
                "value": "S2A",
                "type": "text"
            },
            {
                "name": "reception_station",
                "value": "EDRS",
                "type": "text"
            },
            {
                "name": "channel",
                "value": "2.0",
                "type": "double"
            },
            {
                "name": "vcid",
                "value": "20.0",
                "type": "double"
            },
            {
                "name": "playback_type",
                "value": "NOMINAL",
                "type": "text"
            },
            {
                "name": "num_packets",
                "value": "1930040.0",
                "type": "double"
            },
            {
                "name": "num_frames",
                "value": "17927163.0",
                "type": "double"
            },
            {
                "name": "sad_status",
                "type": "text",
                "value": "COMPLETE"
            },
            {
                "name": "expected_num_packets",
                "value": "1931040.0",
                "type": "double"
            },
            {
                "name": "diff_expected_received",
                "value": "1000.0",
                "type": "double"
            },
            {
                "name": "packet_status",
                "value": "MISSING",
                "type": "text"
            },
            {
                "name": "footprint_details",
                "type": "object",
                "values": [
                    {
                        "name": "footprint",
                        "type": "geometry",
                        "value": "POLYGON ((94.116896 59.067486, 93.88456100000001 58.753078, 93.656046 58.438306, 93.431241 58.123179, 93.21004000000001 57.807708, 92.99233 57.491904, 92.778008 57.175776, 92.566996 56.85933, 92.359202 56.542576, 92.15454 56.225521, 91.952922 55.908173, 91.754267 55.590539, 91.55849499999999 55.272628, 91.36553000000001 54.954444, 91.175293 54.635997, 90.987694 54.317295, 90.80268599999999 53.99834, 90.620203 53.67914, 90.440179 53.3597, 90.262552 53.040026, 90.087261 52.720123, 89.91424600000001 52.399996, 89.743452 52.079652, 89.57482299999999 51.759094, 89.40828399999999 51.43833, 89.243803 51.117362, 89.08133100000001 50.796195, 88.92082000000001 50.474832, 88.762224 50.153279, 88.605496 49.831539, 88.450592 49.509616, 88.29746900000001 49.187515, 88.146084 48.865238, 87.996387 48.542791, 87.84833999999999 48.220176, 87.701915 47.897397, 87.557074 47.574457, 87.413781 47.251358, 87.272001 46.928104, 87.13170100000001 46.604699, 86.992847 46.281144, 86.855407 45.957444, 86.719345 45.6336, 86.584621 45.309617, 86.451221 44.985496, 86.319115 44.66124, 86.188275 44.336851, 86.058674 44.012331, 85.93028700000001 43.687683, 85.803085 43.36291, 85.677046 43.038013, 85.552143 42.712994, 85.428338 42.387858, 85.305623 42.062605, 85.183975 41.737237, 85.063373 41.411757, 84.943794 41.086165, 84.825219 40.760463, 84.707627 40.434655, 84.590997 40.108741, 84.475311 39.782724, 84.36053800000001 39.456605, 84.246667 39.130387, 84.133684 38.80407, 84.02157099999999 38.477656, 83.91031 38.151147, 83.799886 37.824544, 83.690282 37.497849, 83.581481 37.171064, 83.473468 36.844189, 83.36622300000001 36.517226, 83.259727 36.190178, 83.153975 35.863045, 83.048952 35.535828, 82.944643 35.208528, 82.841036 34.881148, 82.738117 34.553688, 82.63587200000001 34.22615, 82.534289 33.898534, 82.43335500000001 33.570843, 82.33304800000001 33.243077, 82.233366 32.915238, 82.134297 32.587326, 82.035831 32.259343, 81.937956 31.93129, 81.84066 31.603167, 81.743934 31.274977, 81.64776500000001 30.94672, 81.552145 30.618397, 81.45705599999999 30.290009, 81.362492 29.961558, 81.268446 29.633044, 81.17491 29.304468, 81.081873 28.975831, 80.98932499999999 28.647135, 80.89726 28.31838, 80.805666 27.989566, 80.714536 27.660696, 80.623857 27.331769, 80.53362 27.002788, 80.44382299999999 26.673752, 80.354456 26.344663, 80.265511 26.015521, 80.176982 25.686328, 80.08886 25.357084, 80.001137 25.02779, 79.91380700000001 24.698446, 79.82686099999999 24.369055, 79.740287 24.039616, 79.654084 23.71013, 79.568246 23.380599, 79.482766 23.051023, 79.39763600000001 22.721402, 79.31285 22.391737, 79.228403 22.06203, 79.14428599999999 21.732281, 79.060495 21.402491, 78.977019 21.072661, 78.893855 20.74279, 78.810999 20.412881, 78.728444 20.082933, 78.646185 19.752948, 78.564216 19.422927, 78.48253099999999 19.092869, 78.40112499999999 18.762776, 78.319992 18.432648, 78.239126 18.102486, 78.15852099999999 17.772291, 78.07817300000001 17.442064, 77.99807800000001 17.111804, 77.91823100000001 16.781514, 77.838626 16.451193, 77.759259 16.120842, 77.680125 15.790462, 77.601218 15.460054, 77.52253399999999 15.129617, 77.444067 14.799154, 77.365813 14.468664, 77.28776999999999 14.138149, 77.209931 13.807608, 77.132293 13.477042, 77.05485 13.146453, 76.9776 12.81584, 76.900537 12.485205, 76.823656 12.154548, 76.746954 11.823869, 76.670427 11.49317, 76.59407 11.162451, 76.51788000000001 10.831712, 76.441852 10.500954, 76.365984 10.170178, 76.290269 9.839385, 76.21470600000001 9.508573999999999, 76.13928900000001 9.177747, 76.064015 8.846904, 75.98887999999999 8.516045999999999, 75.913881 8.185174, 75.83901400000001 7.854287, 75.764275 7.523387, 75.68965900000001 7.192474, 75.615165 6.861549, 75.54078699999999 6.530613, 75.466522 6.199665, 75.392368 5.868708, 75.318321 5.53774, 75.244377 5.206763, 75.17053199999999 4.875777, 75.096782 4.544783, 75.02312499999999 4.213782, 74.949557 3.882774, 74.876074 3.551759, 74.802672 3.220739, 74.729349 2.889714, 74.656104 2.558683, 74.582931 2.227649, 74.509827 1.896612, 74.436787 1.565571, 74.363809 1.234528, 74.29089 0.903483, 74.218025 0.572438, 74.145213 0.241391, 74.07244900000001 -0.089656, 73.99973300000001 -0.420702, 73.92706 -0.7517470000000001, 73.854427 -1.082791, 73.781828 -1.413832, 73.709262 -1.744871, 73.636725 -2.075906, 73.564213 -2.406938, 73.491724 -2.737966, 73.419254 -3.068988, 73.34680299999999 -3.400005, 73.274367 -3.731016, 73.20194100000001 -4.062021, 73.129521 -4.393018, 73.057104 -4.724008, 72.98468699999999 -5.05499, 72.912267 -5.385963, 72.839839 -5.716926, 72.767402 -6.04788, 70.22125800000001 -5.482112, 70.295317 -5.15132, 70.36927799999999 -4.82051, 70.443145 -4.489683, 70.51692199999999 -4.15884, 70.59061199999999 -3.827981, 70.664219 -3.497108, 70.737746 -3.16622, 70.811196 -2.835318, 70.88457099999999 -2.504403, 70.957875 -2.173475, 71.03111199999999 -1.842534, 71.104287 -1.511582, 71.177401 -1.180618, 71.25045799999999 -0.849645, 71.32346200000001 -0.518661, 71.396417 -0.187668, 71.469324 0.143334, 71.542188 0.474344, 71.615008 0.805362, 71.687791 1.136388, 71.76054000000001 1.46742, 71.833259 1.798458, 71.905951 2.129501, 71.97861899999999 2.46055, 72.051267 2.791602, 72.123897 3.122659, 72.19651399999999 3.453719, 72.269114 3.784782, 72.341707 4.115847, 72.414295 4.446914, 72.48688199999999 4.777982, 72.559471 5.10905, 72.63206599999999 5.440119, 72.704669 5.771187, 72.77728500000001 6.102253, 72.84991599999999 6.433318, 72.922561 6.764382, 72.995226 7.095442, 73.06791699999999 7.4265, 73.140635 7.757553, 73.213386 8.088602, 73.28617199999999 8.419646999999999, 73.358997 8.750685000000001, 73.431864 9.081718, 73.50477600000001 9.412744, 73.577735 9.743764000000001, 73.650741 10.074776, 73.72380200000001 10.40578, 73.79692300000001 10.736775, 73.87010600000001 11.067761, 73.94335599999999 11.398737, 74.016676 11.729703, 74.090069 12.060658, 74.163539 12.391601, 74.23709100000001 12.722533, 74.310716 13.053453, 74.38442999999999 13.384359, 74.458236 13.715252, 74.53213599999999 14.046132, 74.60613600000001 14.376996, 74.680239 14.707845, 74.75444899999999 15.038679, 74.82877000000001 15.369496, 74.903206 15.700296, 74.977752 16.03108, 75.05241700000001 16.361846, 75.12720899999999 16.692593, 75.20213200000001 17.023322, 75.27718900000001 17.354031, 75.352386 17.68472, 75.427725 18.015388, 75.503212 18.346035, 75.578851 18.676661, 75.65464 19.007264, 75.730583 19.337845, 75.806691 19.668403, 75.88296800000001 19.998937, 75.959418 20.329447, 76.03604799999999 20.659931, 76.11286 20.990391, 76.18986099999999 21.320824, 76.267055 21.65123, 76.34444499999999 21.981609, 76.422025 22.311961, 76.499813 22.642285, 76.57781300000001 22.97258, 76.656032 23.302845, 76.73447299999999 23.633081, 76.813143 23.963286, 76.892048 24.293459, 76.971191 24.623601, 77.05058 24.953711, 77.130207 25.283789, 77.210087 25.613833, 77.290229 25.943843, 77.37063999999999 26.273818, 77.451325 26.603759, 77.53229 26.933663, 77.613542 27.263531, 77.695087 27.593362, 77.776931 27.923155, 77.859073 28.25291, 77.941519 28.582628, 78.02428399999999 28.912305, 78.107376 29.241942, 78.19080200000001 29.571539, 78.274568 29.901094, 78.358682 30.230608, 78.443152 30.560078, 78.527986 30.889505, 78.613186 31.218889, 78.69875 31.548228, 78.784701 31.877523, 78.871047 32.206771, 78.957797 32.535973, 79.04495900000001 32.865127, 79.132542 33.194233, 79.220555 33.52329, 79.30900699999999 33.852298, 79.397907 34.181255, 79.487246 34.510163, 79.57705 34.839019, 79.667332 35.167822, 79.75810199999999 35.496573, 79.849369 35.825269, 79.94114500000001 36.15391, 80.03344 36.482496, 80.126265 36.811025, 80.219633 37.139497, 80.31353900000001 37.467912, 80.408002 37.796268, 80.50304199999999 38.124565, 80.59867199999999 38.4528, 80.69490399999999 38.780975, 80.791751 39.109086, 80.889228 39.437134, 80.987346 39.765118, 81.086122 40.093036, 81.185559 40.420889, 81.28566499999999 40.748675, 81.386471 41.076393, 81.487993 41.404041, 81.59024700000001 41.731619, 81.69324899999999 42.059126, 81.797015 42.386559, 81.901563 42.713919, 82.00691 43.041203, 82.113073 43.368412, 82.220046 43.695545, 82.327873 44.022599, 82.43657399999999 44.349573, 82.54616900000001 44.676467, 82.656679 45.003277, 82.768125 45.330004, 82.880529 45.656645, 82.99391300000001 45.983199, 83.1083 46.309665, 83.223692 46.636042, 83.340126 46.962329, 83.45763700000001 47.288523, 83.576249 47.614622, 83.69598999999999 47.940625, 83.816886 48.26653, 83.93896700000001 48.592335, 84.06226100000001 48.918038, 84.18679899999999 49.243637, 84.312595 49.569132, 84.439679 49.894521, 84.568101 50.2198, 84.697895 50.544967, 84.82909600000001 50.87002, 84.961741 51.194957, 85.095866 51.519775, 85.23151 51.844472, 85.368713 52.169045, 85.50751099999999 52.493492, 85.647919 52.817813, 85.790013 53.142002, 85.93383799999999 53.466057, 86.079441 53.789974, 86.226871 54.11375, 86.376178 54.437383, 86.527413 54.760868, 86.68063100000001 55.084203, 86.835888 55.407383, 86.993207 55.730409, 87.152675 56.053274, 87.31436100000001 56.375973, 87.478329 56.698503, 87.64464700000001 57.020859, 87.813383 57.343036, 87.98461 57.665031, 88.158402 57.986837, 88.334838 58.308451, 88.513972 58.629869, 88.695893 58.951086, 88.880709 59.272094, 89.06851 59.592888, 89.25939099999999 59.91346, 94.116896 59.067486))"
                    }
                ]
            }
        ]

        # Check ISP_GAPs events
        isp_gap_events = self.session.query(Event).join(Gauge).filter(Gauge.name.like("ISP_GAP")).all()

        assert len(isp_gap_events) == 3

        # Check definite ISP_GAP
        isp_gap_event1 = self.session.query(Event).join(Gauge).filter(Gauge.name == "ISP_GAP",
                                                                                 Event.start == "2018-07-21T05:22:08.947423",
                                                                                 Event.stop == "2018-07-21T05:40:39.608000").all()

        assert len(isp_gap_event1) == 1

        assert isp_gap_event1[0].get_structured_values() == [
            {
                "name": "impact",
                "value": "COMPLETE",
                "type": "text"
            },
            {
                "name": "band",
                "value": "1",
                "type": "text"
            },
            {
                "name": "detector",
                "value": "6.0",
                "type": "double"
            },
            {
                "name": "downlink_orbit",
                "value": "16076.0",
                "type": "double"
            },
            {
                "name": "satellite",
                "value": "S2A",
                "type": "text"
            },
            {
                "name": "reception_station",
                "value": "EDRS",
                "type": "text"
            },
            {
                "name": "channel",
                "value": "2.0",
                "type": "double"
            },
            {
                "name": "vcid",
                "value": "20.0",
                "type": "double"
            },
            {
                "name": "playback_type",
                "value": "NOMINAL",
                "type": "text"
            },
            {
                "name": "apid",
                "value": "256.0",
                "type": "double"
            },
            {
                "name": "footprint_details",
                "type": "object",
                "values": [
                    {
                        "name": "footprint",
                        "type": "geometry",
                        "value": "POLYGON ((94.116896 59.067486, 93.88456100000001 58.753078, 93.656046 58.438306, 93.431241 58.123179, 93.21004000000001 57.807708, 92.99233 57.491904, 92.778008 57.175776, 92.566996 56.85933, 92.359202 56.542576, 92.15454 56.225521, 91.952922 55.908173, 91.754267 55.590539, 91.55849499999999 55.272628, 91.36553000000001 54.954444, 91.175293 54.635997, 90.987694 54.317295, 90.80268599999999 53.99834, 90.620203 53.67914, 90.440179 53.3597, 90.262552 53.040026, 90.087261 52.720123, 89.91424600000001 52.399996, 89.743452 52.079652, 89.57482299999999 51.759094, 89.40828399999999 51.43833, 89.243803 51.117362, 89.08133100000001 50.796195, 88.92082000000001 50.474832, 88.762224 50.153279, 88.605496 49.831539, 88.450592 49.509616, 88.29746900000001 49.187515, 88.146084 48.865238, 87.996387 48.542791, 87.84833999999999 48.220176, 87.701915 47.897397, 87.557074 47.574457, 87.413781 47.251358, 87.272001 46.928104, 87.13170100000001 46.604699, 86.992847 46.281144, 86.855407 45.957444, 86.719345 45.6336, 86.584621 45.309617, 86.451221 44.985496, 86.319115 44.66124, 86.188275 44.336851, 86.058674 44.012331, 85.93028700000001 43.687683, 85.803085 43.36291, 85.677046 43.038013, 85.552143 42.712994, 85.428338 42.387858, 85.305623 42.062605, 85.183975 41.737237, 85.063373 41.411757, 84.943794 41.086165, 84.825219 40.760463, 84.707627 40.434655, 84.590997 40.108741, 84.475311 39.782724, 84.36053800000001 39.456605, 84.246667 39.130387, 84.133684 38.80407, 84.02157099999999 38.477656, 83.91031 38.151147, 83.799886 37.824544, 83.690282 37.497849, 83.581481 37.171064, 83.473468 36.844189, 83.36622300000001 36.517226, 83.259727 36.190178, 83.153975 35.863045, 83.048952 35.535828, 82.944643 35.208528, 82.841036 34.881148, 82.738117 34.553688, 82.63587200000001 34.22615, 82.534289 33.898534, 82.43335500000001 33.570843, 82.33304800000001 33.243077, 82.233366 32.915238, 82.134297 32.587326, 82.035831 32.259343, 81.937956 31.93129, 81.84066 31.603167, 81.743934 31.274977, 81.64776500000001 30.94672, 81.552145 30.618397, 81.45705599999999 30.290009, 81.362492 29.961558, 81.268446 29.633044, 81.17491 29.304468, 81.081873 28.975831, 80.98932499999999 28.647135, 80.89726 28.31838, 80.805666 27.989566, 80.714536 27.660696, 80.623857 27.331769, 80.53362 27.002788, 80.44382299999999 26.673752, 80.354456 26.344663, 80.265511 26.015521, 80.176982 25.686328, 80.08886 25.357084, 80.001137 25.02779, 79.91380700000001 24.698446, 79.82686099999999 24.369055, 79.740287 24.039616, 79.654084 23.71013, 79.568246 23.380599, 79.482766 23.051023, 79.39763600000001 22.721402, 79.31285 22.391737, 79.228403 22.06203, 79.14428599999999 21.732281, 79.060495 21.402491, 78.977019 21.072661, 78.893855 20.74279, 78.810999 20.412881, 78.728444 20.082933, 78.646185 19.752948, 78.564216 19.422927, 78.48253099999999 19.092869, 78.40112499999999 18.762776, 78.319992 18.432648, 78.239126 18.102486, 78.15852099999999 17.772291, 78.07817300000001 17.442064, 77.99807800000001 17.111804, 77.91823100000001 16.781514, 77.838626 16.451193, 77.759259 16.120842, 77.680125 15.790462, 77.601218 15.460054, 77.52253399999999 15.129617, 77.444067 14.799154, 77.365813 14.468664, 77.28776999999999 14.138149, 77.209931 13.807608, 77.132293 13.477042, 77.05485 13.146453, 76.9776 12.81584, 76.900537 12.485205, 76.823656 12.154548, 76.746954 11.823869, 76.670427 11.49317, 76.59407 11.162451, 76.51788000000001 10.831712, 76.441852 10.500954, 76.365984 10.170178, 76.290269 9.839385, 76.21470600000001 9.508573999999999, 76.13928900000001 9.177747, 76.064015 8.846904, 75.98887999999999 8.516045999999999, 75.913881 8.185174, 75.83901400000001 7.854287, 75.764275 7.523387, 75.68965900000001 7.192474, 75.615165 6.861549, 75.54078699999999 6.530613, 75.466522 6.199665, 75.392368 5.868708, 75.318321 5.53774, 75.244377 5.206763, 75.17053199999999 4.875777, 75.096782 4.544783, 75.02312499999999 4.213782, 74.949557 3.882774, 74.876074 3.551759, 74.802672 3.220739, 74.729349 2.889714, 74.656104 2.558683, 74.582931 2.227649, 74.509827 1.896612, 74.436787 1.565571, 74.363809 1.234528, 74.29089 0.903483, 74.218025 0.572438, 74.145213 0.241391, 74.07244900000001 -0.089656, 73.99973300000001 -0.420702, 73.92706 -0.7517470000000001, 73.854427 -1.082791, 73.781828 -1.413832, 73.709262 -1.744871, 73.636725 -2.075906, 73.564213 -2.406938, 73.491724 -2.737966, 73.419254 -3.068988, 73.34680299999999 -3.400005, 73.274367 -3.731016, 73.20194100000001 -4.062021, 73.129521 -4.393018, 73.057104 -4.724008, 72.98468699999999 -5.05499, 72.912267 -5.385963, 72.839839 -5.716926, 72.767402 -6.04788, 70.22125800000001 -5.482112, 70.295317 -5.15132, 70.36927799999999 -4.82051, 70.443145 -4.489683, 70.51692199999999 -4.15884, 70.59061199999999 -3.827981, 70.664219 -3.497108, 70.737746 -3.16622, 70.811196 -2.835318, 70.88457099999999 -2.504403, 70.957875 -2.173475, 71.03111199999999 -1.842534, 71.104287 -1.511582, 71.177401 -1.180618, 71.25045799999999 -0.849645, 71.32346200000001 -0.518661, 71.396417 -0.187668, 71.469324 0.143334, 71.542188 0.474344, 71.615008 0.805362, 71.687791 1.136388, 71.76054000000001 1.46742, 71.833259 1.798458, 71.905951 2.129501, 71.97861899999999 2.46055, 72.051267 2.791602, 72.123897 3.122659, 72.19651399999999 3.453719, 72.269114 3.784782, 72.341707 4.115847, 72.414295 4.446914, 72.48688199999999 4.777982, 72.559471 5.10905, 72.63206599999999 5.440119, 72.704669 5.771187, 72.77728500000001 6.102253, 72.84991599999999 6.433318, 72.922561 6.764382, 72.995226 7.095442, 73.06791699999999 7.4265, 73.140635 7.757553, 73.213386 8.088602, 73.28617199999999 8.419646999999999, 73.358997 8.750685000000001, 73.431864 9.081718, 73.50477600000001 9.412744, 73.577735 9.743764000000001, 73.650741 10.074776, 73.72380200000001 10.40578, 73.79692300000001 10.736775, 73.87010600000001 11.067761, 73.94335599999999 11.398737, 74.016676 11.729703, 74.090069 12.060658, 74.163539 12.391601, 74.23709100000001 12.722533, 74.310716 13.053453, 74.38442999999999 13.384359, 74.458236 13.715252, 74.53213599999999 14.046132, 74.60613600000001 14.376996, 74.680239 14.707845, 74.75444899999999 15.038679, 74.82877000000001 15.369496, 74.903206 15.700296, 74.977752 16.03108, 75.05241700000001 16.361846, 75.12720899999999 16.692593, 75.20213200000001 17.023322, 75.27718900000001 17.354031, 75.352386 17.68472, 75.427725 18.015388, 75.503212 18.346035, 75.578851 18.676661, 75.65464 19.007264, 75.730583 19.337845, 75.806691 19.668403, 75.88296800000001 19.998937, 75.959418 20.329447, 76.03604799999999 20.659931, 76.11286 20.990391, 76.18986099999999 21.320824, 76.267055 21.65123, 76.34444499999999 21.981609, 76.422025 22.311961, 76.499813 22.642285, 76.57781300000001 22.97258, 76.656032 23.302845, 76.73447299999999 23.633081, 76.813143 23.963286, 76.892048 24.293459, 76.971191 24.623601, 77.05058 24.953711, 77.130207 25.283789, 77.210087 25.613833, 77.290229 25.943843, 77.37063999999999 26.273818, 77.451325 26.603759, 77.53229 26.933663, 77.613542 27.263531, 77.695087 27.593362, 77.776931 27.923155, 77.859073 28.25291, 77.941519 28.582628, 78.02428399999999 28.912305, 78.107376 29.241942, 78.19080200000001 29.571539, 78.274568 29.901094, 78.358682 30.230608, 78.443152 30.560078, 78.527986 30.889505, 78.613186 31.218889, 78.69875 31.548228, 78.784701 31.877523, 78.871047 32.206771, 78.957797 32.535973, 79.04495900000001 32.865127, 79.132542 33.194233, 79.220555 33.52329, 79.30900699999999 33.852298, 79.397907 34.181255, 79.487246 34.510163, 79.57705 34.839019, 79.667332 35.167822, 79.75810199999999 35.496573, 79.849369 35.825269, 79.94114500000001 36.15391, 80.03344 36.482496, 80.126265 36.811025, 80.219633 37.139497, 80.31353900000001 37.467912, 80.408002 37.796268, 80.50304199999999 38.124565, 80.59867199999999 38.4528, 80.69490399999999 38.780975, 80.791751 39.109086, 80.889228 39.437134, 80.987346 39.765118, 81.086122 40.093036, 81.185559 40.420889, 81.28566499999999 40.748675, 81.386471 41.076393, 81.487993 41.404041, 81.59024700000001 41.731619, 81.69324899999999 42.059126, 81.797015 42.386559, 81.901563 42.713919, 82.00691 43.041203, 82.113073 43.368412, 82.220046 43.695545, 82.327873 44.022599, 82.43657399999999 44.349573, 82.54616900000001 44.676467, 82.656679 45.003277, 82.768125 45.330004, 82.880529 45.656645, 82.99391300000001 45.983199, 83.1083 46.309665, 83.223692 46.636042, 83.340126 46.962329, 83.45763700000001 47.288523, 83.576249 47.614622, 83.69598999999999 47.940625, 83.816886 48.26653, 83.93896700000001 48.592335, 84.06226100000001 48.918038, 84.18679899999999 49.243637, 84.312595 49.569132, 84.439679 49.894521, 84.568101 50.2198, 84.697895 50.544967, 84.82909600000001 50.87002, 84.961741 51.194957, 85.095866 51.519775, 85.23151 51.844472, 85.368713 52.169045, 85.50751099999999 52.493492, 85.647919 52.817813, 85.790013 53.142002, 85.93383799999999 53.466057, 86.079441 53.789974, 86.226871 54.11375, 86.376178 54.437383, 86.527413 54.760868, 86.68063100000001 55.084203, 86.835888 55.407383, 86.993207 55.730409, 87.152675 56.053274, 87.31436100000001 56.375973, 87.478329 56.698503, 87.64464700000001 57.020859, 87.813383 57.343036, 87.98461 57.665031, 88.158402 57.986837, 88.334838 58.308451, 88.513972 58.629869, 88.695893 58.951086, 88.880709 59.272094, 89.06851 59.592888, 89.25939099999999 59.91346, 94.116896 59.067486))"
                    }
                ]
            }
        ]
        
        isp_gap_event2 = self.session.query(Event).join(Gauge).filter(Gauge.name == "ISP_GAP",
                                                                                 Event.start == "2018-07-21T05:22:08.947423",
                                                                                 Event.stop == "2018-07-21T05:30:08.947423").all()

        assert len(isp_gap_event2) == 1

        assert isp_gap_event2[0].get_structured_values() == [
            {
                "name": "impact",
                "value": "AT_THE_BEGINNING",
                "type": "text"
            },
            {
                "name": "band",
                "value": "3",
                "type": "text"
            },
            {
                "name": "detector",
                "value": "6.0",
                "type": "double"
            },
            {
                "name": "downlink_orbit",
                "value": "16076.0",
                "type": "double"
            },
            {
                "name": "satellite",
                "value": "S2A",
                "type": "text"
            },
            {
                "name": "reception_station",
                "value": "EDRS",
                "type": "text"
            },
            {
                "name": "channel",
                "value": "2.0",
                "type": "double"
            },
            {
                "name": "vcid",
                "value": "20.0",
                "type": "double"
            },
            {
                "name": "playback_type",
                "value": "NOMINAL",
                "type": "text"
            },
            {
                "name": "apid",
                "value": "258.0",
                "type": "double"
            },
            {
                "name": "footprint_details",
                "type": "object",
                "values": [
                    {
                        "name": "footprint",
                        "type": "geometry",
                        "value": "POLYGON ((94.116896 59.067486, 93.966227 58.864219, 93.817177 58.660797, 93.669667 58.457229, 93.52373299999999 58.253511, 93.379346 58.049644, 93.236423 57.845638, 93.094965 57.641492, 92.954972 57.437206, 92.81640299999999 57.232782, 92.679182 57.028232, 92.543346 56.823547, 92.408873 56.618731, 92.275689 56.413792, 92.143792 56.20873, 92.013186 56.003543, 91.883841 55.798234, 91.75567700000001 55.592812, 91.628739 55.387272, 91.503005 55.181614, 91.378412 54.975847, 91.254953 54.76997, 91.132639 54.563983, 91.011444 54.357886, 90.89129 54.151689, 90.772223 53.945385, 90.654225 53.738978, 90.53724200000001 53.532472, 90.421262 53.325868, 90.306299 53.119164, 90.192336 52.912362, 90.079292 52.705471, 89.96721700000001 52.498485, 89.856095 52.291405, 89.745878 52.084235, 89.63655199999999 51.876979, 89.52813399999999 51.669632, 89.420609 51.462197, 89.313903 51.254682, 89.208062 51.04708, 89.103072 50.839394, 88.99889400000001 50.631627, 88.895509 50.423782, 88.79293699999999 50.215855, 88.691165 50.007848, 88.59012800000001 49.799768, 88.489863 49.59161, 88.390362 49.383376, 88.291591 49.175068, 88.193528 48.966689, 88.09619600000001 48.758236, 87.999583 48.54971, 87.903631 48.341118, 87.80837099999999 48.132455, 87.71379899999999 47.923722, 87.61988599999999 47.714923, 87.526606 47.506058, 87.43398500000001 47.297126, 87.342012 47.088129, 87.250636 46.879069, 87.159881 46.669946, 87.06974700000001 46.460759, 86.98021 46.25151, 86.89124099999999 46.042203, 86.802868 45.832834, 86.715081 45.623404, 86.627833 45.413918, 86.541146 45.204373, 86.45502 44.99477, 86.36943599999999 44.78511, 86.284364 44.575397, 86.19983000000001 44.365627, 86.11582900000001 44.155801, 86.03231700000001 43.945923, 85.94931 43.735992, 85.86681299999999 43.526007, 85.78480999999999 43.315969, 85.703267 43.105883, 85.622214 42.895744, 85.54164400000001 42.685554, 85.461521 42.475316, 85.38185300000001 42.265028, 85.30265 42.054692, 85.22389699999999 41.844306, 85.14555900000001 41.633876, 85.067668 41.423397, 84.990216 41.212871, 84.91317100000001 41.0023, 84.83654 40.791685, 84.76033200000001 40.581023, 84.684535 40.370317, 84.609115 40.159568, 84.53410100000001 39.948775, 84.45948799999999 39.737939, 84.385248 39.527061, 84.31138300000001 39.316141, 84.237904 39.105179, 84.16480199999999 38.894175, 84.09204200000001 38.683133, 84.01965199999999 38.472049, 83.94762900000001 38.260925, 83.87594799999999 38.049762, 83.804607 37.838561, 83.733619 37.62732, 83.66297900000001 37.416041, 83.592647 37.204725, 83.522655 36.993372, 83.45299900000001 36.781981, 83.383656 36.570554, 83.314623 36.359091, 83.245913 36.147592, 83.177522 35.936056, 83.109413 35.724488, 83.04161499999999 35.512883, 82.974124 35.301244, 82.906921 35.089572, 82.840001 34.877866, 82.773377 34.666126, 82.70704499999999 34.454353, 82.640973 34.242549, 82.575185 34.030712, 82.50967799999999 33.818842, 82.44443699999999 33.606941, 82.379453 33.395009, 82.314742 33.183046, 82.250298 32.971052, 82.186094 32.759028, 82.122148 32.546974, 82.05846200000001 32.334889, 81.99502 32.122776, 81.931814 31.910634, 81.86885700000001 31.698462, 81.806146 31.486262, 81.743657 31.274034, 78.784454 31.876577, 78.84025699999999 32.089486, 78.896199 32.302377, 78.952324 32.515248, 79.008636 32.728098, 79.065102 32.94093, 79.12174 33.153741, 79.178572 33.366532, 79.23559299999999 33.579301, 79.292766 33.792051, 79.350139 34.00478, 79.40771700000001 34.217487, 79.465468 34.430173, 79.52340599999999 34.642838, 79.58155600000001 34.855481, 79.639917 35.068101, 79.698443 35.280701, 79.757189 35.493278, 79.816159 35.705831, 79.87532400000001 35.918362, 79.934692 36.130871, 79.994292 36.343356, 80.05412699999999 36.555817, 80.114142 36.768256, 80.17439899999999 36.98067, 80.23490099999999 37.19306, 80.295621 37.405426, 80.356562 37.617768, 80.41775800000001 37.830085, 80.479213 38.042375, 80.540869 38.254642, 80.602788 38.466884, 80.66497699999999 38.679098, 80.72740899999999 38.891287, 80.790082 39.103451, 80.853036 39.315588, 80.916273 39.527696, 80.979737 39.73978, 81.043488 39.951836, 81.107535 40.163864, 81.171854 40.375864, 81.236437 40.587837, 81.301328 40.799781, 81.36653 41.011695, 81.431989 41.223583, 81.49776 41.435441, 81.563856 41.647268, 81.630257 41.859066, 81.69694699999999 42.070835, 81.763975 42.282573, 81.83134699999999 42.494279, 81.89900799999999 42.705956, 81.96701 42.917602, 82.03537 43.129214, 82.104071 43.340795, 82.17309 43.552346, 82.242482 43.763862, 82.312253 43.975344, 82.382349 44.186796, 82.45281900000001 44.398213, 82.523684 44.609595, 82.594931 44.820943, 82.666528 45.032258, 82.73853699999999 45.243537, 82.81096599999999 45.454779, 82.88376100000001 45.665987, 82.95696700000001 45.877159, 83.03061 46.088293, 83.10468 46.29939, 83.179137 46.510451, 83.254052 46.721474, 83.32943 46.932456, 83.40522300000001 47.143402, 83.48146800000001 47.354309, 83.558198 47.565175, 83.635406 47.776, 83.71304499999999 47.986788, 83.791191 48.197533, 83.86985300000001 48.408234, 83.948982 48.618896, 84.028612 48.829516, 84.10878099999999 49.040091, 84.189488 49.250622, 84.270674 49.461112, 84.352425 49.671556, 84.43474999999999 49.881953, 84.51760400000001 50.092306, 84.60101400000001 50.302614, 84.68502599999999 50.512872, 84.769642 50.723082, 84.854795 50.933249, 84.940579 51.143364, 85.02700400000001 51.353428, 85.11403 51.563444, 85.20167499999999 51.773411, 85.28999399999999 51.983324, 85.378995 52.193183, 85.468598 52.402995, 85.558908 52.612751, 85.64993800000001 52.822451, 85.741649 53.032097, 85.834056 53.24169, 85.927218 53.451223, 86.021151 53.660697, 86.11576599999999 53.870119, 86.211175 54.079479, 86.307395 54.288777, 86.404391 54.498016, 86.50216899999999 54.707196, 86.60080000000001 54.91631, 86.7003 55.125358, 86.800583 55.334348, 86.90176 55.54327, 87.003851 55.752124, 87.106831 55.96091, 87.210695 56.169632, 87.31552499999999 56.378281, 87.42134 56.586856, 87.528057 56.795365, 87.635783 57.0038, 87.74454900000001 57.212157, 87.854333 57.420439, 87.96512300000001 57.628649, 88.07701299999999 57.836777, 88.19002399999999 58.044823, 88.304078 58.252794, 88.41927800000001 58.460682, 88.53566499999999 58.668483, 88.65322399999999 58.876199, 88.771934 59.083833, 88.891903 59.291376, 89.013155 59.498826, 89.13561799999999 59.70619, 89.25939099999999 59.91346, 94.116896 59.067486))"
                    }
                ]
            }
        ]

        isp_gap_event3 = self.session.query(Event).join(Gauge).filter(Gauge.name == "ISP_GAP",
                                                                                 Event.start == "2018-07-21T05:35:36",
                                                                                 Event.stop == "2018-07-21T05:40:39.608000").all()

        assert len(isp_gap_event3) == 1

        assert isp_gap_event3[0].get_structured_values() == [
            {
                "name": "impact",
                "value": "AT_THE_END",
                "type": "text"
            },
            {
                "name": "band",
                "value": "4",
                "type": "text"
            },
            {
                "name": "detector",
                "value": "6.0",
                "type": "double"
            },
            {
                "name": "downlink_orbit",
                "value": "16076.0",
                "type": "double"
            },
            {
                "name": "satellite",
                "value": "S2A",
                "type": "text"
            },
            {
                "name": "reception_station",
                "value": "EDRS",
                "type": "text"
            },
            {
                "name": "channel",
                "value": "2.0",
                "type": "double"
            },
            {
                "name": "vcid",
                "value": "20.0",
                "type": "double"
            },
            {
                "name": "playback_type",
                "value": "NOMINAL",
                "type": "text"
            },
            {
                "name": "apid",
                "value": "259.0",
                "type": "double"
            },
            {
                "name": "footprint_details",
                "type": "object",
                "values": [
                    {
                        "name": "footprint",
                        "type": "geometry",
                        "value": "POLYGON ((76.777479 11.955565, 76.72785500000001 11.741412, 76.67830499999999 11.527251, 76.628826 11.313081, 76.579418 11.098903, 76.530079 10.884717, 76.48080899999999 10.670523, 76.431606 10.456321, 76.382469 10.242112, 76.333398 10.027895, 76.28439 9.813670999999999, 76.235446 9.599439, 76.186564 9.385201, 76.137742 9.170956, 76.088981 8.956704, 76.040279 8.742445999999999, 75.991634 8.528181999999999, 75.943046 8.313910999999999, 75.894514 8.099634999999999, 75.846037 7.885353, 75.797613 7.671065, 75.749244 7.456771, 75.700925 7.242473, 75.652657 7.028169, 75.604439 6.81386, 75.556271 6.599546, 75.508149 6.385228, 75.46007400000001 6.170905, 75.412047 5.956578, 75.364064 5.742246, 75.316124 5.527911, 75.268227 5.313572, 75.220375 5.099229, 75.172562 4.884882, 75.124788 4.670532, 75.077056 4.456179, 75.02936200000001 4.241823, 74.981703 4.027464, 74.93408100000001 3.813102, 74.886498 3.598737, 74.838947 3.38437, 74.791428 3.170001, 74.74394599999999 2.955629, 74.696495 2.741256, 74.649072 2.526881, 74.60168 2.312504, 74.55432 2.098125, 74.506987 1.883746, 74.459678 1.669364, 74.41240000000001 1.454982, 74.36514699999999 1.240599, 74.31791699999999 1.026216, 74.270708 0.811831, 74.223529 0.597446, 74.176368 0.383061, 74.129226 0.168676, 74.08210699999999 -0.045709, 74.03501 -0.260094, 73.987927 -0.474479, 73.940859 -0.688863, 73.893816 -0.903247, 73.846785 -1.11763, 73.79976600000001 -1.332012, 73.752764 -1.546393, 73.705777 -1.760772, 73.658799 -1.975151, 73.611829 -2.189528, 73.56487799999999 -2.403903, 73.517934 -2.618276, 73.470995 -2.832647, 73.424065 -3.047017, 73.37714699999999 -3.261384, 73.330231 -3.475748, 73.283316 -3.69011, 73.236414 -3.904469, 73.189514 -4.118826, 73.142611 -4.333179, 73.09571200000001 -4.547529, 73.04881899999999 -4.761876, 73.001921 -4.97622, 72.955018 -5.19056, 72.908123 -5.404896, 72.861223 -5.619228, 72.814314 -5.833556, 72.767402 -6.04788, 70.22125800000001 -5.482112, 70.269229 -5.267893, 70.317159 -5.053667, 70.36505 -4.839434, 70.41290100000001 -4.625194, 70.460712 -4.410947, 70.508486 -4.196693, 70.556225 -3.982433, 70.603926 -3.768166, 70.65159199999999 -3.553892, 70.699226 -3.339613, 70.74682799999999 -3.125328, 70.794394 -2.911037, 70.84193 -2.69674, 70.889438 -2.482438, 70.936915 -2.26813, 70.984362 -2.053817, 71.031784 -1.839499, 71.07918100000001 -1.625177, 71.126547 -1.410849, 71.17389 -1.196517, 71.22121199999999 -0.982181, 71.26850899999999 -0.76784, 71.315781 -0.553495, 71.363035 -0.339146, 71.41027200000001 -0.124794, 71.457482 0.089563, 71.504676 0.303923, 71.551855 0.518286, 71.59901600000001 0.732653, 71.646158 0.9470229999999999, 71.693287 1.161395, 71.74040599999999 1.37577, 71.787505 1.590148, 71.834593 1.804529, 71.88167300000001 2.018911, 71.928741 2.233296, 71.97579500000001 2.447683, 72.02284400000001 2.662072, 72.06988800000001 2.876461, 72.116919 3.090854, 72.163944 3.305247, 72.210967 3.519642, 72.257987 3.734037, 72.304996 3.948435, 72.352007 4.162832, 72.39901999999999 4.37723, 72.44602500000001 4.591629, 72.493031 4.806028, 72.540041 5.020427, 72.58705500000001 5.234826, 72.634063 5.449226, 72.681079 5.663625, 72.728104 5.878024, 72.775127 6.092422, 72.82215600000001 6.30682, 72.869197 6.521216, 72.91624899999999 6.735612, 72.96329799999999 6.950007, 73.010362 7.1644, 73.05744300000001 7.378792, 73.104529 7.593183, 73.151625 7.807572, 73.198739 8.021958, 73.245873 8.236343, 73.293008 8.450726, 73.340165 8.665107000000001, 73.387345 8.879484, 73.434538 9.093859999999999, 73.481745 9.308233, 73.528978 9.522603, 73.576238 9.736969, 73.623504 9.951333, 73.670799 10.165694, 73.71812300000001 10.38005, 73.765468 10.594403, 73.812832 10.808753, 73.860229 11.023099, 73.907659 11.23744, 73.95510400000001 11.451778, 74.00258100000001 11.666111, 74.050096 11.880439, 74.09764 12.094763, 74.145207 12.309083, 74.192814 12.523397, 76.777479 11.955565))"
                    }
                ]
            }
        ]

        # Check PLAYBACKGA_Ps events
        playback_gap_events = self.session.query(Event).join(Gauge).filter(Gauge.name.like("PLAYBACK_GAP")).all()

        assert len(playback_gap_events) == 1

        # Check definite PLAYBACK_GAP
        playback_gap_event1 = self.session.query(Event).join(Gauge).filter(Gauge.name == "PLAYBACK_GAP",
                                                                                 Event.start == "2018-07-21T07:28:23.555000",
                                                                                 Event.stop == "2018-07-21T07:28:23.888999").all()

        assert len(playback_gap_event1) == 1

        assert playback_gap_event1[0].get_structured_values() == [
            {
                "type": "double",
                "name": "downlink_orbit",
                "value": "16076.0"
            },
            {
                "type": "text",
                "name": "satellite",
                "value": "S2A"
            },
            {
                "type": "text",
                "name": "reception_station",
                "value": "EDRS"
            },
            {
                "type": "double",
                "name": "channel",
                "value": "2.0"
            },
            {
                "type": "double",
                "name": "vcid",
                "value": "20.0"
            },
            {
                "type": "text",
                "name": "playback_type",
                "value": "NOMINAL"
            },
            {
                "name": "footprint_details",
                "type": "object",
                "values": [
                    {
                        "name": "footprint",
                        "type": "geometry",
                        "value": "POLYGON ((41.808028 -31.018905, 38.843875 -30.412247, 38.843875 -30.412247, 41.808028 -31.018905))"
                    }
                ]
            }
        ]

    def test_insert_rep_pass_no_data(self):
        filename = "S2A_OPER_REP_PASS_E_NO_DATA.EOF"
        file_path = os.path.dirname(os.path.abspath(__file__)) + "/inputs/" + filename

        exit_status = ingestion.command_process_file("s2boa.ingestions.ingestion_edrs_acquisition.ingestion_edrs_acquisition", file_path, "2018-01-01T00:00:00")

        assert len([item for item in exit_status if item["status"] != eboa_engine.exit_codes["OK"]["status"]]) == 0

        # Check number of events generated
        events = self.session.query(Event).all()

        assert len(events) == 0

        # Check number of annotations generated
        annotations = self.session.query(Annotation).all()

        assert len(annotations) == 0

        # Check that the validity period of the input has taken into consideration the MSI sensing received
        source = self.session.query(Source).filter(Source.reported_validity_start == "2018-07-21T07:28:23",
                                                   Source.reported_validity_stop == "2018-07-21T07:37:55",
                                                   Source.validity_start == "2018-07-21T07:28:23",
                                                   Source.validity_stop == "2018-07-21T07:37:55").all()

        assert len(source) == 1

    def test_insert_rep_pass_with_plan(self):

        filename = "S2A_NPPF.EOF"
        file_path = os.path.dirname(os.path.abspath(__file__)) + "/inputs/" + filename

        exit_status = ingestion.command_process_file("s2boa.ingestions.ingestion_nppf.ingestion_nppf", file_path, "2018-01-01T00:00:00")

        assert len([item for item in exit_status if item["status"] != eboa_engine.exit_codes["OK"]["status"]]) == 0

        filename = "S2A_ORBPRE.EOF"
        file_path = os.path.dirname(os.path.abspath(__file__)) + "/inputs/" + filename

        exit_status = ingestion.command_process_file("s2boa.ingestions.ingestion_orbpre.ingestion_orbpre", file_path, "2018-01-01T00:00:00")

        assert len([item for item in exit_status if item["status"] != eboa_engine.exit_codes["OK"]["status"]]) == 0

        filename = "S2__SRA.EOF"
        file_path = os.path.dirname(os.path.abspath(__file__)) + "/inputs/" + filename

        exit_status = ingestion.command_process_file("s2boa.ingestions.ingestion_slot_request_edrs.ingestion_slot_request_edrs", file_path, "2018-01-01T00:00:00")

        assert len([item for item in exit_status if item["status"] != eboa_engine.exit_codes["OK"]["status"]]) == 0

        filename = "S2A_OPER_REP_PASS_E_CONTAINING_ALL_DATA_TO_BE_PROCESS.EOF"
        file_path = os.path.dirname(os.path.abspath(__file__)) + "/inputs/" + filename

        exit_status = ingestion.command_process_file("s2boa.ingestions.ingestion_edrs_acquisition.ingestion_edrs_acquisition", file_path, "2018-01-01T00:00:00")

        assert len([item for item in exit_status if item["status"] != eboa_engine.exit_codes["OK"]["status"]]) == 0

        # Check sources
        source = self.session.query(Source).filter(Source.reported_validity_start == "2018-07-21T07:28:23",
                                                   Source.reported_validity_stop == "2018-07-21T07:37:55",
                                                   Source.validity_start == "2018-07-20T17:33:12.859268",
                                                   Source.validity_stop == "2018-07-21T07:37:55.121772",
                                                   Source.name == "S2A_OPER_REP_PASS_E_CONTAINING_ALL_DATA_TO_BE_PROCESS.EOF",
                                                   Source.processor == "ingestion_edrs_acquisition.py").all()

        assert len(source) == 2

        source = self.session.query(Source).filter(Source.reported_validity_start == "2018-07-21T07:28:23",
                                                   Source.reported_validity_stop == "2018-07-21T07:37:55",
                                                   Source.validity_start == "2018-07-21T05:22:08.947423",
                                                   Source.validity_stop == "2018-07-21T05:40:35.417601",
                                                   Source.name == "S2A_OPER_REP_PASS_E_CONTAINING_ALL_DATA_TO_BE_PROCESS.EOF",
                                                   Source.processor == "isp_planning_completeness_ingestion_edrs_acquisition.py").all()

        assert len(source) == 1

        # Check number of events generated
        events = self.session.query(Event).join(Source).filter(Source.name == "S2A_OPER_REP_PASS_E_CONTAINING_ALL_DATA_TO_BE_PROCESS.EOF").all()

        assert len(events) == 18

        # Check PLANNED_IMAGING_ISP_COMPLETENESS_CHANNEL events
        isp_completeness_events = self.session.query(Event).join(Gauge).filter(Gauge.name.like("PLANNED_IMAGING_ISP_COMPLETENESS_CHANNEL%")).all()

        assert len(isp_completeness_events) == 5

        # Check definite ISP completeness
        isp_completeness_missing_left = self.session.query(Event).join(Gauge).filter(Gauge.name.like("PLANNED_IMAGING_ISP_COMPLETENESS_CHANNEL_%"),
                                                                                 Event.start == "2018-07-21T05:16:58.773036",
                                                                                 Event.stop == "2018-07-21T05:22:08.947423").all()

        assert len(isp_completeness_missing_left) == 1

        assert isp_completeness_missing_left[0].get_structured_values() == [
            {
                "type": "text",
                "value": "MPMSNOBS",
                "name": "start_request"
            },
            {
                "type": "text",
                "value": "MPMSIMID",
                "name": "stop_request"
            },
            {
                "type": "double",
                "value": "16075.0",
                "name": "start_orbit"
            },
            {
                "type": "double",
                "value": "100.3083",
                "name": "start_angle"
            },
            {
                "type": "double",
                "value": "16075.0",
                "name": "stop_orbit"
            },
            {
                "type": "double",
                "value": "171.1847",
                "name": "stop_angle"
            },
            {
                "type": "text",
                "value": "S2A",
                "name": "satellite"
            },
            {
                "type": "text",
                "value": "NOMINAL",
                "name": "record_type"
            },
            {
                "type": "text",
                "value": "NOMINAL",
                "name": "imaging_mode"
            },
            {
                "type": "object",
                "values": [
                    {
                        "type": "double",
                        "value": "0.0",
                        "name": "start_scn_dup"
                    }
                ],
                "name": "parameters"
            },
            {
                "type": "text",
                "value": "TIME_CORRECTED",
                "name": "status_correction"
            },
            {
                "type": "double",
                "value": "-5.365036",
                "name": "delta_start"
            },
            {
                "type": "double",
                "value": "-5.12251",
                "name": "delta_stop"
            },
            {
                "type": "text",
                "value": "MISSING",
                "name": "status"
            },
            {
                "name": "footprint_details_0",
                "type": "object",
                "values": [
                    {
                        "name": "footprint",
                        "type": "geometry",
                        "value": "POLYGON ((119.690177 75.29900600000001, 119.108056 75.137455, 118.53799 74.97452, 117.979688 74.810244, 117.432787 74.644687, 116.897014 74.47788799999999, 116.372162 74.309872, 115.85796 74.14067799999999, 115.354011 73.97036799999999, 114.860172 73.798956, 114.3762 73.62647200000001, 113.901807 73.452958, 113.436685 73.278457, 112.9807 73.102981, 112.533617 72.92655999999999, 112.095118 72.74923800000001, 111.665027 72.571037, 111.243173 72.39197299999999, 110.829342 72.21207200000001, 110.423202 72.031384, 110.024685 71.849908, 109.633596 71.66766699999999, 109.249693 71.484692, 108.872766 71.301011, 108.502716 71.11662800000001, 108.139367 70.931566, 107.78245 70.74585999999999, 107.431873 70.559516, 107.087504 70.372547, 106.749168 70.18497499999999, 106.416627 69.996831, 106.089841 69.80811199999999, 105.768666 69.618835, 105.452899 69.429025, 105.142412 69.238697, 104.837134 69.047853, 104.536934 68.85650800000001, 104.241583 68.664694, 103.951057 68.47240600000001, 103.665251 68.27965500000001, 103.384018 68.086459, 103.107198 67.892837, 102.834766 67.698787, 102.56662 67.50432000000001, 102.302583 67.30945699999999, 102.042593 67.114204, 101.786593 66.918564, 101.534487 66.72254700000001, 101.286081 66.526178, 101.041395 66.32944999999999, 100.800344 66.13237100000001, 100.5628 65.934957, 100.328664 65.737218, 100.09792 65.539152, 99.870492 65.340767, 99.646226 65.142084, 99.425107 64.943099, 99.207088 64.74381700000001, 98.992086 64.544247, 98.779963 64.34440499999999, 98.57074299999999 64.14428599999999, 98.36435899999999 63.943895, 98.160701 63.743246, 97.959715 63.542343, 97.76138899999999 63.341187, 97.565665 63.139782, 97.372404 62.938146, 97.181629 62.736273, 96.993296 62.534166, 96.807329 62.331835, 96.623639 62.12929, 96.442244 61.926526, 96.263096 61.723547, 96.08609199999999 61.520367, 95.911214 61.316985, 95.73845 61.113401, 95.56775500000001 60.90962, 95.399007 60.705656, 95.232249 60.501502, 95.067442 60.297162, 94.90451400000001 60.092644, 94.74341099999999 59.887954, 94.584148 59.683088, 94.426688 59.478049, 94.270933 59.272849, 94.116896 59.067486, 89.25939099999999 59.91346, 89.38592199999999 60.122933, 89.513845 60.332306, 89.643119 60.541585, 89.773871 60.750758, 89.906133 60.959823, 90.039861 61.168785, 90.175111 61.377641, 90.31196799999999 61.586381, 90.450468 61.795005, 90.590519 62.003523, 90.73228 62.211919, 90.875794 62.420192, 91.021052 62.628342, 91.168053 62.836373, 91.316925 63.044271, 91.46771099999999 63.252035, 91.620355 63.459671, 91.774962 63.667171, 91.931617 63.874527, 92.090354 64.081738, 92.251107 64.28881199999999, 92.41405399999999 64.495733, 92.57924800000001 64.70249699999999, 92.746673 64.90910700000001, 92.916375 65.115562, 93.08848999999999 65.321848, 93.263075 65.527963, 93.44006400000001 65.733915, 93.619623 65.939689, 93.80184 66.145279, 93.98674699999999 66.350683, 94.17432599999999 66.555907, 94.364768 66.760932, 94.558148 66.96575300000001, 94.754446 67.170376, 94.953768 67.374792, 95.156263 67.578988, 95.362013 67.78295900000001, 95.570943 67.986716, 95.783299 68.190237, 95.999178 68.393513, 96.21861699999999 68.596546, 96.44166 68.799334, 96.66852299999999 69.001857, 96.899311 69.20410800000001, 97.134007 69.40609499999999, 97.37280199999999 69.6078, 97.615863 69.809208, 97.86329499999999 70.01031500000001, 98.115075 70.211127, 98.3715 70.41161700000001, 98.632707 70.611774, 98.898746 70.8116, 99.16975100000001 71.01108499999999, 99.445975 71.210206, 99.727576 71.408952, 100.014549 71.607331, 100.3072 71.80531499999999, 100.605734 72.002887, 100.91029 72.200039, 101.220943 72.396772, 101.538046 72.593052, 101.861807 72.78886199999999, 102.192311 72.98420400000001, 102.529819 73.17905500000001, 102.874644 73.373389, 103.227027 73.56718600000001, 103.587003 73.76045499999999, 103.955034 73.95315100000001, 104.331395 74.145251, 104.716286 74.33674499999999, 105.109927 74.527619, 105.512766 74.717831, 105.925117 74.90735599999999, 106.347138 75.096189, 106.779268 75.28429199999999, 107.221926 75.471627, 107.675456 75.65816700000001, 108.140041 75.843908, 108.616296 76.02878699999999, 109.104631 76.212771, 109.605357 76.395839, 110.118902 76.577957, 110.645857 76.759066, 111.186702 76.939125, 119.690177 75.29900600000001))"
                    }
                ]
            }
        ]
        
        isp_completeness_statuses = [event for event in isp_completeness_missing_left if len([value for value in event.eventTexts if value.name == "status" and value.value == "MISSING"]) > 0]

        assert len(isp_completeness_statuses) == 1

        # Check number of annotations generated
        annotations = self.session.query(Annotation).join(Source).filter(Source.name == "S2A_OPER_REP_PASS_E_CONTAINING_ALL_DATA_TO_BE_PROCESS.EOF").all()

        assert len(annotations) == 1

        # Check specific ISP completeness
        isp_completeness_1 = self.session.query(Event).join(Gauge).filter(Gauge.name.like("PLANNED_IMAGING_ISP_COMPLETENESS_CHANNEL_%"),
                                                                                 Event.start == "2018-07-21T05:22:08.947423",
                                                                                 Event.stop == "2018-07-21T05:36:36.329510").all()

        assert len(isp_completeness_1) == 1

        assert isp_completeness_1[0].get_structured_values() == [
            {
                "type": "text",
                "value": "RECEIVED",
                "name": "status"
            },
            {
                "type": "double",
                "value": "16076.0",
                "name": "downlink_orbit"
            },
            {
                "type": "text",
                "value": "S2A",
                "name": "satellite"
            },
            {
                "type": "text",
                "value": "EDRS",
                "name": "reception_station"
            },
            {
                "type": "double",
                "value": "2.0",
                "name": "channel"
            },
            {
                "type": "double",
                "value": "20.0",
                "name": "vcid"
            },
            {
                "type": "text",
                "value": "NOMINAL",
                "name": "playback_type"
            },
            {
                "type": "double",
                "value": "16075.0",
                "name": "sensing_orbit"
            },
            {
                "name": "sad_status",
                "type": "text",
                "value": "COMPLETE"
            },
            {
                "name": "footprint_details",
                "type": "object",
                "values": [
                    {
                        "name": "footprint",
                        "type": "geometry",
                        "value": "POLYGON ((94.116896 59.067486, 93.93512200000001 58.821977, 93.755695 58.576244, 93.578564 58.330292, 93.403667 58.084127, 93.230935 57.837756, 93.060349 57.59118, 92.89186100000001 57.344402, 92.725425 57.097428, 92.560997 56.850262, 92.398534 56.602906, 92.23799200000001 56.355367, 92.079302 56.107649, 91.92244700000001 55.859755, 91.76739499999999 55.611688, 91.614107 55.36345, 91.462547 55.115045, 91.312679 54.866476, 91.164468 54.617746, 91.017866 54.368861, 90.872834 54.119824, 90.72936 53.870635, 90.587412 53.621297, 90.44696 53.371813, 90.307974 53.122186, 90.170424 52.872419, 90.03428099999999 52.622513, 89.899489 52.372476, 89.766051 52.122305, 89.63394 51.872003, 89.503131 51.621573, 89.373598 51.371016, 89.245318 51.120336, 89.11826499999999 50.869533, 88.992401 50.618613, 88.867707 50.367576, 88.744174 50.116423, 88.62178 49.865157, 88.50050400000001 49.613778, 88.380324 49.36229, 88.26122100000001 49.110692, 88.143169 48.858989, 88.026134 48.607184, 87.910118 48.355275, 87.795102 48.103265, 87.68107000000001 47.851154, 87.56800200000001 47.598946, 87.455883 47.34664, 87.344694 47.09424, 87.23440100000001 46.841747, 87.125001 46.589163, 87.016485 46.336487, 86.90883700000001 46.083722, 86.802041 45.830869, 86.696083 45.577928, 86.59094899999999 45.324902, 86.486616 45.071793, 86.383064 44.818601, 86.280295 44.565328, 86.17829500000001 44.311974, 86.077051 44.05854, 85.976551 43.805027, 85.876783 43.551438, 85.777733 43.297772, 85.67936899999999 43.044033, 85.581701 42.790219, 85.484717 42.536333, 85.388406 42.282374, 85.29275699999999 42.028344, 85.19776 41.774245, 85.103403 41.520076, 85.009666 41.265839, 84.91654 41.011536, 84.82402500000001 40.757167, 84.732111 40.502732, 84.640788 40.248232, 84.55004700000001 39.993669, 84.459878 39.739043, 84.37027 39.484355, 84.28120199999999 39.229606, 84.19268 38.974797, 84.104696 38.719929, 84.017242 38.465001, 83.930308 38.210015, 83.84388800000001 37.954972, 83.75797300000001 37.699872, 83.67254200000001 37.444717, 83.587598 37.189507, 83.503136 36.934243, 83.419149 36.678924, 83.33563100000001 36.423553, 83.252573 36.168129, 83.16996899999999 35.912653, 83.087807 35.657126, 83.006074 35.401549, 82.92477599999999 35.145922, 82.843906 34.890246, 82.76345600000001 34.634522, 82.683421 34.378749, 82.60379399999999 34.122928, 82.52457 33.867061, 82.445729 33.611148, 82.367278 33.35519, 82.28921200000001 33.099186, 82.21152600000001 32.843138, 82.134213 32.587045, 82.05726799999999 32.330909, 81.98068600000001 32.07473, 81.904455 31.818509, 81.82857 31.562246, 81.753033 31.305942, 81.67783799999999 31.049596, 81.60298 30.793211, 81.52845499999999 30.536785, 81.454257 30.28032, 81.38038 30.023817, 81.30681199999999 29.767275, 81.233557 29.510695, 81.160611 29.254078, 81.08797 28.997423, 81.015629 28.740732, 80.943584 28.484005, 80.87183 28.227242, 80.80035599999999 27.970445, 80.729163 27.713613, 80.658249 27.456746, 80.58761 27.199845, 80.51724299999999 26.942911, 80.447143 26.685944, 80.377306 26.428944, 80.307726 26.171913, 80.23839599999999 25.914849, 80.169319 25.657754, 80.10048999999999 25.400629, 80.03190600000001 25.143472, 79.96356400000001 24.886286, 79.89546 24.62907, 79.82759 24.371824, 79.759944 24.114549, 79.692526 23.857246, 79.625332 23.599915, 79.55835999999999 23.342556, 79.491606 23.08517, 79.425067 22.827756, 79.358739 22.570316, 79.29261700000001 22.312849, 79.226697 22.055357, 79.16098 21.797839, 79.095463 21.540296, 79.030142 21.282727, 78.96501499999999 21.025135, 78.90008 20.767518, 78.835331 20.509877, 78.770763 20.252213, 78.706377 19.994526, 78.642171 19.736817, 78.578143 19.479084, 78.51428900000001 19.22133, 78.45060700000001 18.963554, 78.38709299999999 18.705756, 78.32374299999999 18.447938, 78.26055599999999 18.190099, 78.19753 17.932239, 78.134664 17.67436, 78.07195400000001 17.41646, 78.009398 17.158541, 77.946994 16.900604, 77.884738 16.642647, 77.822626 16.384672, 77.760659 16.126679, 77.698835 15.868668, 77.63715000000001 15.61064, 77.575603 15.352594, 77.514191 15.094532, 77.452913 14.836453, 77.391763 14.578358, 77.330742 14.320248, 77.269848 14.062121, 77.20907800000001 13.803979, 77.14843 13.545823, 77.087903 13.287651, 77.027494 13.029466, 76.96720000000001 12.771266, 76.90701900000001 12.513052, 76.846951 12.254825, 76.786993 11.996585, 76.727142 11.738332, 76.66739800000001 11.480067, 76.607758 11.221789, 76.548219 10.9635, 76.48878000000001 10.705198, 76.42944 10.446886, 76.37019600000001 10.188562, 76.311046 9.930227, 76.25198899999999 9.671882, 76.193023 9.413527, 76.134146 9.155162000000001, 76.075355 8.896787, 76.01665 8.638403, 75.958029 8.38001, 73.40189700000001 8.945615999999999, 73.45882 9.204136999999999, 73.515772 9.462654000000001, 73.57275300000001 9.721166, 73.629758 9.979675, 73.686798 10.238179, 73.74387400000001 10.496677, 73.800988 10.75517, 73.858141 11.013657, 73.915335 11.272138, 73.972572 11.530613, 74.029843 11.789083, 74.087159 12.047545, 74.14452300000001 12.306001, 74.201936 12.564449, 74.259401 12.82289, 74.316919 13.081322, 74.37449100000001 13.339747, 74.432115 13.598164, 74.48979 13.856573, 74.547526 14.114973, 74.605324 14.373364, 74.663185 14.631746, 74.72111200000001 14.890118, 74.779107 15.14848, 74.83717 15.406832, 74.895293 15.665175, 74.95348799999999 15.923507, 75.011758 16.181828, 75.070105 16.440138, 75.12853200000001 16.698437, 75.187039 16.956724, 75.24562899999999 17.214999, 75.304294 17.473262, 75.363041 17.731514, 75.42187699999999 17.989752, 75.48080400000001 18.247978, 75.539824 18.506191, 75.598939 18.76439, 75.658152 19.022575, 75.71745900000001 19.280747, 75.776856 19.538905, 75.83635700000001 19.797048, 75.89596299999999 20.055177, 75.95567699999999 20.313291, 76.015502 20.571389, 76.075439 20.829472, 76.13549 21.087539, 76.195644 21.345591, 76.255915 21.603626, 76.31630699999999 21.861645, 76.376823 22.119647, 76.437466 22.377632, 76.498237 22.6356, 76.55914 22.89355, 76.620167 23.151482, 76.68132199999999 23.409396, 76.742615 23.667292, 76.80404900000001 23.92517, 76.865627 24.183028, 76.927351 24.440867, 76.989225 24.698686, 77.051249 24.956486, 77.11341 25.214266, 77.17572699999999 25.472026, 77.23820499999999 25.729765, 77.30084600000001 25.987484, 77.363652 26.245181, 77.426627 26.502856, 77.489774 26.76051, 77.55308100000001 27.018142, 77.616559 27.275752, 77.680218 27.533339, 77.74406 27.790904, 77.808089 28.048445, 77.87230700000001 28.305963, 77.93671999999999 28.563456, 78.001323 28.820926, 78.066109 29.078373, 78.13109900000001 29.335794, 78.19629399999999 29.593191, 78.2617 29.850562, 78.32732 30.107907, 78.393156 30.365227, 78.459214 30.62252, 78.525475 30.879787, 78.591962 31.137028, 78.65868 31.394242, 78.725633 31.651428, 78.79282600000001 31.908586, 78.860263 32.165716, 78.927948 32.422818, 78.995873 32.679891, 79.06404000000001 32.936936, 79.13246700000001 33.193951, 79.20115800000001 33.450936, 79.270117 33.707891, 79.33935 33.964816, 79.40886 34.221709, 79.478652 34.478572, 79.548705 34.735404, 79.619049 34.992204, 79.689689 35.248972, 79.760631 35.505707, 79.831878 35.762409, 79.903437 36.019078, 79.975312 36.275713, 80.04749099999999 36.532314, 80.11998699999999 36.788881, 80.192814 37.045414, 80.26598 37.301911, 80.339489 37.558372, 80.413347 37.814797, 80.48756 38.071185, 80.562127 38.327536, 80.637038 38.583852, 80.712322 38.840129, 80.78798500000001 39.096368, 80.864034 39.352569, 80.94047500000001 39.60873, 81.017314 39.864851, 81.09456 40.120932, 81.172192 40.376974, 81.250238 40.632975, 81.32871 40.888934, 81.407616 41.144851, 81.486963 41.400726, 81.566759 41.656557, 81.647012 41.912345, 81.727715 42.16809, 81.80887199999999 42.423791, 81.89050899999999 42.679446, 81.972635 42.935056, 82.05525799999999 43.190619, 82.13838800000001 43.446136, 82.22203399999999 43.701605, 82.306203 43.957025, 82.390872 44.212399, 82.476083 44.467724, 82.561847 44.722999, 82.648173 44.978223, 82.735073 45.233395, 82.82255600000001 45.488516, 82.910633 45.743584, 82.999291 45.9986, 83.08855 46.253563, 83.178436 46.508471, 83.26896000000001 46.763324, 83.360135 47.01812, 83.451971 47.272859, 83.544483 47.52754, 83.63767300000001 47.782163, 83.731532 48.036729, 83.826104 48.291234, 83.921403 48.545678, 84.017442 48.80006, 84.11423600000001 49.054379, 84.2118 49.308634, 84.310148 49.562824, 84.409262 49.816951, 84.509182 50.071011, 84.609933 50.325004, 84.71153099999999 50.578928, 84.81399399999999 50.832781, 84.917338 51.086564, 85.021581 51.340274, 85.126724 51.593913, 85.232775 51.847479, 85.33978 52.100969, 85.447759 52.354382, 85.55673299999999 52.607717, 85.666721 52.860973, 85.777745 53.114147, 85.889827 53.36724, 86.00294 53.620252, 86.11715599999999 53.87318, 86.232497 54.126021, 86.348989 54.378774, 86.46665400000001 54.631436, 86.58552 54.884008, 86.705612 55.136487, 86.826928 55.388873, 86.94950300000001 55.641165, 87.073387 55.893359, 87.19860799999999 56.145453, 87.325198 56.397444, 87.453187 56.649331, 87.582607 56.901113, 87.713481 57.152787, 87.84580800000001 57.404355, 87.97966700000001 57.65581, 88.115093 57.90715, 88.25212399999999 58.158374, 88.39079700000001 58.409477, 88.531153 58.660459, 88.67323 58.911315, 88.817026 59.162049, 88.962616 59.412653, 89.110055 59.663125, 89.25939099999999 59.91346, 94.116896 59.067486))"
                    }
                ]
            }
        ]

        isp_completeness_2 = self.session.query(Event).join(Gauge).filter(Gauge.name.like("PLANNED_IMAGING_ISP_COMPLETENESS_CHANNEL_%"),
                                                                                 Event.start == "2018-07-21T05:37:14.362833",
                                                                                 Event.stop == "2018-07-21T05:40:35.417601").all()

        assert len(isp_completeness_2) == 1

        # Check PLANNED_PLAYBACK_COMPLETENESS_CHANNEL events
        playback_completeness_events = self.session.query(Event).join(Gauge).filter(Gauge.name.like("PLANNED_PLAYBACK_COMPLETENESS_CHANNEL%")).all()

        assert len(playback_completeness_events) == 3

        # Check specific playback completeness
        playback_completeness_1 = self.session.query(Event).join(Gauge).filter(Gauge.name.like("PLANNED_PLAYBACK_COMPLETENESS_CHANNEL_2"),
                                                                                 Event.start == "2018-07-21T07:08:00.391740",
                                                                                 Event.stop == "2018-07-21T07:25:04.350719").all()

        assert len(playback_completeness_1) == 1

        assert playback_completeness_1[0].get_structured_values() == [
            {
                "type": "text",
                "value": "RECEIVED",
                "name": "status"
            },
            {
                "type": "double",
                "value": "16076.0",
                "name": "downlink_orbit"
            },
            {
                "type": "text",
                "value": "S2A",
                "name": "satellite"
            },
            {
                "type": "text",
                "value": "EDRS",
                "name": "reception_station"
            },
            {
                "type": "double",
                "value": "2.0",
                "name": "channel"
            },
            {
                "type": "double",
                "value": "20.0",
                "name": "vcid"
            },
            {
                "type": "text",
                "value": "NOMINAL",
                "name": "playback_type"
            },
            {
                "name": "footprint_details",
                "type": "object",
                "values": [
                    {
                        "name": "footprint",
                        "type": "geometry",
                        "value": "POLYGON ((59.836202 41.268743, 59.726332 40.968526, 59.617306 40.668216, 59.509109 40.367816, 59.401726 40.067327, 59.295139 39.76675, 59.189334 39.466087, 59.084299 39.165339, 58.980019 38.864506, 58.87648 38.563592, 58.773669 38.262596, 58.671572 37.96152, 58.570176 37.660365, 58.469469 37.359132, 58.369438 37.057823, 58.270071 36.756439, 58.171357 36.45498, 58.073283 36.153449, 57.975838 35.851845, 57.879011 35.55017, 57.782791 35.248426, 57.687168 34.946612, 57.59213 34.644731, 57.497668 34.342782, 57.403772 34.040768, 57.310431 33.738689, 57.217636 33.436545, 57.125378 33.134339, 57.033647 32.83207, 56.942434 32.52974, 56.85173 32.22735, 56.761526 31.9249, 56.671814 31.622392, 56.582586 31.319826, 56.493832 31.017203, 56.405545 30.714523, 56.317718 30.411789, 56.230341 30.109, 56.143408 29.806157, 56.05691 29.503261, 55.970841 29.200313, 55.885193 28.897314, 55.799959 28.594264, 55.715132 28.291164, 55.630705 27.988015, 55.546672 27.684817, 55.463025 27.381572, 55.379758 27.07828, 55.296865 26.774942, 55.214339 26.471557, 55.132175 26.168128, 55.050365 25.864655, 54.968904 25.561138, 54.887785 25.257579, 54.807003 24.953977, 54.726553 24.650333, 54.646429 24.346649, 54.566625 24.042924, 54.487136 23.739159, 54.407957 23.435356, 54.329082 23.131514, 54.250506 22.827634, 54.172224 22.523717, 54.094231 22.219764, 54.016521 21.915774, 53.939091 21.61175, 53.861935 21.30769, 53.785048 21.003596, 53.708426 20.699469, 53.632065 20.395308, 53.555958 20.091115, 53.480103 19.786891, 53.404494 19.482635, 53.329128 19.178348, 53.253999 18.874031, 53.179104 18.569684, 53.104439 18.265308, 53.029999 17.960904, 52.95578 17.656472, 52.881778 17.352012, 52.80799 17.047525, 52.73441 16.743012, 52.661036 16.438473, 52.587864 16.133909, 52.51489 15.82932, 52.442109 15.524707, 52.369519 15.22007, 52.297115 14.91541, 52.224895 14.610727, 52.152853 14.306022, 52.080988 14.001295, 52.009295 13.696547, 51.937771 13.391778, 51.866413 13.086989, 51.795217 12.782181, 51.724179 12.477353, 51.653297 12.172507, 51.582568 11.867642, 51.511987 11.56276, 51.441552 11.25786, 51.371259 10.952944, 51.301105 10.648012, 51.231088 10.343064, 51.161205 10.0381, 51.091451 9.733122, 51.021824 9.428129999999999, 50.952321 9.123124000000001, 50.88294 8.818104, 50.813676 8.513071, 50.744527 8.208027, 50.675491 7.90297, 50.606564 7.597902, 50.537743 7.292822, 50.469026 6.987733, 50.40041 6.682633, 50.331891 6.377524, 50.263467 6.072405, 50.195136 5.767278, 50.126894 5.462143, 50.058739 5.156999, 49.990668 4.851849, 49.922678 4.546692, 49.854767 4.241528, 49.786931 3.936359, 49.719169 3.631184, 49.651477 3.326004, 49.583853 3.020819, 49.516295 2.715631, 49.448799 2.410438, 49.381363 2.105243, 49.313984 1.800044, 49.24666 1.494843, 49.179388 1.189641, 49.112166 0.884437, 49.044991 0.579232, 48.97786 0.274026, 48.910771 -0.03118, 48.843722 -0.336385, 48.776709 -0.64159, 48.70973 -0.946793, 48.642783 -1.251995, 48.575865 -1.557195, 48.508974 -1.862393, 48.442107 -2.167587, 48.375261 -2.472778, 48.308434 -2.777965, 48.241624 -3.083148, 48.174828 -3.388327, 48.108045 -3.6935, 48.04127 -3.998668, 47.974501 -4.30383, 47.907736 -4.608986, 47.840973 -4.914134, 47.774208 -5.219276, 47.707439 -5.52441, 47.640664 -5.829536, 47.573881 -6.134653, 47.507085 -6.439762, 47.440276 -6.744861, 47.37345 -7.049951, 47.306605 -7.35503, 47.239738 -7.660099, 47.172847 -7.965156, 47.105929 -8.270203, 47.038981 -8.575237, 46.972001 -8.880259000000001, 46.904986 -9.185269, 46.837934 -9.490265000000001, 46.770842 -9.795248000000001, 46.703706 -10.100217, 46.636526 -10.405172, 46.569297 -10.710112, 46.502017 -11.015037, 46.434683 -11.319946, 46.367293 -11.624839, 46.299844 -11.929716, 46.232333 -12.234576, 46.164758 -12.539419, 46.097114 -12.844244, 46.029401 -13.149052, 45.961614 -13.45384, 45.893751 -13.75861, 45.825809 -14.063361, 45.757785 -14.368092, 45.689676 -14.672802, 45.621479 -14.977493, 45.553191 -15.282162, 45.48481 -15.58681, 45.416332 -15.891436, 45.347753 -16.196041, 45.279072 -16.500622, 45.210284 -16.805181, 45.141387 -17.109716, 45.072378 -17.414228, 45.003253 -17.718715, 44.934011 -18.023178, 44.864647 -18.327616, 44.795157 -18.632028, 44.725538 -18.936414, 44.655787 -19.240774, 41.968679 -18.661674, 42.043492 -18.357795, 42.118079 -18.05388, 42.192445 -17.749931, 42.266594 -17.445946, 42.34053 -17.141928, 42.414257 -16.837875, 42.487779 -16.53379, 42.561099 -16.229672, 42.634222 -15.925522, 42.707151 -15.62134, 42.77989 -15.317127, 42.852442 -15.012884, 42.924811 -14.70861, 42.997001 -14.404307, 43.069014 -14.099975, 43.140856 -13.795615, 43.212528 -13.491226, 43.284035 -13.18681, 43.35538 -12.882366, 43.426567 -12.577897, 43.497597 -12.2734, 43.568476 -11.968879, 43.639206 -11.664332, 43.70979 -11.35976, 43.780231 -11.055165, 43.850534 -10.750545, 43.9207 -10.445903, 43.990733 -10.141237, 44.060636 -9.836550000000001, 44.130412 -9.531840000000001, 44.200064 -9.227109, 44.269595 -8.922357, 44.339009 -8.617585, 44.408307 -8.312792999999999, 44.477493 -8.007980999999999, 44.54657 -7.703151, 44.615541 -7.398301, 44.684408 -7.093434, 44.753175 -6.788549, 44.821844 -6.483647, 44.890418 -6.178728, 44.9589 -5.873793, 45.027293 -5.568841, 45.095599 -5.263875, 45.163821 -4.958894, 45.231963 -4.653898, 45.300025 -4.348888, 45.368012 -4.043865, 45.435926 -3.738828, 45.50377 -3.433779, 45.571546 -3.128717, 45.639257 -2.823644, 45.706905 -2.518559, 45.774493 -2.213464, 45.842024 -1.908358, 45.9095 -1.603241, 45.976924 -1.298116, 46.044299 -0.992981, 46.111627 -0.6878379999999999, 46.17891 -0.382686, 46.246152 -0.077526, 46.313355 0.227641, 46.380522 0.532815, 46.447654 0.837995, 46.514755 1.143181, 46.581827 1.448373, 46.648872 1.753571, 46.715894 2.058773, 46.782894 2.363979, 46.849876 2.669189, 46.916842 2.974403, 46.983793 3.27962, 47.050734 3.584839, 47.117666 3.89006, 47.184592 4.195284, 47.251515 4.500508, 47.318437 4.805734, 47.38536 5.110959, 47.452287 5.416185, 47.519221 5.721411, 47.586165 6.026635, 47.65312 6.331859, 47.72009 6.63708, 47.787077 6.9423, 47.854083 7.247517, 47.921111 7.552731, 47.988165 7.857942, 48.055245 8.163149000000001, 48.122356 8.468351, 48.1895 8.773548999999999, 48.256678 9.078742, 48.323895 9.383929, 48.391153 9.689111, 48.458453 9.994286000000001, 48.5258 10.299454, 48.593196 10.604615, 48.660643 10.909769, 48.728144 11.214914, 48.795702 11.520051, 48.86332 11.825179, 48.930999 12.130298, 48.998743 12.435407, 49.066555 12.740506, 49.134438 13.045594, 49.202395 13.350671, 49.270429 13.655737, 49.338542 13.960791, 49.406738 14.265833, 49.47502 14.570862, 49.54339 14.875878, 49.611852 15.180881, 49.680408 15.485869, 49.749062 15.790843, 49.817816 16.095803, 49.886675 16.400747, 49.95564 16.705675, 50.024716 17.010587, 50.093905 17.315483, 50.16321 17.620362, 50.232636 17.925224, 50.302185 18.230067, 50.37186 18.534893, 50.441666 18.8397, 50.511604 19.144488, 50.58168 19.449256, 50.651896 19.754005, 50.722255 20.058733, 50.792763 20.36344, 50.863421 20.668126, 50.934234 20.97279, 51.005205 21.277433, 51.076339 21.582053, 51.147638 21.88665, 51.219108 22.191223, 51.290751 22.495773, 51.362572 22.800298, 51.434575 23.104799, 51.506763 23.409274, 51.579141 23.713724, 51.651714 24.018148, 51.724485 24.322545, 51.797458 24.626916, 51.870638 24.931259, 51.94403 25.235574, 52.017638 25.539861, 52.091466 25.844119, 52.165519 26.148348, 52.2398 26.452547, 52.314315 26.756716, 52.389068 27.060855, 52.464066 27.364963, 52.539313 27.669038, 52.614814 27.973082, 52.690575 28.277094, 52.7666 28.581072, 52.842895 28.885017, 52.919466 29.188928, 52.996318 29.492804, 53.073457 29.796646, 53.150887 30.100452, 53.228616 30.404222, 53.306649 30.707956, 53.384992 31.011652, 53.463651 31.315311, 53.542632 31.618932, 53.621942 31.922515, 53.701587 32.226058, 53.781574 32.529562, 53.86191 32.833026, 53.942601 33.136448, 54.023654 33.43983, 54.105076 33.74317, 54.186875 34.046467, 54.269058 34.349722, 54.351632 34.652932, 54.434606 34.956099, 54.517986 35.259221, 54.601782 35.562298, 54.686001 35.865328, 54.770651 36.168312, 54.855741 36.471249, 54.941279 36.774138, 55.027275 37.076979, 55.113737 37.37977, 55.200675 37.682512, 55.288098 37.985203, 55.376016 38.287843, 55.464438 38.590431, 55.553375 38.892966, 55.642836 39.195448, 55.732833 39.497877, 55.823376 39.80025, 55.914476 40.102568, 56.006145 40.404829, 56.098392 40.707034, 56.191227 41.009181, 56.284665 41.311269, 56.378718 41.613298, 56.4734 41.915266, 59.836202 41.268743))"
                    }
                ]
            }
        ]

        # Check specific playback completeness
        playback_completeness_2 = self.session.query(Event).join(Gauge).filter(Gauge.name.like("PLANNED_PLAYBACK_COMPLETENESS_CHANNEL_%"),
                                                                                 Event.start == "2018-07-21T07:25:24.346331",
                                                                                 Event.stop == "2018-07-21T07:25:26.346331").all()

        assert len(playback_completeness_2) == 1

        assert playback_completeness_2[0].get_structured_values() == [
            {
                "type": "text",
                "value": "RECEIVED",
                "name": "status"
            },
            {
                "type": "double",
                "value": "16076.0",
                "name": "downlink_orbit"
            },
            {
                "type": "text",
                "value": "S2A",
                "name": "satellite"
            },
            {
                "type": "text",
                "value": "EDRS",
                "name": "reception_station"
            },
            {
                "type": "double",
                "value": "2.0",
                "name": "channel"
            },
            {
                "type": "double",
                "value": "2.0",
                "name": "vcid"
            },
            {
                "type": "text",
                "value": "SAD",
                "name": "playback_type"
            },
            {
                "name": "footprint_details",
                "type": "object",
                "values": [
                    {
                        "name": "footprint",
                        "type": "geometry",
                        "value": "POLYGON ((44.356052 -20.54152, 41.646242 -19.960252, 41.646242 -19.960252, 44.356052 -20.54152))"
                    }
                ]
            }
        ]
        
    def test_insert_rep_pass_playback_rt_with_plan(self):

        filename = "S2A_NPPF_PLAYBACK_RT.EOF"
        file_path = os.path.dirname(os.path.abspath(__file__)) + "/inputs/" + filename

        exit_status = ingestion.command_process_file("s2boa.ingestions.ingestion_nppf.ingestion_nppf", file_path, "2018-01-01T00:00:00")

        assert len([item for item in exit_status if item["status"] != eboa_engine.exit_codes["OK"]["status"]]) == 0

        filename = "S2A_ORBPRE.EOF"
        file_path = os.path.dirname(os.path.abspath(__file__)) + "/inputs/" + filename

        exit_status = ingestion.command_process_file("s2boa.ingestions.ingestion_orbpre.ingestion_orbpre", file_path, "2018-01-01T00:00:00")

        assert len([item for item in exit_status if item["status"] != eboa_engine.exit_codes["OK"]["status"]]) == 0

        filename = "S2__SRA.EOF"
        file_path = os.path.dirname(os.path.abspath(__file__)) + "/inputs/" + filename

        exit_status = ingestion.command_process_file("s2boa.ingestions.ingestion_slot_request_edrs.ingestion_slot_request_edrs", file_path, "2018-01-01T00:00:00")

        assert len([item for item in exit_status if item["status"] != eboa_engine.exit_codes["OK"]["status"]]) == 0


        filename = "S2A_OPER_REP_PASS_E_PLAYBACK_RT.EOF"
        file_path = os.path.dirname(os.path.abspath(__file__)) + "/inputs/" + filename

        exit_status = ingestion.command_process_file("s2boa.ingestions.ingestion_edrs_acquisition.ingestion_edrs_acquisition", file_path, "2018-01-01T00:00:00")

        assert len([item for item in exit_status if item["status"] != eboa_engine.exit_codes["OK"]["status"]]) == 0

        # Check sources
        sources = self.session.query(Source).all()

        assert len(sources) == 10
        
        source = self.session.query(Source).filter(Source.reported_validity_start == "2018-07-21T07:28:23",
                                                   Source.reported_validity_stop == "2018-07-21T07:37:55",
                                                   Source.validity_start == "2018-07-20T17:33:12.859268",
                                                   Source.validity_stop == "2018-07-21T07:37:55.121772",
                                                   Source.name == "S2A_OPER_REP_PASS_E_PLAYBACK_RT.EOF",
                                                   Source.processor == "ingestion_edrs_acquisition.py").all()

        assert len(source) == 2

        source = self.session.query(Source).filter(Source.reported_validity_start == "2018-07-21T07:28:23",
                                                   Source.reported_validity_stop == "2018-07-21T07:37:55",
                                                   Source.validity_start == "2018-07-21T05:22:08.947423",
                                                   Source.validity_stop == "2018-07-21T05:40:35.417601",
                                                   Source.name == "S2A_OPER_REP_PASS_E_PLAYBACK_RT.EOF",
                                                   Source.processor == "isp_planning_completeness_ingestion_edrs_acquisition.py").all()

        assert len(source) == 1

        # Check number of events generated
        events = self.session.query(Event).join(Source).filter(Source.name == "S2A_OPER_REP_PASS_E_PLAYBACK_RT.EOF").all()

        assert len(events) == 18

        # Check PLANNED_IMAGING_ISP_COMPLETENESS_CHANNEL events
        isp_completeness_events = self.session.query(Event).join(Gauge).filter(Gauge.name.like("PLANNED_IMAGING_ISP_COMPLETENESS_CHANNEL%")).all()

        assert len(isp_completeness_events) == 5

        # Check definite ISP completeness
        isp_completeness_missing_left = self.session.query(Event).join(Gauge).filter(Gauge.name.like("PLANNED_IMAGING_ISP_COMPLETENESS_CHANNEL_%"),
                                                                                 Event.start == "2018-07-21T05:16:58.773036",
                                                                                 Event.stop == "2018-07-21T05:22:08.947423").all()

        assert len(isp_completeness_missing_left) == 1

        assert isp_completeness_missing_left[0].get_structured_values() == [
            {
                "type": "text",
                "value": "MPMSNOBS",
                "name": "start_request"
            },
            {
                "type": "text",
                "value": "MPMSIMID",
                "name": "stop_request"
            },
            {
                "type": "double",
                "value": "16075.0",
                "name": "start_orbit"
            },
            {
                "type": "double",
                "value": "100.3083",
                "name": "start_angle"
            },
            {
                "type": "double",
                "value": "16075.0",
                "name": "stop_orbit"
            },
            {
                "type": "double",
                "value": "171.1847",
                "name": "stop_angle"
            },
            {
                "type": "text",
                "value": "S2A",
                "name": "satellite"
            },
            {
                "type": "text",
                "value": "NOMINAL",
                "name": "record_type"
            },
            {
                "type": "text",
                "value": "NOMINAL",
                "name": "imaging_mode"
            },
            {
                "type": "object",
                "values": [
                    {
                        "type": "double",
                        "value": "0.0",
                        "name": "start_scn_dup"
                    }
                ],
                "name": "parameters"
            },
            {
                "type": "text",
                "value": "TIME_CORRECTED",
                "name": "status_correction"
            },
            {
                "type": "double",
                "value": "-5.365036",
                "name": "delta_start"
            },
            {
                "type": "double",
                "value": "-5.12251",
                "name": "delta_stop"
            },
            {
                "type": "text",
                "value": "MISSING",
                "name": "status"
            },
            {
                "name": "footprint_details_0",
                "type": "object",
                "values": [
                    {
                        "name": "footprint",
                        "type": "geometry",
                        "value": "POLYGON ((119.690177 75.29900600000001, 119.108056 75.137455, 118.53799 74.97452, 117.979688 74.810244, 117.432787 74.644687, 116.897014 74.47788799999999, 116.372162 74.309872, 115.85796 74.14067799999999, 115.354011 73.97036799999999, 114.860172 73.798956, 114.3762 73.62647200000001, 113.901807 73.452958, 113.436685 73.278457, 112.9807 73.102981, 112.533617 72.92655999999999, 112.095118 72.74923800000001, 111.665027 72.571037, 111.243173 72.39197299999999, 110.829342 72.21207200000001, 110.423202 72.031384, 110.024685 71.849908, 109.633596 71.66766699999999, 109.249693 71.484692, 108.872766 71.301011, 108.502716 71.11662800000001, 108.139367 70.931566, 107.78245 70.74585999999999, 107.431873 70.559516, 107.087504 70.372547, 106.749168 70.18497499999999, 106.416627 69.996831, 106.089841 69.80811199999999, 105.768666 69.618835, 105.452899 69.429025, 105.142412 69.238697, 104.837134 69.047853, 104.536934 68.85650800000001, 104.241583 68.664694, 103.951057 68.47240600000001, 103.665251 68.27965500000001, 103.384018 68.086459, 103.107198 67.892837, 102.834766 67.698787, 102.56662 67.50432000000001, 102.302583 67.30945699999999, 102.042593 67.114204, 101.786593 66.918564, 101.534487 66.72254700000001, 101.286081 66.526178, 101.041395 66.32944999999999, 100.800344 66.13237100000001, 100.5628 65.934957, 100.328664 65.737218, 100.09792 65.539152, 99.870492 65.340767, 99.646226 65.142084, 99.425107 64.943099, 99.207088 64.74381700000001, 98.992086 64.544247, 98.779963 64.34440499999999, 98.57074299999999 64.14428599999999, 98.36435899999999 63.943895, 98.160701 63.743246, 97.959715 63.542343, 97.76138899999999 63.341187, 97.565665 63.139782, 97.372404 62.938146, 97.181629 62.736273, 96.993296 62.534166, 96.807329 62.331835, 96.623639 62.12929, 96.442244 61.926526, 96.263096 61.723547, 96.08609199999999 61.520367, 95.911214 61.316985, 95.73845 61.113401, 95.56775500000001 60.90962, 95.399007 60.705656, 95.232249 60.501502, 95.067442 60.297162, 94.90451400000001 60.092644, 94.74341099999999 59.887954, 94.584148 59.683088, 94.426688 59.478049, 94.270933 59.272849, 94.116896 59.067486, 89.25939099999999 59.91346, 89.38592199999999 60.122933, 89.513845 60.332306, 89.643119 60.541585, 89.773871 60.750758, 89.906133 60.959823, 90.039861 61.168785, 90.175111 61.377641, 90.31196799999999 61.586381, 90.450468 61.795005, 90.590519 62.003523, 90.73228 62.211919, 90.875794 62.420192, 91.021052 62.628342, 91.168053 62.836373, 91.316925 63.044271, 91.46771099999999 63.252035, 91.620355 63.459671, 91.774962 63.667171, 91.931617 63.874527, 92.090354 64.081738, 92.251107 64.28881199999999, 92.41405399999999 64.495733, 92.57924800000001 64.70249699999999, 92.746673 64.90910700000001, 92.916375 65.115562, 93.08848999999999 65.321848, 93.263075 65.527963, 93.44006400000001 65.733915, 93.619623 65.939689, 93.80184 66.145279, 93.98674699999999 66.350683, 94.17432599999999 66.555907, 94.364768 66.760932, 94.558148 66.96575300000001, 94.754446 67.170376, 94.953768 67.374792, 95.156263 67.578988, 95.362013 67.78295900000001, 95.570943 67.986716, 95.783299 68.190237, 95.999178 68.393513, 96.21861699999999 68.596546, 96.44166 68.799334, 96.66852299999999 69.001857, 96.899311 69.20410800000001, 97.134007 69.40609499999999, 97.37280199999999 69.6078, 97.615863 69.809208, 97.86329499999999 70.01031500000001, 98.115075 70.211127, 98.3715 70.41161700000001, 98.632707 70.611774, 98.898746 70.8116, 99.16975100000001 71.01108499999999, 99.445975 71.210206, 99.727576 71.408952, 100.014549 71.607331, 100.3072 71.80531499999999, 100.605734 72.002887, 100.91029 72.200039, 101.220943 72.396772, 101.538046 72.593052, 101.861807 72.78886199999999, 102.192311 72.98420400000001, 102.529819 73.17905500000001, 102.874644 73.373389, 103.227027 73.56718600000001, 103.587003 73.76045499999999, 103.955034 73.95315100000001, 104.331395 74.145251, 104.716286 74.33674499999999, 105.109927 74.527619, 105.512766 74.717831, 105.925117 74.90735599999999, 106.347138 75.096189, 106.779268 75.28429199999999, 107.221926 75.471627, 107.675456 75.65816700000001, 108.140041 75.843908, 108.616296 76.02878699999999, 109.104631 76.212771, 109.605357 76.395839, 110.118902 76.577957, 110.645857 76.759066, 111.186702 76.939125, 119.690177 75.29900600000001))"
                    }
                ]
            }
        ]
        
        isp_completeness_statuses = [event for event in isp_completeness_missing_left if len([value for value in event.eventTexts if value.name == "status" and value.value == "MISSING"]) > 0]

        assert len(isp_completeness_statuses) == 1

        # Check number of annotations generated
        annotations = self.session.query(Annotation).join(Source).filter(Source.name == "S2A_OPER_REP_PASS_E_PLAYBACK_RT.EOF").all()

        assert len(annotations) == 1

        # Check specific ISP completeness
        isp_completeness_1 = self.session.query(Event).join(Gauge).filter(Gauge.name.like("PLANNED_IMAGING_ISP_COMPLETENESS_CHANNEL_%"),
                                                                                 Event.start == "2018-07-21T05:22:08.947423",
                                                                                 Event.stop == "2018-07-21T05:36:36.329510").all()

        assert len(isp_completeness_1) == 1

        assert isp_completeness_1[0].get_structured_values() == [
            {
                "type": "text",
                "value": "RECEIVED",
                "name": "status"
            },
            {
                "type": "double",
                "value": "16076.0",
                "name": "downlink_orbit"
            },
            {
                "type": "text",
                "value": "S2A",
                "name": "satellite"
            },
            {
                "type": "text",
                "value": "EDRS",
                "name": "reception_station"
            },
            {
                "type": "double",
                "value": "2.0",
                "name": "channel"
            },
            {
                "type": "double",
                "value": "22.0",
                "name": "vcid"
            },
            {
                "type": "text",
                "value": "RT",
                "name": "playback_type"
            },
            {
                "type": "double",
                "value": "16075.0",
                "name": "sensing_orbit"
            },
            {
                "name": "sad_status",
                "type": "text",
                "value": "COMPLETE"
            },
            {
                "name": "footprint_details",
                "type": "object",
                "values": [
                    {
                        "name": "footprint",
                        "type": "geometry",
                        "value": "POLYGON ((94.116896 59.067486, 93.93512200000001 58.821977, 93.755695 58.576244, 93.578564 58.330292, 93.403667 58.084127, 93.230935 57.837756, 93.060349 57.59118, 92.89186100000001 57.344402, 92.725425 57.097428, 92.560997 56.850262, 92.398534 56.602906, 92.23799200000001 56.355367, 92.079302 56.107649, 91.92244700000001 55.859755, 91.76739499999999 55.611688, 91.614107 55.36345, 91.462547 55.115045, 91.312679 54.866476, 91.164468 54.617746, 91.017866 54.368861, 90.872834 54.119824, 90.72936 53.870635, 90.587412 53.621297, 90.44696 53.371813, 90.307974 53.122186, 90.170424 52.872419, 90.03428099999999 52.622513, 89.899489 52.372476, 89.766051 52.122305, 89.63394 51.872003, 89.503131 51.621573, 89.373598 51.371016, 89.245318 51.120336, 89.11826499999999 50.869533, 88.992401 50.618613, 88.867707 50.367576, 88.744174 50.116423, 88.62178 49.865157, 88.50050400000001 49.613778, 88.380324 49.36229, 88.26122100000001 49.110692, 88.143169 48.858989, 88.026134 48.607184, 87.910118 48.355275, 87.795102 48.103265, 87.68107000000001 47.851154, 87.56800200000001 47.598946, 87.455883 47.34664, 87.344694 47.09424, 87.23440100000001 46.841747, 87.125001 46.589163, 87.016485 46.336487, 86.90883700000001 46.083722, 86.802041 45.830869, 86.696083 45.577928, 86.59094899999999 45.324902, 86.486616 45.071793, 86.383064 44.818601, 86.280295 44.565328, 86.17829500000001 44.311974, 86.077051 44.05854, 85.976551 43.805027, 85.876783 43.551438, 85.777733 43.297772, 85.67936899999999 43.044033, 85.581701 42.790219, 85.484717 42.536333, 85.388406 42.282374, 85.29275699999999 42.028344, 85.19776 41.774245, 85.103403 41.520076, 85.009666 41.265839, 84.91654 41.011536, 84.82402500000001 40.757167, 84.732111 40.502732, 84.640788 40.248232, 84.55004700000001 39.993669, 84.459878 39.739043, 84.37027 39.484355, 84.28120199999999 39.229606, 84.19268 38.974797, 84.104696 38.719929, 84.017242 38.465001, 83.930308 38.210015, 83.84388800000001 37.954972, 83.75797300000001 37.699872, 83.67254200000001 37.444717, 83.587598 37.189507, 83.503136 36.934243, 83.419149 36.678924, 83.33563100000001 36.423553, 83.252573 36.168129, 83.16996899999999 35.912653, 83.087807 35.657126, 83.006074 35.401549, 82.92477599999999 35.145922, 82.843906 34.890246, 82.76345600000001 34.634522, 82.683421 34.378749, 82.60379399999999 34.122928, 82.52457 33.867061, 82.445729 33.611148, 82.367278 33.35519, 82.28921200000001 33.099186, 82.21152600000001 32.843138, 82.134213 32.587045, 82.05726799999999 32.330909, 81.98068600000001 32.07473, 81.904455 31.818509, 81.82857 31.562246, 81.753033 31.305942, 81.67783799999999 31.049596, 81.60298 30.793211, 81.52845499999999 30.536785, 81.454257 30.28032, 81.38038 30.023817, 81.30681199999999 29.767275, 81.233557 29.510695, 81.160611 29.254078, 81.08797 28.997423, 81.015629 28.740732, 80.943584 28.484005, 80.87183 28.227242, 80.80035599999999 27.970445, 80.729163 27.713613, 80.658249 27.456746, 80.58761 27.199845, 80.51724299999999 26.942911, 80.447143 26.685944, 80.377306 26.428944, 80.307726 26.171913, 80.23839599999999 25.914849, 80.169319 25.657754, 80.10048999999999 25.400629, 80.03190600000001 25.143472, 79.96356400000001 24.886286, 79.89546 24.62907, 79.82759 24.371824, 79.759944 24.114549, 79.692526 23.857246, 79.625332 23.599915, 79.55835999999999 23.342556, 79.491606 23.08517, 79.425067 22.827756, 79.358739 22.570316, 79.29261700000001 22.312849, 79.226697 22.055357, 79.16098 21.797839, 79.095463 21.540296, 79.030142 21.282727, 78.96501499999999 21.025135, 78.90008 20.767518, 78.835331 20.509877, 78.770763 20.252213, 78.706377 19.994526, 78.642171 19.736817, 78.578143 19.479084, 78.51428900000001 19.22133, 78.45060700000001 18.963554, 78.38709299999999 18.705756, 78.32374299999999 18.447938, 78.26055599999999 18.190099, 78.19753 17.932239, 78.134664 17.67436, 78.07195400000001 17.41646, 78.009398 17.158541, 77.946994 16.900604, 77.884738 16.642647, 77.822626 16.384672, 77.760659 16.126679, 77.698835 15.868668, 77.63715000000001 15.61064, 77.575603 15.352594, 77.514191 15.094532, 77.452913 14.836453, 77.391763 14.578358, 77.330742 14.320248, 77.269848 14.062121, 77.20907800000001 13.803979, 77.14843 13.545823, 77.087903 13.287651, 77.027494 13.029466, 76.96720000000001 12.771266, 76.90701900000001 12.513052, 76.846951 12.254825, 76.786993 11.996585, 76.727142 11.738332, 76.66739800000001 11.480067, 76.607758 11.221789, 76.548219 10.9635, 76.48878000000001 10.705198, 76.42944 10.446886, 76.37019600000001 10.188562, 76.311046 9.930227, 76.25198899999999 9.671882, 76.193023 9.413527, 76.134146 9.155162000000001, 76.075355 8.896787, 76.01665 8.638403, 75.958029 8.38001, 73.40189700000001 8.945615999999999, 73.45882 9.204136999999999, 73.515772 9.462654000000001, 73.57275300000001 9.721166, 73.629758 9.979675, 73.686798 10.238179, 73.74387400000001 10.496677, 73.800988 10.75517, 73.858141 11.013657, 73.915335 11.272138, 73.972572 11.530613, 74.029843 11.789083, 74.087159 12.047545, 74.14452300000001 12.306001, 74.201936 12.564449, 74.259401 12.82289, 74.316919 13.081322, 74.37449100000001 13.339747, 74.432115 13.598164, 74.48979 13.856573, 74.547526 14.114973, 74.605324 14.373364, 74.663185 14.631746, 74.72111200000001 14.890118, 74.779107 15.14848, 74.83717 15.406832, 74.895293 15.665175, 74.95348799999999 15.923507, 75.011758 16.181828, 75.070105 16.440138, 75.12853200000001 16.698437, 75.187039 16.956724, 75.24562899999999 17.214999, 75.304294 17.473262, 75.363041 17.731514, 75.42187699999999 17.989752, 75.48080400000001 18.247978, 75.539824 18.506191, 75.598939 18.76439, 75.658152 19.022575, 75.71745900000001 19.280747, 75.776856 19.538905, 75.83635700000001 19.797048, 75.89596299999999 20.055177, 75.95567699999999 20.313291, 76.015502 20.571389, 76.075439 20.829472, 76.13549 21.087539, 76.195644 21.345591, 76.255915 21.603626, 76.31630699999999 21.861645, 76.376823 22.119647, 76.437466 22.377632, 76.498237 22.6356, 76.55914 22.89355, 76.620167 23.151482, 76.68132199999999 23.409396, 76.742615 23.667292, 76.80404900000001 23.92517, 76.865627 24.183028, 76.927351 24.440867, 76.989225 24.698686, 77.051249 24.956486, 77.11341 25.214266, 77.17572699999999 25.472026, 77.23820499999999 25.729765, 77.30084600000001 25.987484, 77.363652 26.245181, 77.426627 26.502856, 77.489774 26.76051, 77.55308100000001 27.018142, 77.616559 27.275752, 77.680218 27.533339, 77.74406 27.790904, 77.808089 28.048445, 77.87230700000001 28.305963, 77.93671999999999 28.563456, 78.001323 28.820926, 78.066109 29.078373, 78.13109900000001 29.335794, 78.19629399999999 29.593191, 78.2617 29.850562, 78.32732 30.107907, 78.393156 30.365227, 78.459214 30.62252, 78.525475 30.879787, 78.591962 31.137028, 78.65868 31.394242, 78.725633 31.651428, 78.79282600000001 31.908586, 78.860263 32.165716, 78.927948 32.422818, 78.995873 32.679891, 79.06404000000001 32.936936, 79.13246700000001 33.193951, 79.20115800000001 33.450936, 79.270117 33.707891, 79.33935 33.964816, 79.40886 34.221709, 79.478652 34.478572, 79.548705 34.735404, 79.619049 34.992204, 79.689689 35.248972, 79.760631 35.505707, 79.831878 35.762409, 79.903437 36.019078, 79.975312 36.275713, 80.04749099999999 36.532314, 80.11998699999999 36.788881, 80.192814 37.045414, 80.26598 37.301911, 80.339489 37.558372, 80.413347 37.814797, 80.48756 38.071185, 80.562127 38.327536, 80.637038 38.583852, 80.712322 38.840129, 80.78798500000001 39.096368, 80.864034 39.352569, 80.94047500000001 39.60873, 81.017314 39.864851, 81.09456 40.120932, 81.172192 40.376974, 81.250238 40.632975, 81.32871 40.888934, 81.407616 41.144851, 81.486963 41.400726, 81.566759 41.656557, 81.647012 41.912345, 81.727715 42.16809, 81.80887199999999 42.423791, 81.89050899999999 42.679446, 81.972635 42.935056, 82.05525799999999 43.190619, 82.13838800000001 43.446136, 82.22203399999999 43.701605, 82.306203 43.957025, 82.390872 44.212399, 82.476083 44.467724, 82.561847 44.722999, 82.648173 44.978223, 82.735073 45.233395, 82.82255600000001 45.488516, 82.910633 45.743584, 82.999291 45.9986, 83.08855 46.253563, 83.178436 46.508471, 83.26896000000001 46.763324, 83.360135 47.01812, 83.451971 47.272859, 83.544483 47.52754, 83.63767300000001 47.782163, 83.731532 48.036729, 83.826104 48.291234, 83.921403 48.545678, 84.017442 48.80006, 84.11423600000001 49.054379, 84.2118 49.308634, 84.310148 49.562824, 84.409262 49.816951, 84.509182 50.071011, 84.609933 50.325004, 84.71153099999999 50.578928, 84.81399399999999 50.832781, 84.917338 51.086564, 85.021581 51.340274, 85.126724 51.593913, 85.232775 51.847479, 85.33978 52.100969, 85.447759 52.354382, 85.55673299999999 52.607717, 85.666721 52.860973, 85.777745 53.114147, 85.889827 53.36724, 86.00294 53.620252, 86.11715599999999 53.87318, 86.232497 54.126021, 86.348989 54.378774, 86.46665400000001 54.631436, 86.58552 54.884008, 86.705612 55.136487, 86.826928 55.388873, 86.94950300000001 55.641165, 87.073387 55.893359, 87.19860799999999 56.145453, 87.325198 56.397444, 87.453187 56.649331, 87.582607 56.901113, 87.713481 57.152787, 87.84580800000001 57.404355, 87.97966700000001 57.65581, 88.115093 57.90715, 88.25212399999999 58.158374, 88.39079700000001 58.409477, 88.531153 58.660459, 88.67323 58.911315, 88.817026 59.162049, 88.962616 59.412653, 89.110055 59.663125, 89.25939099999999 59.91346, 94.116896 59.067486))"
                    }
                ]
            }
        ]

        isp_completeness_2 = self.session.query(Event).join(Gauge).filter(Gauge.name.like("PLANNED_IMAGING_ISP_COMPLETENESS_CHANNEL_%"),
                                                                                 Event.start == "2018-07-21T05:37:14.362833",
                                                                                 Event.stop == "2018-07-21T05:40:35.417601").all()

        assert len(isp_completeness_2) == 1

        # Check PLANNED_PLAYBACK_COMPLETENESS_CHANNEL events
        playback_completeness_events = self.session.query(Event).join(Gauge).filter(Gauge.name.like("PLANNED_PLAYBACK_COMPLETENESS_CHANNEL%")).all()
        
        assert len(playback_completeness_events) == 3

        # Check specific playback completeness
        playback_completeness_1 = self.session.query(Event).join(Gauge).filter(Gauge.name.like("PLANNED_PLAYBACK_COMPLETENESS_CHANNEL_2"),
                                                                                 Event.start == "2018-07-21T07:08:00.391740",
                                                                                 Event.stop == "2018-07-21T07:25:04.350719").all()

        assert len(playback_completeness_1) == 1

        assert playback_completeness_1[0].get_structured_values() == [
            {
                "type": "text",
                "value": "RECEIVED",
                "name": "status"
            },
            {
                "type": "double",
                "value": "16076.0",
                "name": "downlink_orbit"
            },
            {
                "type": "text",
                "value": "S2A",
                "name": "satellite"
            },
            {
                "type": "text",
                "value": "EDRS",
                "name": "reception_station"
            },
            {
                "type": "double",
                "value": "2.0",
                "name": "channel"
            },
            {
                "type": "double",
                "value": "22.0",
                "name": "vcid"
            },
            {
                "type": "text",
                "value": "RT",
                "name": "playback_type"
            },
            {
                "name": "footprint_details",
                "type": "object",
                "values": [
                    {
                        "name": "footprint",
                        "type": "geometry",
                        "value": "POLYGON ((59.836202 41.268743, 59.726332 40.968526, 59.617306 40.668216, 59.509109 40.367816, 59.401726 40.067327, 59.295139 39.76675, 59.189334 39.466087, 59.084299 39.165339, 58.980019 38.864506, 58.87648 38.563592, 58.773669 38.262596, 58.671572 37.96152, 58.570176 37.660365, 58.469469 37.359132, 58.369438 37.057823, 58.270071 36.756439, 58.171357 36.45498, 58.073283 36.153449, 57.975838 35.851845, 57.879011 35.55017, 57.782791 35.248426, 57.687168 34.946612, 57.59213 34.644731, 57.497668 34.342782, 57.403772 34.040768, 57.310431 33.738689, 57.217636 33.436545, 57.125378 33.134339, 57.033647 32.83207, 56.942434 32.52974, 56.85173 32.22735, 56.761526 31.9249, 56.671814 31.622392, 56.582586 31.319826, 56.493832 31.017203, 56.405545 30.714523, 56.317718 30.411789, 56.230341 30.109, 56.143408 29.806157, 56.05691 29.503261, 55.970841 29.200313, 55.885193 28.897314, 55.799959 28.594264, 55.715132 28.291164, 55.630705 27.988015, 55.546672 27.684817, 55.463025 27.381572, 55.379758 27.07828, 55.296865 26.774942, 55.214339 26.471557, 55.132175 26.168128, 55.050365 25.864655, 54.968904 25.561138, 54.887785 25.257579, 54.807003 24.953977, 54.726553 24.650333, 54.646429 24.346649, 54.566625 24.042924, 54.487136 23.739159, 54.407957 23.435356, 54.329082 23.131514, 54.250506 22.827634, 54.172224 22.523717, 54.094231 22.219764, 54.016521 21.915774, 53.939091 21.61175, 53.861935 21.30769, 53.785048 21.003596, 53.708426 20.699469, 53.632065 20.395308, 53.555958 20.091115, 53.480103 19.786891, 53.404494 19.482635, 53.329128 19.178348, 53.253999 18.874031, 53.179104 18.569684, 53.104439 18.265308, 53.029999 17.960904, 52.95578 17.656472, 52.881778 17.352012, 52.80799 17.047525, 52.73441 16.743012, 52.661036 16.438473, 52.587864 16.133909, 52.51489 15.82932, 52.442109 15.524707, 52.369519 15.22007, 52.297115 14.91541, 52.224895 14.610727, 52.152853 14.306022, 52.080988 14.001295, 52.009295 13.696547, 51.937771 13.391778, 51.866413 13.086989, 51.795217 12.782181, 51.724179 12.477353, 51.653297 12.172507, 51.582568 11.867642, 51.511987 11.56276, 51.441552 11.25786, 51.371259 10.952944, 51.301105 10.648012, 51.231088 10.343064, 51.161205 10.0381, 51.091451 9.733122, 51.021824 9.428129999999999, 50.952321 9.123124000000001, 50.88294 8.818104, 50.813676 8.513071, 50.744527 8.208027, 50.675491 7.90297, 50.606564 7.597902, 50.537743 7.292822, 50.469026 6.987733, 50.40041 6.682633, 50.331891 6.377524, 50.263467 6.072405, 50.195136 5.767278, 50.126894 5.462143, 50.058739 5.156999, 49.990668 4.851849, 49.922678 4.546692, 49.854767 4.241528, 49.786931 3.936359, 49.719169 3.631184, 49.651477 3.326004, 49.583853 3.020819, 49.516295 2.715631, 49.448799 2.410438, 49.381363 2.105243, 49.313984 1.800044, 49.24666 1.494843, 49.179388 1.189641, 49.112166 0.884437, 49.044991 0.579232, 48.97786 0.274026, 48.910771 -0.03118, 48.843722 -0.336385, 48.776709 -0.64159, 48.70973 -0.946793, 48.642783 -1.251995, 48.575865 -1.557195, 48.508974 -1.862393, 48.442107 -2.167587, 48.375261 -2.472778, 48.308434 -2.777965, 48.241624 -3.083148, 48.174828 -3.388327, 48.108045 -3.6935, 48.04127 -3.998668, 47.974501 -4.30383, 47.907736 -4.608986, 47.840973 -4.914134, 47.774208 -5.219276, 47.707439 -5.52441, 47.640664 -5.829536, 47.573881 -6.134653, 47.507085 -6.439762, 47.440276 -6.744861, 47.37345 -7.049951, 47.306605 -7.35503, 47.239738 -7.660099, 47.172847 -7.965156, 47.105929 -8.270203, 47.038981 -8.575237, 46.972001 -8.880259000000001, 46.904986 -9.185269, 46.837934 -9.490265000000001, 46.770842 -9.795248000000001, 46.703706 -10.100217, 46.636526 -10.405172, 46.569297 -10.710112, 46.502017 -11.015037, 46.434683 -11.319946, 46.367293 -11.624839, 46.299844 -11.929716, 46.232333 -12.234576, 46.164758 -12.539419, 46.097114 -12.844244, 46.029401 -13.149052, 45.961614 -13.45384, 45.893751 -13.75861, 45.825809 -14.063361, 45.757785 -14.368092, 45.689676 -14.672802, 45.621479 -14.977493, 45.553191 -15.282162, 45.48481 -15.58681, 45.416332 -15.891436, 45.347753 -16.196041, 45.279072 -16.500622, 45.210284 -16.805181, 45.141387 -17.109716, 45.072378 -17.414228, 45.003253 -17.718715, 44.934011 -18.023178, 44.864647 -18.327616, 44.795157 -18.632028, 44.725538 -18.936414, 44.655787 -19.240774, 41.968679 -18.661674, 42.043492 -18.357795, 42.118079 -18.05388, 42.192445 -17.749931, 42.266594 -17.445946, 42.34053 -17.141928, 42.414257 -16.837875, 42.487779 -16.53379, 42.561099 -16.229672, 42.634222 -15.925522, 42.707151 -15.62134, 42.77989 -15.317127, 42.852442 -15.012884, 42.924811 -14.70861, 42.997001 -14.404307, 43.069014 -14.099975, 43.140856 -13.795615, 43.212528 -13.491226, 43.284035 -13.18681, 43.35538 -12.882366, 43.426567 -12.577897, 43.497597 -12.2734, 43.568476 -11.968879, 43.639206 -11.664332, 43.70979 -11.35976, 43.780231 -11.055165, 43.850534 -10.750545, 43.9207 -10.445903, 43.990733 -10.141237, 44.060636 -9.836550000000001, 44.130412 -9.531840000000001, 44.200064 -9.227109, 44.269595 -8.922357, 44.339009 -8.617585, 44.408307 -8.312792999999999, 44.477493 -8.007980999999999, 44.54657 -7.703151, 44.615541 -7.398301, 44.684408 -7.093434, 44.753175 -6.788549, 44.821844 -6.483647, 44.890418 -6.178728, 44.9589 -5.873793, 45.027293 -5.568841, 45.095599 -5.263875, 45.163821 -4.958894, 45.231963 -4.653898, 45.300025 -4.348888, 45.368012 -4.043865, 45.435926 -3.738828, 45.50377 -3.433779, 45.571546 -3.128717, 45.639257 -2.823644, 45.706905 -2.518559, 45.774493 -2.213464, 45.842024 -1.908358, 45.9095 -1.603241, 45.976924 -1.298116, 46.044299 -0.992981, 46.111627 -0.6878379999999999, 46.17891 -0.382686, 46.246152 -0.077526, 46.313355 0.227641, 46.380522 0.532815, 46.447654 0.837995, 46.514755 1.143181, 46.581827 1.448373, 46.648872 1.753571, 46.715894 2.058773, 46.782894 2.363979, 46.849876 2.669189, 46.916842 2.974403, 46.983793 3.27962, 47.050734 3.584839, 47.117666 3.89006, 47.184592 4.195284, 47.251515 4.500508, 47.318437 4.805734, 47.38536 5.110959, 47.452287 5.416185, 47.519221 5.721411, 47.586165 6.026635, 47.65312 6.331859, 47.72009 6.63708, 47.787077 6.9423, 47.854083 7.247517, 47.921111 7.552731, 47.988165 7.857942, 48.055245 8.163149000000001, 48.122356 8.468351, 48.1895 8.773548999999999, 48.256678 9.078742, 48.323895 9.383929, 48.391153 9.689111, 48.458453 9.994286000000001, 48.5258 10.299454, 48.593196 10.604615, 48.660643 10.909769, 48.728144 11.214914, 48.795702 11.520051, 48.86332 11.825179, 48.930999 12.130298, 48.998743 12.435407, 49.066555 12.740506, 49.134438 13.045594, 49.202395 13.350671, 49.270429 13.655737, 49.338542 13.960791, 49.406738 14.265833, 49.47502 14.570862, 49.54339 14.875878, 49.611852 15.180881, 49.680408 15.485869, 49.749062 15.790843, 49.817816 16.095803, 49.886675 16.400747, 49.95564 16.705675, 50.024716 17.010587, 50.093905 17.315483, 50.16321 17.620362, 50.232636 17.925224, 50.302185 18.230067, 50.37186 18.534893, 50.441666 18.8397, 50.511604 19.144488, 50.58168 19.449256, 50.651896 19.754005, 50.722255 20.058733, 50.792763 20.36344, 50.863421 20.668126, 50.934234 20.97279, 51.005205 21.277433, 51.076339 21.582053, 51.147638 21.88665, 51.219108 22.191223, 51.290751 22.495773, 51.362572 22.800298, 51.434575 23.104799, 51.506763 23.409274, 51.579141 23.713724, 51.651714 24.018148, 51.724485 24.322545, 51.797458 24.626916, 51.870638 24.931259, 51.94403 25.235574, 52.017638 25.539861, 52.091466 25.844119, 52.165519 26.148348, 52.2398 26.452547, 52.314315 26.756716, 52.389068 27.060855, 52.464066 27.364963, 52.539313 27.669038, 52.614814 27.973082, 52.690575 28.277094, 52.7666 28.581072, 52.842895 28.885017, 52.919466 29.188928, 52.996318 29.492804, 53.073457 29.796646, 53.150887 30.100452, 53.228616 30.404222, 53.306649 30.707956, 53.384992 31.011652, 53.463651 31.315311, 53.542632 31.618932, 53.621942 31.922515, 53.701587 32.226058, 53.781574 32.529562, 53.86191 32.833026, 53.942601 33.136448, 54.023654 33.43983, 54.105076 33.74317, 54.186875 34.046467, 54.269058 34.349722, 54.351632 34.652932, 54.434606 34.956099, 54.517986 35.259221, 54.601782 35.562298, 54.686001 35.865328, 54.770651 36.168312, 54.855741 36.471249, 54.941279 36.774138, 55.027275 37.076979, 55.113737 37.37977, 55.200675 37.682512, 55.288098 37.985203, 55.376016 38.287843, 55.464438 38.590431, 55.553375 38.892966, 55.642836 39.195448, 55.732833 39.497877, 55.823376 39.80025, 55.914476 40.102568, 56.006145 40.404829, 56.098392 40.707034, 56.191227 41.009181, 56.284665 41.311269, 56.378718 41.613298, 56.4734 41.915266, 59.836202 41.268743))"
                    }
                ]
            }
        ]

    def test_insert_rep_pass_only_hktm(self):

        filename = "S2A_OPER_REP_PASS_E_ONLY_HKTM.EOF"
        file_path = os.path.dirname(os.path.abspath(__file__)) + "/inputs/" + filename

        exit_status = ingestion.command_process_file("s2boa.ingestions.ingestion_edrs_acquisition.ingestion_edrs_acquisition", file_path, "2018-01-01T00:00:00")

        assert len([item for item in exit_status if item["status"] != eboa_engine.exit_codes["OK"]["status"]]) == 0

        # Check sources
        source = self.session.query(Source).filter(Source.reported_validity_start == "2018-07-21T07:28:23",
                                                   Source.reported_validity_stop == "2018-07-21T07:37:55",
                                                   Source.validity_start == "2018-07-21T01:47:42.854151",
                                                   Source.validity_stop == "2018-07-21T01:47:43.833085",
                                                   Source.name == "S2A_OPER_REP_PASS_E_ONLY_HKTM.EOF",
                                                   Source.processor == "ingestion_edrs_acquisition.py").all()

        assert len(source) == 2

        # Check number of events generated
        events = self.session.query(Event).join(Source).filter(Source.name == "S2A_OPER_REP_PASS_E_ONLY_HKTM.EOF").all()

        assert len(events) == 1

    def test_insert_rep_pass_with_plan_playback_starting_before_than_MSI(self):

        filename = "S2A_NPPF_PLAYBACK_STARTING_BEFORE_THAN_MSI.EOF"
        file_path = os.path.dirname(os.path.abspath(__file__)) + "/inputs/" + filename

        exit_status = ingestion.command_process_file("s2boa.ingestions.ingestion_nppf.ingestion_nppf", file_path, "2018-01-01T00:00:00")

        assert len([item for item in exit_status if item["status"] != eboa_engine.exit_codes["OK"]["status"]]) == 0

        filename = "S2A_ORBPRE.EOF"
        file_path = os.path.dirname(os.path.abspath(__file__)) + "/inputs/" + filename

        exit_status = ingestion.command_process_file("s2boa.ingestions.ingestion_orbpre.ingestion_orbpre", file_path, "2018-01-01T00:00:00")

        assert len([item for item in exit_status if item["status"] != eboa_engine.exit_codes["OK"]["status"]]) == 0

        filename = "S2__SRA_2.EOF"
        file_path = os.path.dirname(os.path.abspath(__file__)) + "/inputs/" + filename

        exit_status = ingestion.command_process_file("s2boa.ingestions.ingestion_slot_request_edrs.ingestion_slot_request_edrs", file_path, "2018-01-01T00:00:00")

        assert len([item for item in exit_status if item["status"] != eboa_engine.exit_codes["OK"]["status"]]) == 0

        filename = "S2A_OPER_REP_PASS_E_NO_SAD.EOF"
        file_path = os.path.dirname(os.path.abspath(__file__)) + "/inputs/" + filename

        exit_status = ingestion.command_process_file("s2boa.ingestions.ingestion_edrs_acquisition.ingestion_edrs_acquisition", file_path, "2018-01-01T00:00:00")

        assert len([item for item in exit_status if item["status"] != eboa_engine.exit_codes["OK"]["status"]]) == 0

        # Check sources
        source = self.session.query(Source).filter(Source.reported_validity_start == "2018-07-21T07:28:23",
                                                   Source.reported_validity_stop == "2018-07-21T07:37:55",
                                                   Source.validity_start == "2018-07-21T05:22:08.947423",
                                                   Source.validity_stop == "2018-07-21T07:37:40.689924",
                                                   Source.name == "S2A_OPER_REP_PASS_E_NO_SAD.EOF",
                                                   Source.processor == "ingestion_edrs_acquisition.py").all()

        assert len(source) == 2

        source = self.session.query(Source).filter(Source.reported_validity_start == "2018-07-21T07:28:23",
                                                   Source.reported_validity_stop == "2018-07-21T07:37:55",
                                                   Source.validity_start == "2018-07-21T05:22:08.947423",
                                                   Source.validity_stop == "2018-07-21T05:40:35.417601",
                                                   Source.name == "S2A_OPER_REP_PASS_E_NO_SAD.EOF",
                                                   Source.processor == "isp_planning_completeness_ingestion_edrs_acquisition.py").all()

        assert len(source) == 1

    def test_insert_rep_pass_with_partial_sad(self):
        filename = "S2A_OPER_REP_PASS_E_PARTIAL_SAD.EOF"
        file_path = os.path.dirname(os.path.abspath(__file__)) + "/inputs/" + filename

        exit_status = ingestion.command_process_file("s2boa.ingestions.ingestion_edrs_acquisition.ingestion_edrs_acquisition", file_path, "2018-01-01T00:00:00")

        assert len([item for item in exit_status if item["status"] != eboa_engine.exit_codes["OK"]["status"]]) == 0

        # Check number of sources generated
        sources = self.session.query(Source).all()

        assert len(sources) == 2

        # Check that the validity period of the input has taken into consideration the MSI sensing received
        source = self.session.query(Source).filter(Source.reported_validity_start == "2018-07-21T07:28:23",
                                                   Source.reported_validity_stop == "2018-07-21T07:37:55",
                                                   Source.validity_start == "2018-07-20 17:33:12.859268",
                                                   Source.validity_stop == "2018-07-21T07:37:55.121772").all()

        assert len(source) == 2

        raw_isp_validity_events = self.session.query(Event).join(Gauge).filter(Gauge.name == "RAW_ISP_VALIDITY").all()

        assert len(raw_isp_validity_events) == 1

        assert raw_isp_validity_events[0].get_structured_values() == [
            {
                "name": "status",
                "type": "text",
                "value": "COMPLETE"
            },{
                "name": "downlink_orbit",
                "type": "double",
                "value": "16076.0"
            },{
                "name": "satellite",
                "type": "text",
                "value": "S2A"
            },{
                "name": "reception_station",
                "type": "text",
                "value": "EDRS"
            },{
                "name": "channel",
                "type": "double",
                "value": "2.0"
            },{
                "name": "vcid",
                "type": "double",
                "value": "20.0"
            },{
                "name": "playback_type",
                "type": "text",
                "value": "NOMINAL"
            },{
                "name": "num_packets",
                "type": "double",
                "value": "1931040.0"
            },{
                "name": "num_frames",
                "type": "double",
                "value": "17927163.0"
            },
            {
                "name": "sad_status",
                "type": "text",
                "value": "PARTIAL"
            },{
                "name": "expected_num_packets",
                "type": "double",
                "value": "0.0"
            },{
                "name": "diff_expected_received",
                "type": "double",
                "value": "-1931040.0"
            },{
                "name": "packet_status",
                "type": "text",
                "value": "MISSING"
            }
        ]

        sad_data_events = self.session.query(Event).join(Gauge).filter(Gauge.name == "SAD_DATA",
                                                                       Event.start == "2018-07-21T05:30:21.024835",
                                                                       Event.stop == "2018-07-21T07:25:21.024899").all()

        assert len(sad_data_events) == 1

        assert sad_data_events[0].get_structured_values() == [
            {
                "name": "downlink_orbit",
                "type": "double",
                "value": "16076.0"
            },{
                "name": "satellite",
                "type": "text",
                "value": "S2A"
            },{
                "name": "reception_station",
                "type": "text",
                "value": "EDRS"
            }
        ]
