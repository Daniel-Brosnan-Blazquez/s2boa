"""
Automated tests for the DHUS completeness view

Written by DEIMOS Space S.L. (femd)

module vboa
"""
import os
import sys
import unittest
import time
import subprocess
import datetime
import s2vboa.tests.dhus_completeness.aux_functions as functions
import re
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver import ActionChains,TouchActions
from selenium.webdriver.common.keys import Keys

# Import engine of the DDBB
import eboa.engine.engine as eboa_engine
import eboa.ingestion.eboa_ingestion as ingestion
import eboa.triggering.eboa_triggering as triggering
from eboa.engine.engine import Engine
from eboa.engine.query import Query
from eboa.datamodel.base import Session, engine, Base
from eboa.engine.errors import UndefinedEventLink, DuplicatedEventLinkRef, WrongPeriod, SourceAlreadyIngested, WrongValue, OddNumberOfCoordinates, EboaResourcesPathNotAvailable, WrongGeometry
from eboa.debugging import debug


class TestDhusCompletenessView(unittest.TestCase):
    options = Options()
    options.add_argument('--headless')
    options.add_argument('--no-sandbox')
    options.add_argument('window-size=1920,1080')
    driver = webdriver.Chrome(options=options)
    driver.implicitly_wait(5)

    def setUp(self):
        # Create the engine to manage the data
        self.engine_eboa = Engine()
        self.query_eboa = Query()

        # Create session to connect to the database
        self.session = Session()

        # Clear all tables before executing the test
        self.query_eboa.clear_db()

    def tearDown(self):
        # Close connections to the DDBB
        self.engine_eboa.close_session()
        self.query_eboa.close_session()
        self.session.close()

    @classmethod
    def tearDownClass(self):
        self.driver.quit()

    def test_dhus_completeness_no_data(self):

        wait = WebDriverWait(self.driver,5)

        self.driver.get("http://localhost:5000/views/dhus-completeness")

        functions.query(self.driver, wait, "S2A", start = "2018-07-01T00:00:00", stop = "2018-07-31T23:59:59", start_orbit = "17600", stop_orbit = "17800", table_details = True, map = True, station_reports = True)

        # Check header generated
        header_no_data = wait.until(EC.visibility_of_element_located((By.ID,"header-no-data")))

        assert header_no_data

        table_details_no_data = wait.until(EC.visibility_of_element_located((By.ID,"dhus-completeness-no-expected-dissemination")))

        assert table_details_no_data

    def test_dhus_completeness(self):

        filename = "S2A_NPPF.EOF"
        file_path = os.path.dirname(os.path.abspath(__file__)) + "/inputs/" + filename

        exit_status = ingestion.command_process_file("s2boa.ingestions.ingestion_nppf.ingestion_nppf", file_path, "2018-01-01T00:00:00")

        assert len([item for item in exit_status if item["status"] != eboa_engine.exit_codes["OK"]["status"]]) == 0

        filename = "S2A_ORBPRE.EOF"
        file_path = os.path.dirname(os.path.abspath(__file__)) + "/inputs/" + filename

        exit_status = ingestion.command_process_file("s2boa.ingestions.ingestion_orbpre.ingestion_orbpre", file_path, "2018-01-01T00:00:00")

        assert len([item for item in exit_status if item["status"] != eboa_engine.exit_codes["OK"]["status"]]) == 0

        filename = "S2A_REP_PASS_NO_GAPS.EOF"
        file_path = os.path.dirname(os.path.abspath(__file__)) + "/inputs/" + filename

        exit_status = ingestion.command_process_file("s2boa.ingestions.ingestion_dfep_acquisition.ingestion_dfep_acquisition", file_path, "2018-01-01T00:00:00")

        assert len([item for item in exit_status if item["status"] != eboa_engine.exit_codes["OK"]["status"]]) == 0

        filename = "S2A_OPER_REP_OPDPC_L0U_L0.EOF"
        file_path = os.path.dirname(os.path.abspath(__file__)) + "/inputs/" + filename

        exit_status = ingestion.command_process_file("s2boa.ingestions.ingestion_dpc.ingestion_dpc", file_path, "2018-01-01T00:00:00")

        assert len([item for item in exit_status if item["status"] != eboa_engine.exit_codes["OK"]["status"]]) == 0

        filename = "S2A_OPER_REP_OPDPC_L1B_L1C.EOF"
        file_path = os.path.dirname(os.path.abspath(__file__)) + "/inputs/" + filename

        exit_status = ingestion.command_process_file("s2boa.ingestions.ingestion_dpc.ingestion_dpc", file_path, "2018-01-01T00:00:00")

        assert len([item for item in exit_status if item["status"] != eboa_engine.exit_codes["OK"]["status"]]) == 0

        filename = "S2__OPDAM.EOF"
        file_path = os.path.dirname(os.path.abspath(__file__)) + "/inputs/" + filename

        exit_status = ingestion.command_process_file("s2boa.ingestions.ingestion_dam.ingestion_dam", file_path, "2018-01-01T00:00:00")

        assert len([item for item in exit_status if item["status"] != eboa_engine.exit_codes["OK"]["status"]]) == 0

        filename = "S2__OPER_REP_ARC____MPS__20180721T110232_V20180721T085229_20180721T085414.EOF"
        file_path = os.path.dirname(os.path.abspath(__file__)) + "/inputs/" + filename

        exit_status = ingestion.command_process_file("s2boa.ingestions.ingestion_rep_arc.ingestion_rep_arc", file_path, "2018-01-01T00:00:00")

        assert len([item for item in exit_status if item["status"] != eboa_engine.exit_codes["OK"]["status"]]) == 0
        
        filename = "S2__OPDHUS.xml"
        file_path = os.path.dirname(os.path.abspath(__file__)) + "/inputs/" + filename

        exit_status = ingestion.command_process_file("s2boa.ingestions.ingestion_dhus.ingestion_dhus", file_path, "2018-01-01T00:00:00")

        assert len([item for item in exit_status if item["status"] != eboa_engine.exit_codes["OK"]["status"]]) == 0

        filename = "test_input_file_containing_dhus_publication_timings.xml"
        file_path = os.path.dirname(os.path.abspath(__file__)) + "/inputs/" + filename

        exit_status = ingestion.command_process_file("s2boa.ingestions.ingestion_publication_dhus.ingestion_publication_dhus", file_path, "2018-01-01T00:00:00")

        assert len([item for item in exit_status if item["status"] != eboa_engine.exit_codes["OK"]["status"]]) == 0

        wait = WebDriverWait(self.driver,5)

        self.driver.get("http://localhost:5000/views/dhus-completeness")

        functions.query(self.driver, wait, "S2A", start = "2018-07-01T00:00:00", stop = "2018-07-31T23:59:59", start_orbit = "17600", stop_orbit = "17800", table_details = True, map = True, station_reports = True)

        # Check summary expected msi
        summary_expected_msi = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-expected-msi")))

        assert summary_expected_msi

        assert summary_expected_msi.text == "33.033"

        # Check summary acquired msi
        summary_acquired_msi = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-acquired-msi")))

        assert summary_acquired_msi

        assert summary_acquired_msi.text == "1.804"

        # Check summary processed to l1c msi
        summary_processed_l1c_msi = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-processed-to-l1c-msi")))

        assert summary_processed_l1c_msi

        assert summary_processed_l1c_msi.text == "1.833"

        # Check summary processed to l2a msi
        summary_processed_l2a_msi = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-processed-to-l2a-msi")))

        assert summary_processed_l2a_msi

        assert summary_processed_l2a_msi.text == "0.0"

        # Check summary generated to l1c tiles
        summary_generated_l1c_tiles = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-generated-l1c-tiles")))

        assert summary_generated_l1c_tiles

        assert summary_generated_l1c_tiles.text == "4"

        # Check summary generated to l2a tiles
        summary_generated_l2a_tiles = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-generated-l2a-tiles")))

        assert summary_generated_l2a_tiles

        assert summary_generated_l2a_tiles.text == "0"

        # Check summary missing acquistion
        summary_missing_acquistion = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-missing-acquistion")))

        assert summary_missing_acquistion

        assert summary_missing_acquistion.text == "30.895"

        # Check summary missing processing l1c
        summary_missing_processing_l1c = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-missing-processing-l1c")))

        assert summary_missing_processing_l1c

        assert summary_missing_processing_l1c.text == "30.866"

        # Check summary missing processing l2a
        summary_missing_processing_l2a = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-missing-processing-l2a")))

        assert summary_missing_processing_l2a

        assert summary_missing_processing_l2a.text == "32.699"

        # Check summary missing l1c tiles in DAM
        summary_missing_l1c_tiles_dam = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-missing-l1c-tiles-in-dam")))

        assert summary_missing_l1c_tiles_dam

        assert summary_missing_l1c_tiles_dam.text == "1"

        # Check summary missing l1c tiles in DHUS
        summary_missing_l1c_tiles_dhus = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-missing-l1c-tiles-in-dhus")))

        assert summary_missing_l1c_tiles_dhus

        assert summary_missing_l1c_tiles_dhus.text == "2"

        # Check summary missing l1c tiles published in DHUS
        summary_missing_l1c_tiles_published_dhus = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-missing-l1c-tiles-published-in-dhus")))

        assert summary_missing_l1c_tiles_published_dhus

        assert summary_missing_l1c_tiles_published_dhus.text == "3"

        # Check number of elements in summary
        assert len(summary_expected_msi.find_elements_by_xpath("../../../div")) == 12

        # Check whether the map is displayed
        map_section = self.driver.find_element_by_id("dhus-completeness-on-map-section")

        condition = map_section.is_displayed()

        assert condition is True

        l1c_map_section = self.driver.find_element_by_id("dhus-completeness-l1c-on-map-section")

        condition = l1c_map_section.is_displayed()

        assert condition is True

        l2a_map_section = self.driver.find_element_by_id("dhus-completeness-l2a-on-map-section")

        condition = l2a_map_section.is_displayed()

        assert condition is True

        # Check map missing segments tooltip
        planned_imaging_processing_completeness_l1c_1 = self.query_eboa.get_events(gauge_names ={"filter": "PLANNED_IMAGING_PROCESSING_COMPLETENESS_L1C", "op":"=="},
                                                                                start_filters =[{"date": "2018-07-21T08:36:08.255634", "op":"=="}],
                                                                                stop_filters = [{"date": "2018-07-21T08:52:29", "op": "=="}])
        planned_imaging_processing_completeness_l1c_2 = self.query_eboa.get_events(gauge_names ={"filter": "PLANNED_IMAGING_PROCESSING_COMPLETENESS_L1C", "op":"=="},
                                                                                start_filters =[{"date": "2018-07-21T08:54:19", "op":"=="}],
                                                                                stop_filters = [{"date": "2018-07-21T09:08:50.195941", "op": "=="}])
        planned_imaging_correction = self.query_eboa.get_events(gauge_names ={"filter": "PLANNED_CUT_IMAGING_CORRECTION", "op":"=="})
        planned_cut_imaging = self.query_eboa.get_events(gauge_names ={"filter": "PLANNED_CUT_IMAGING", "op":"=="})

        map_l1c_missing_tooltip_info = [
            {
                "id": str(planned_imaging_processing_completeness_l1c_1[0].event_uuid),
                "tooltip": "<table border='1'>" + 
                "<tr><td>UUID</td><td>" + str(planned_imaging_processing_completeness_l1c_1[0].event_uuid) + "</td></tr>" + 
                "<tr><td>Satellite</td><td>S2A</td></tr><tr>" + 
                "<td>Orbit</td><td>16077</td></tr>" + 
                "<tr><td>Datastrip</td><td>N/A</td></tr>" + 
                "<tr><td>Status</td><td><a class='bold-red' href='/views/dhus-completeness-by-datatake/" + str(planned_imaging_correction[0].event_uuid) + "'>MISSING ACQUISITION</a></td></tr>" + 
                "<tr><td>Start</td><td>2018-07-21T08:36:08.255634</td></tr>" + 
                "<tr><td>Stop</td><td>2018-07-21T08:52:29</td></tr>" + 
                "<tr><td>Duration(m)</td><td>16.346</td></tr>" + 
                "<tr><td>Plan file</td><td>S2A_NPPF.EOF</td></tr>" + 
                '<tr><td>Planned imaging</td><td><a href="/eboa_nav/query-event-links/' + str(planned_cut_imaging[0].event_uuid) + '"><i class="fa fa-link"></i></a></td></tr>' + 
                "</table>",
                "geometries": [
                        {'value': 'POLYGON ((101.528355 79.738353, 99.947565 79.650103, 98.394003 79.55444, 96.869035 79.451566, 95.373819 79.34169, 93.909317 79.225025, 92.476294 79.10178999999999, 91.075334 78.972204, 89.70684799999999 78.836489, 88.371088 78.694864, 87.068157 78.547549, 85.79802599999999 78.39476000000001, 84.560541 78.23671, 83.35543800000001 78.073611, 82.18237499999999 77.905664, 81.040915 77.73306700000001, 79.930555 77.55601299999999, 78.850728 77.37469, 77.800821 77.189279, 76.78017800000001 76.999954, 75.788112 76.806883, 74.823909 76.61022699999999, 73.886841 76.41014300000001, 72.97616600000001 76.206779, 72.091133 76.000276, 71.230994 75.790772, 70.394998 75.57839800000001, 69.582402 75.363276, 68.79247100000001 75.145527, 68.024479 74.925264, 67.277715 74.702594, 66.551481 74.477622, 65.845094 74.250444, 65.15788999999999 74.02115499999999, 64.48922 73.789844, 63.838455 73.556596, 63.204983 73.32149099999999, 62.588211 73.08460700000001, 61.987565 72.84601600000001, 61.402491 72.605788, 60.832451 72.36399, 60.276928 72.12068499999999, 59.735422 71.875933, 59.207449 71.629791, 58.692545 71.38231500000001, 58.190262 71.133555, 57.700168 70.883562, 57.221848 70.632383, 56.754902 70.38006300000001, 56.298945 70.126645, 55.853606 69.872169, 55.418529 69.616676, 54.993372 69.360201, 54.577805 69.102782, 54.17151 68.84445100000001, 53.774183 68.585241, 53.38553 68.32518399999999, 53.00527 68.06430899999999, 52.633124 67.802645, 52.268835 67.540218, 51.912156 67.277055, 51.562845 67.01318000000001, 51.220669 66.748616, 50.885404 66.48338699999999, 50.556836 66.21751399999999, 50.234758 65.951018, 49.91897 65.68392, 49.60928 65.416237, 49.305503 65.147989, 49.007462 64.879193, 48.714984 64.609866, 48.427906 64.340025, 48.146066 64.069684, 47.869314 63.798859, 47.597499 63.527564, 47.33048 63.255814, 47.06812 62.98362, 46.810285 62.710997, 46.556848 62.437955, 46.307685 62.164509, 46.062677 61.890667, 45.821709 61.616442, 45.584671 61.341844, 45.351454 61.066883, 45.121955 60.791568, 44.896075 60.515911, 44.673716 60.239918, 44.454785 59.9636, 44.239192 59.686964, 44.026849 59.410019, 43.817672 59.132773, 43.611579 58.855233, 43.408491 58.577406, 43.208331 58.299301, 43.011025 58.020922, 42.816502 57.742278, 42.624693 57.463374, 42.435529 57.184218, 42.248946 56.904813, 42.064881 56.625167, 41.883272 56.345286, 41.70406 56.065174, 41.527187 55.784836, 41.352597 55.504278, 41.180233 55.223506, 41.010046 54.942523, 40.841985 54.661335, 40.676002 54.379944, 40.512048 54.098357, 40.350076 53.816577, 40.190042 53.534608, 40.031901 53.252454, 39.875611 52.97012, 39.721131 52.687608, 39.568419 52.404922, 39.417438 52.122066, 39.268149 51.839044, 39.120515 51.555858, 38.9745 51.272512, 38.830069 50.989009, 38.687188 50.705351, 38.545824 50.421543, 38.405945 50.137587, 38.267519 49.853486, 38.130516 49.569242, 37.994907 49.284858, 37.860662 49.000336, 37.727753 48.71568, 37.596153 48.430891, 37.465835 48.145973, 37.336772 47.860926, 37.208941 47.575755, 37.082315 47.290459, 36.956871 47.005044, 36.832585 46.719509, 36.709435 46.433857, 36.587397 46.14809, 36.466451 45.86221, 36.346574 45.57622, 36.227746 45.29012, 36.109948 45.003913, 35.993158 44.7176, 35.877358 44.431183, 35.762529 44.144664, 35.648653 43.858045, 35.535711 43.571326, 35.423686 43.284511, 35.312561 42.997599, 35.20232 42.710594, 35.092942 42.423495, 34.984414 42.136306, 34.876722 41.849026, 34.769849 41.561658, 34.663782 41.274203, 34.558505 40.986662, 34.454004 40.699036, 34.350265 40.411327, 34.247275 40.123536, 34.14502 39.835664, 34.043486 39.547712, 33.942662 39.259682, 33.842535 38.971575, 33.743092 38.683392, 33.644322 38.395133, 33.546212 38.106801, 33.448751 37.818395, 33.351929 37.529918, 33.255733 37.24137, 33.160153 36.952753, 33.065179 36.664066, 32.970799 36.375312, 32.877005 36.08649, 32.783786 35.797603, 32.691131 35.508651, 32.599033 35.219635, 32.50748 34.930556, 32.416465 34.641414, 32.325977 34.352211, 32.236009 34.062948, 32.146551 33.773625, 32.057595 33.484243, 31.969133 33.194802, 31.881156 32.905305, 31.793656 32.615751, 31.706626 32.326142, 31.620057 32.036477, 31.533942 31.746759, 31.448274 31.456987, 31.363045 31.167163, 31.278248 30.877286, 31.193876 30.587359, 31.109922 30.297381, 31.02638 30.007353, 30.943241 29.717276, 30.8605 29.427151, 30.778149 29.136978, 30.696183 28.846758, 30.614596 28.556492, 30.533382 28.26618, 30.452534 27.975823, 27.58877 28.568889, 27.661837 28.860008, 27.735157 29.151096, 27.808734 29.442152, 27.882572 29.733176, 27.956678 30.024168, 28.031054 30.315126, 28.105706 30.606052, 28.18064 30.896944, 28.255862 31.187801, 28.331378 31.478624, 28.407192 31.769411, 28.483311 32.060163, 28.55974 32.350879, 28.636486 32.641558, 28.713553 32.9322, 28.790949 33.222805, 28.868678 33.513372, 28.946748 33.8039, 29.025165 34.094389, 29.103936 34.384838, 29.183066 34.675247, 29.262563 34.965616, 29.342434 35.255944, 29.422685 35.54623, 29.503324 35.836474, 29.584359 36.126675, 29.665795 36.416833, 29.747642 36.706947, 29.829907 36.997017, 29.912598 37.287042, 29.995722 37.577021, 30.079288 37.866954, 30.163305 38.156841, 30.247781 38.44668, 30.332724 38.736471, 30.418144 39.026214, 30.50405 39.315907, 30.590451 39.60555, 30.677357 39.895143, 30.764776 40.184685, 30.85272 40.474175, 30.941199 40.763613, 31.030222 41.052997, 31.119801 41.342327, 31.209945 41.631602, 31.300667 41.920822, 31.391978 42.209986, 31.483889 42.499092, 31.576412 42.788141, 31.66956 43.077132, 31.763343 43.366063, 31.857771 43.654934, 31.952861 43.943743, 32.048627 44.232491, 32.145082 44.521176, 32.242241 44.809798, 32.340118 45.098354, 32.438727 45.386845, 32.538083 45.675269, 32.638202 45.963626, 32.7391 46.251914, 32.840794 46.540132, 32.943298 46.82828, 33.046632 47.116355, 33.150811 47.404358, 33.255855 47.692287, 33.361781 47.98014, 33.468609 48.267917, 33.576357 48.555616, 33.685047 48.843236, 33.794698 49.130775, 33.905331 49.418233, 34.016968 49.705608, 34.129631 49.992899, 34.243344 50.280103, 34.358129 50.567221, 34.47401 50.854249, 34.591013 51.141187, 34.709163 51.428033, 34.828486 51.714785, 34.949009 52.001441, 35.07076 52.288001, 35.193768 52.574461, 35.318062 52.86082, 35.443672 53.147077, 35.57063 53.433229, 35.698968 53.719274, 35.828719 54.00521, 35.959917 54.291035, 36.092598 54.576747, 36.226798 54.862343, 36.362555 55.14782, 36.499906 55.433178, 36.638893 55.718412, 36.779556 56.003521, 36.921938 56.288501, 37.066077 56.573351, 37.212021 56.858067, 37.359821 57.142646, 37.509524 57.427085, 37.66118 57.71138, 37.814843 57.995529, 37.970564 58.279527, 38.1284 58.563372, 38.288407 58.84706, 38.450647 59.130587, 38.615179 59.413948, 38.782067 59.69714, 38.951378 59.980159, 39.12318 60.262999, 39.297544 60.545658, 39.474543 60.828128, 39.654254 61.110407, 39.836755 61.392489, 40.022129 61.674367, 40.210461 61.956037, 40.40184 62.237494, 40.596357 62.51873, 40.794108 62.79974, 40.995192 63.080517, 41.199712 63.361054, 41.407776 63.641345, 41.619496 63.921381, 41.834987 64.201156, 42.054372 64.48066, 42.277775 64.75988700000001, 42.505329 65.038826, 42.73717 65.31747, 42.973441 65.59580699999999, 43.214291 65.873829, 43.459876 66.15152500000001, 43.710357 66.428884, 43.965904 66.705895, 44.226694 66.982544, 44.492912 67.258821, 44.76475 67.534712, 45.042412 67.810203, 45.326107 68.085279, 45.616059 68.359926, 45.912497 68.634128, 46.215665 68.907866, 46.525813 69.18112600000001, 46.8432 69.45388800000001, 47.168116 69.72613200000001, 47.500853 69.997838, 47.84172 70.268984, 48.191039 70.539547, 48.549148 70.809504, 48.916403 71.078828, 49.293179 71.347493, 49.679869 71.615471, 50.076885 71.882732, 50.484663 72.14924499999999, 50.903661 72.414975, 51.33436 72.67988800000001, 51.777268 72.943946, 52.232919 73.20711, 52.701875 73.469337, 53.18473 73.730583, 53.682108 73.99079999999999, 54.194669 74.249938, 54.723108 74.50794399999999, 55.268156 74.76476099999999, 55.830585 75.02032699999999, 56.411209 75.274579, 57.010888 75.52744800000001, 57.630524 75.77886100000001, 58.271073 76.02874, 58.933536 76.277001, 59.618973 76.523556, 60.328496 76.768311, 61.063274 77.011163, 61.824538 77.252005, 62.613579 77.49072200000001, 63.431749 77.727189, 64.28046399999999 77.961276, 65.16120600000001 78.19284, 66.07551599999999 78.42173200000001, 67.02500000000001 78.64779, 68.011323 78.870842, 69.036205 79.090705, 70.101417 79.307181, 71.20877299999999 79.520062, 72.36012100000001 79.72912599999999, 73.557331 79.934133, 74.80227499999999 80.134833, 76.096819 80.330957, 77.44277 80.52222500000001, 78.841905 80.708336, 80.295897 80.888972, 81.80628299999999 81.06380299999999, 83.374426 81.23248100000001, 85.00146599999999 81.394645, 86.688271 81.549921, 88.435378 81.69792200000001, 90.24293299999999 81.83825400000001, 92.110631 81.970513, 94.037655 82.094296, 96.02262 82.209198, 101.528355 79.738353))', 'name': 'footprint'},
                ],
                "style": {
                    "stroke_color": "red",
                    "fill_color": "rgba(255,0,0,0.3)",
                }
            },
            {
                "id": str(planned_imaging_processing_completeness_l1c_2[0].event_uuid),
                "tooltip": "<table border='1'>" + 
                "<tr><td>UUID</td><td>" + str(planned_imaging_processing_completeness_l1c_2[0].event_uuid) + "</td></tr>" + 
                "<tr><td>Satellite</td><td>S2A</td></tr><tr>" + 
                "<td>Orbit</td><td>16077</td></tr>" + 
                "<tr><td>Datastrip</td><td>N/A</td></tr>" + 
                "<tr><td>Status</td><td><a class='bold-red' href='/views/dhus-completeness-by-datatake/" + str(planned_imaging_correction[0].event_uuid) + "'>MISSING ACQUISITION</a></td></tr>" + 
                "<tr><td>Start</td><td>2018-07-21T08:54:19</td></tr>" + 
                "<tr><td>Stop</td><td>2018-07-21T09:08:50.195941</td></tr>" + 
                "<tr><td>Duration(m)</td><td>14.520</td></tr>" + 
                "<tr><td>Plan file</td><td>S2A_NPPF.EOF</td></tr>" + 
                '<tr><td>Planned imaging</td><td><a href="/eboa_nav/query-event-links/' + str(planned_cut_imaging[0].event_uuid) + '"><i class="fa fa-link"></i></a></td></tr>' + 
                "</table>",
                "geometries": [
                        {'value': 'POLYGON ((28.731891 21.484659, 28.666319 21.225952, 28.600943 20.96722, 28.535758 20.708464, 28.470762 20.449683, 28.405953 20.19088, 28.341324 19.932053, 28.276873 19.673203, 28.212601 19.41433, 28.148504 19.155435, 28.084579 18.896519, 28.020825 18.637581, 27.957237 18.378621, 27.893815 18.119641, 27.83055 17.860641, 27.767446 17.60162, 27.704498 17.34258, 27.641706 17.08352, 27.579065 16.82444, 27.516575 16.565342, 27.454232 16.306226, 27.392033 16.047091, 27.329974 15.787939, 27.268056 15.528768, 27.206277 15.269581, 27.144633 15.010377, 27.083123 14.751156, 27.021745 14.491919, 26.960495 14.232666, 26.899371 13.973397, 26.838371 13.714113, 26.777494 13.454814, 26.716738 13.195501, 26.6561 12.936172, 26.595579 12.67683, 26.535171 12.417474, 26.474876 12.158105, 26.41469 11.898722, 26.354612 11.639327, 26.294641 11.379919, 26.234774 11.120499, 26.175009 10.861066, 26.115344 10.601622, 26.055778 10.342167, 25.996307 10.082701, 25.936932 9.823224, 25.877649 9.563736, 25.818456 9.304238, 25.759353 9.044731000000001, 25.700337 8.785213000000001, 25.641405 8.525687, 25.582557 8.266152, 25.523791 8.006607000000001, 25.465105 7.747055, 25.406497 7.487494, 25.347965 7.227925, 25.289507 6.968349, 25.231122 6.708765, 25.172808 6.449175, 25.114563 6.189578, 25.056387 5.929974, 24.998276 5.670364, 24.940229 5.410749, 24.882245 5.151127, 24.824321 4.891501, 24.766455 4.631869, 24.708647 4.372233, 24.650896 4.112592, 24.5932 3.852948, 24.535555 3.593299, 24.477962 3.333646, 24.420417 3.073991, 24.362919 2.814332, 24.305466 2.55467, 24.248057 2.295006, 24.190695 2.03534, 24.133373 1.775672, 24.07609 1.516002, 24.018844 1.25633, 23.961634 0.996658, 23.904458 0.736985, 23.847315 0.477311, 23.790204 0.217636, 23.733126 -0.042038, 23.676076 -0.301712, 23.619051 -0.5613860000000001, 23.562052 -0.821059, 23.505075 -1.080731, 23.44812 -1.340401, 23.391184 -1.60007, 23.334271 -1.859738, 23.277376 -2.119403, 23.220497 -2.379065, 23.163631 -2.638726, 23.106777 -2.898383, 23.049933 -3.158037, 22.993098 -3.417688, 22.936271 -3.677335, 22.879455 -3.936978, 22.822644 -4.196617, 22.765835 -4.456251, 22.709027 -4.715881, 22.652219 -4.975505, 22.595408 -5.235125, 22.538593 -5.494739, 22.481777 -5.754347, 22.424957 -6.013949, 22.368129 -6.273545, 22.311291 -6.533134, 22.254441 -6.792716, 22.197578 -7.052292, 22.1407 -7.31186, 22.083804 -7.57142, 22.026899 -7.830973, 21.969975 -8.090517, 21.913029 -8.350053000000001, 21.85606 -8.609579999999999, 21.799067 -8.869099, 21.742047 -9.128608, 21.684998 -9.388108000000001, 21.627923 -9.647599, 21.570824 -9.907079, 21.513692 -10.166549, 21.456525 -10.426009, 21.399322 -10.685459, 21.34208 -10.944897, 21.284799 -11.204324, 21.227476 -11.46374, 21.170118 -11.723144, 21.112718 -11.982536, 21.055272 -12.241915, 20.997777 -12.501283, 20.940232 -12.760637, 20.882636 -13.019979, 20.824985 -13.279308, 20.76728 -13.538623, 20.709529 -13.797924, 20.651718 -14.057211, 20.593848 -14.316484, 20.535914 -14.575743, 20.477916 -14.834987, 20.419851 -15.094216, 20.361719 -15.353429, 20.303521 -15.612628, 20.245259 -15.87181, 20.186923 -16.130976, 20.128512 -16.390127, 20.070022 -16.64926, 20.011453 -16.908377, 19.952802 -17.167477, 19.894067 -17.42656, 19.835258 -17.685625, 19.776364 -17.944673, 19.71738 -18.203702, 19.658304 -18.462713, 19.599135 -18.721706, 19.539869 -18.98068, 19.480505 -19.239635, 19.421043 -19.49857, 19.361492 -19.757486, 19.301836 -20.016383, 19.242074 -20.275259, 19.182202 -20.534115, 19.122219 -20.79295, 19.062123 -21.051764, 19.00191 -21.310558, 18.941589 -21.56933, 18.881154 -21.828081, 18.820597 -22.08681, 18.759914 -22.345516, 18.699104 -22.604201, 18.638164 -22.862862, 18.577091 -23.121501, 18.515882 -23.380117, 18.454553 -23.638709, 18.393085 -23.897278, 18.331474 -24.155822, 18.269718 -24.414343, 18.207814 -24.672839, 18.145758 -24.93131, 18.08355 -25.189757, 18.021191 -25.448178, 17.958686 -25.706573, 17.89602 -25.964943, 17.833189 -26.223287, 17.77019 -26.481605, 17.707021 -26.739896, 17.643679 -26.99816, 17.58016 -27.256396, 17.516475 -27.514606, 17.452614 -27.772788, 17.388568 -28.030942, 17.324333 -28.289067, 17.259906 -28.547164, 17.195283 -28.805232, 17.130461 -29.063272, 17.065439 -29.321281, 17.000232 -29.579261, 16.934816 -29.837211, 16.869187 -30.095131, 13.933539 -29.491417, 14.006817 -29.234285, 14.07979 -28.97711, 14.152462 -28.719894, 14.224848 -28.462637, 14.296942 -28.20534, 14.368748 -27.948002, 14.44027 -27.690625, 14.511512 -27.433209, 14.582478 -27.175754, 14.653172 -26.918261, 14.723602 -26.66073, 14.793774 -26.403161, 14.863686 -26.145554, 14.933341 -25.887912, 15.002743 -25.630233, 15.071896 -25.372518, 15.140804 -25.114767, 15.209469 -24.856982, 15.277902 -24.599162, 15.346103 -24.341307, 15.414071 -24.083418, 15.481812 -23.825496, 15.549327 -23.567541, 15.616621 -23.309552, 15.683696 -23.051532, 15.750557 -22.793479, 15.817212 -22.535394, 15.883658 -22.277278, 15.949898 -22.019131, 16.015935 -21.760953, 16.081772 -21.502745, 16.147412 -21.244507, 16.212859 -20.98624, 16.278117 -20.727943, 16.34319 -20.469617, 16.408077 -20.211262, 16.472782 -19.952879, 16.537306 -19.694469, 16.601654 -19.436031, 16.665827 -19.177566, 16.729828 -18.919074, 16.793664 -18.660555, 16.857334 -18.402009, 16.92084 -18.143438, 16.984185 -17.884842, 17.04737 -17.62622, 17.110399 -17.367573, 17.173274 -17.108902, 17.235998 -16.850207, 17.298576 -16.591487, 17.361007 -16.332744, 17.423293 -16.073977, 17.485437 -15.815187, 17.547442 -15.556375, 17.609309 -15.297541, 17.67104 -15.038684, 17.732641 -14.779806, 17.794111 -14.520905, 17.855453 -14.261984, 17.916669 -14.003042, 17.97776 -13.744079, 18.038729 -13.485097, 18.099578 -13.226094, 18.160309 -12.967072, 18.220926 -12.70803, 18.28143 -12.448969, 18.341822 -12.18989, 18.402103 -11.930792, 18.462278 -11.671676, 18.522346 -11.412542, 18.582311 -11.153391, 18.642175 -10.894222, 18.70194 -10.635036, 18.761606 -10.375833, 18.821177 -10.116614, 18.880653 -9.857379999999999, 18.940038 -9.598129, 18.999332 -9.338863, 19.058538 -9.079582, 19.117658 -8.820285999999999, 19.176693 -8.560974, 19.235645 -8.301648999999999, 19.294515 -8.042308999999999, 19.353307 -7.782956, 19.412021 -7.523589, 19.47066 -7.264209, 19.529225 -7.004817, 19.587717 -6.745411, 19.646138 -6.485993, 19.704491 -6.226562, 19.762777 -5.96712, 19.820998 -5.707667, 19.879156 -5.448202, 19.937252 -5.188727, 19.995287 -4.929241, 20.053262 -4.669743, 20.111181 -4.410236, 20.169045 -4.150719, 20.226856 -3.891193, 20.284615 -3.631657, 20.342325 -3.372112, 20.399986 -3.112559, 20.457598 -2.852997, 20.515164 -2.593426, 20.572687 -2.333848, 20.630168 -2.074262, 20.687609 -1.814669, 20.745012 -1.555068, 20.802378 -1.295461, 20.859708 -1.035848, 20.917001 -0.776227, 20.974262 -0.5165999999999999, 21.031493 -0.256968, 21.088694 0.002669, 21.145869 0.262312, 21.203018 0.52196, 21.260143 0.781612, 21.317242 1.041269, 21.374319 1.30093, 21.431376 1.560595, 21.488415 1.820264, 21.545438 2.079936, 21.602447 2.339611, 21.659443 2.599288, 21.716428 2.858968, 21.773396 3.118651, 21.830357 3.378336, 21.88731 3.638023, 21.944259 3.897711, 22.001204 4.1574, 22.058147 4.41709, 22.115091 4.67678, 22.172032 4.936472, 22.228973 5.196163, 22.285917 5.455855, 22.342868 5.715546, 22.399826 5.975237, 22.456793 6.234926, 22.513772 6.494614, 22.570763 6.754301, 22.627762 7.013986, 22.684774 7.27367, 22.741804 7.533351, 22.798852 7.79303, 22.855922 8.052706000000001, 22.913013 8.312379, 22.970129 8.572048000000001, 23.027268 8.831714, 23.084427 9.091377, 23.141614 9.351036000000001, 23.198832 9.61069, 23.256082 9.870340000000001, 23.313366 10.129985, 23.370685 10.389624, 23.428042 10.649258, 23.485432 10.908887, 23.542858 11.168511, 23.600325 11.428128, 23.657837 11.687738, 23.715395 11.947342, 23.773 12.206939, 23.830654 12.466529, 23.88836 12.726111, 23.946108 12.985686, 24.003909 13.245253, 24.061767 13.504812, 24.119682 13.764362, 24.177658 14.023904, 24.235696 14.283436, 24.293797 14.542959, 24.351961 14.802473, 24.410182 15.061978, 24.468473 15.321472, 24.526835 15.580956, 24.58527 15.840429, 24.643781 16.099892, 24.702368 16.359343, 24.761034 16.618783, 24.819772 16.878211, 24.878588 17.137628, 24.937489 17.397033, 24.996477 17.656426, 25.055554 17.915805, 25.114722 18.175172, 25.173983 18.434525, 25.233338 18.693865, 25.292777 18.953192, 25.352315 19.212505, 25.411954 19.471804, 25.471697 19.731088, 25.531547 19.990357, 25.591504 20.249611, 25.651572 20.508849, 25.711746 20.768073, 25.772026 21.027281, 25.832422 21.286473, 25.892939 21.545648, 25.953577 21.804807, 26.01434 22.063948, 28.731891 21.484659))', 'name': 'footprint'},
                ],
                "style": {
                    "stroke_color": "red",
                    "fill_color": "rgba(255,0,0,0.3)",
                }
            },

        ]

        returned_map_l1c_missing_tooltip_info = self.driver.execute_script('return missing_segments_l1c;')
        assert map_l1c_missing_tooltip_info == returned_map_l1c_missing_tooltip_info
        
        planned_imaging_processing_completeness_l2a = self.query_eboa.get_events(gauge_names ={"filter": "PLANNED_IMAGING_PROCESSING_COMPLETENESS_L2A", "op":"=="})
        
        map_l2a_missing_tooltip_info = [
            {
                "id": str(planned_imaging_processing_completeness_l2a[0].event_uuid),
                "tooltip": "<table border='1'>" + 
                "<tr><td>UUID</td><td>" + str(planned_imaging_processing_completeness_l2a[0].event_uuid) + "</td></tr>" + 
                "<tr><td>Satellite</td><td>S2A</td></tr><tr>" + 
                "<td>Orbit</td><td>16077</td></tr>" + 
                "<tr><td>Datastrip</td><td>N/A</td></tr>" + 
                "<tr><td>Status</td><td><a class='bold-red' href='/views/dhus-completeness-by-datatake/" + str(planned_imaging_correction[0].event_uuid) + "'>MISSING ACQUISITION</a></td></tr>" + 
                "<tr><td>Start</td><td>2018-07-21T08:36:08.255634</td></tr>" + 
                "<tr><td>Stop</td><td>2018-07-21T09:08:50.195941</td></tr>" + 
                "<tr><td>Duration(m)</td><td>32.699</td></tr>" + 
                "<tr><td>Plan file</td><td>S2A_NPPF.EOF</td></tr>" + 
                '<tr><td>Planned imaging</td><td><a href="/eboa_nav/query-event-links/' + str(planned_cut_imaging[0].event_uuid) + '"><i class="fa fa-link"></i></a></td></tr>' + 
                "</table>",
                "geometries": [
                        {'value': 'POLYGON ((101.528355 79.738353, 98.393294 79.554394, 95.372456 79.34158499999999, 92.47433599999999 79.101615, 89.704358 78.83623299999999, 87.065195 78.547203, 84.557168 78.236266, 82.178646 77.905114, 79.92652200000001 77.555353, 77.796533 77.188502, 75.78361 76.80598500000001, 73.882164 76.409121, 72.086314 75.999127, 70.390066 75.577118, 68.787451 75.144115, 67.27263000000001 74.701048, 65.839963 74.248763, 64.484058 73.788026, 63.199803 73.319535, 61.98238 72.84392099999999, 60.82727 72.361756, 59.730252 71.87356, 58.687393 71.379802, 57.69504 70.880909, 56.749802 70.377269, 55.848538 69.86923400000001, 54.988339 69.357125, 54.166514 68.841234, 53.380572 68.321826, 52.628211 67.799145, 51.907284 67.273414, 51.215837 66.74483499999999, 50.552046 66.21359200000001, 49.914221 65.679856, 49.300795 65.14378499999999, 48.710317 64.605521, 48.141439 64.06519900000001, 47.592911 63.522938, 47.063571 62.978854, 46.552336 62.433049, 46.058203 61.88562, 45.580233 61.336656, 45.117553 60.786241, 44.669348 60.23445, 44.234857 59.681356, 43.813369 59.127025, 43.404219 58.571519, 43.006785 58.014895, 42.620482 57.457208, 42.244763 56.898507, 41.879116 56.33884, 41.523059 55.778251, 41.176136 55.216781, 40.837913 54.65447, 40.507999 54.091353, 40.186016 53.527465, 39.871607 52.962837, 39.564437 52.3975, 39.264186 51.831483, 38.970556 51.264812, 38.683263 50.697513, 38.402038 50.12961, 38.126626 49.561125, 37.856788 48.992081, 37.592294 48.422497, 37.332928 47.852393, 37.078485 47.281788, 36.828768 46.710698, 36.583593 46.139141, 36.342781 45.567132, 36.106166 44.994686, 35.873587 44.421818, 35.644892 43.848541, 35.419934 43.274869, 35.198576 42.700813, 34.980684 42.126386, 34.766127 41.5516, 34.554789 40.976465, 34.346555 40.400992, 34.141315 39.825191, 33.938963 39.249071, 33.739397 38.672642, 33.542521 38.095913, 33.348241 37.518892, 33.156469 36.941588, 32.967118 36.364009, 32.780106 35.786163, 32.595355 35.208056, 32.412788 34.629697, 32.232333 34.051093, 32.053919 33.472249, 31.877479 32.893174, 31.702948 32.313873, 31.530263 31.734352, 31.359365 31.154617, 31.190194 30.574676, 31.022695 29.994532, 30.856813 29.414192, 30.692496 28.833661, 30.52969 28.252945, 30.368351 27.672049, 30.208431 27.090977, 30.049883 26.509735, 29.892665 25.928328, 29.736733 25.34676, 29.582046 24.765036, 29.428563 24.183161, 29.276246 23.601139, 29.125056 23.018975, 28.974958 22.436672, 28.825915 21.854236, 28.677892 21.27167, 28.530857 20.688979, 28.384776 20.106167, 28.239618 19.523237, 28.095351 18.940194, 27.951945 18.357042, 27.809371 17.773784, 27.667601 17.190425, 27.526605 16.606967, 27.386357 16.023415, 27.24683 15.439774, 27.107997 14.856045, 26.969834 14.272233, 26.832316 13.688341, 26.695417 13.104374, 26.559115 12.520334, 26.423385 11.936225, 26.288205 11.352051, 26.153552 10.767815, 26.019404 10.18352, 25.885738 9.599170000000001, 25.752535 9.014768, 25.619771 8.430318, 25.487428 7.845822, 25.355483 7.261285, 25.223917 6.676709, 25.092711 6.092098, 24.961844 5.507454, 24.831296 4.922782, 24.701049 4.338085, 24.571084 3.753365, 24.441382 3.168625, 24.311923 2.58387, 24.182691 1.999102, 24.053667 1.414324, 23.924832 0.8295400000000001, 23.796168 0.244752, 23.667656 -0.340037, 23.53928 -0.924823, 23.411021 -1.509603, 23.282861 -2.094374, 23.154782 -2.679134, 23.026766 -3.263878, 22.898797 -3.848605, 22.770855 -4.433311, 22.642923 -5.017993, 22.514983 -5.602648, 22.387017 -6.187273, 22.259008 -6.771866, 22.130936 -7.356423, 22.002785 -7.940941, 21.874535 -8.525416999999999, 21.746168 -9.109848, 21.617666 -9.694233000000001, 21.489009 -10.278566, 21.36018 -10.862846, 21.231159 -11.44707, 21.10193 -12.031235, 20.972471 -12.615337, 20.84276 -13.199375, 20.712779 -13.783345, 20.582507 -14.367243, 20.451923 -14.951069, 20.321007 -15.534817, 20.189737 -16.118486, 20.058092 -16.702073, 19.926048 -17.285575, 19.793585 -17.868989, 19.660679 -18.452311, 19.527306 -19.03554, 19.393443 -19.618672, 19.259065 -20.201704, 19.124148 -20.784634, 18.988665 -21.367458, 18.852591 -21.950174, 18.7159 -22.532779, 18.578563 -23.115269, 18.440552 -23.697642, 18.301839 -24.279894, 18.162396 -24.862023, 18.022195 -25.444026, 17.8812 -26.0259, 17.73938 -26.607641, 17.596701 -27.189247, 17.453128 -27.770714, 17.308628 -28.352039, 17.163163 -28.933219, 17.016695 -29.514251, 16.869187 -30.095131, 13.933539 -29.491417, 14.098138 -28.912293, 14.261223 -28.33296, 14.422844 -27.753423, 14.583047 -27.173686, 14.741878 -26.593755, 14.89938 -26.013634, 15.055598 -25.433327, 15.210571 -24.852841, 15.36434 -24.272178, 15.516947 -23.691343, 15.668426 -23.11034, 15.818815 -22.529175, 15.968148 -21.94785, 16.116461 -21.36637, 16.263787 -20.784739, 16.410159 -20.202961, 16.555607 -19.62104, 16.700165 -19.038979, 16.843861 -18.456783, 16.986725 -17.874455, 17.128786 -17.292, 17.270072 -16.70942, 17.41061 -16.126719, 17.550427 -15.543901, 17.689548 -14.96097, 17.828001 -14.377929, 17.965808 -13.794781, 18.102996 -13.211531, 18.239588 -12.628181, 18.375607 -12.044735, 18.511076 -11.461196, 18.646018 -10.877568, 18.780456 -10.293853, 18.914411 -9.710056, 19.047904 -9.12618, 19.180957 -8.542228, 19.31359 -7.958203, 19.445824 -7.374108, 19.577679 -6.789947, 19.709176 -6.205723, 19.840332 -5.62144, 19.971169 -5.037099, 20.101706 -4.452706, 20.231961 -3.868262, 20.361954 -3.28377, 20.491703 -2.699235, 20.621226 -2.114659, 20.750543 -1.530045, 20.879671 -0.945397, 21.008628 -0.360717, 21.137434 0.223991, 21.266105 0.808725, 21.39466 1.393481, 21.523116 1.978257, 21.651492 2.563048, 21.779804 3.147853, 21.908071 3.732668, 22.03631 4.31749, 22.164541 4.902317, 22.29278 5.487144, 22.421046 6.071969, 22.549357 6.656789, 22.677731 7.241602, 22.806186 7.826403, 22.934741 8.41119, 23.063414 8.995960999999999, 23.192224 9.580711000000001, 23.321189 10.165439, 23.45033 10.750141, 23.579663 11.334813, 23.70921 11.919454, 23.83899 12.504061, 23.969023 13.088629, 24.099328 13.673157, 24.229927 14.257641, 24.36084 14.842078, 24.492088 15.426466, 24.623693 16.010801, 24.755672 16.59508, 24.888051 17.179302, 25.020852 17.763461, 25.1541 18.347556, 25.287817 18.931583, 25.422028 19.51554, 25.556756 20.099424, 25.692028 20.68323, 25.827869 21.266957, 25.964305 21.850601, 26.101363 22.43416, 26.23907 23.017629, 26.377456 23.601007, 26.516548 24.184289, 26.656377 24.767473, 26.796974 25.350556, 26.93837 25.933533, 27.080597 26.516404, 27.223689 27.099162, 27.367681 27.681807, 27.512607 28.264333, 27.658505 28.846738, 27.805411 29.429019, 27.95336 30.011172, 28.102397 30.593193, 28.252563 31.175079, 28.403902 31.756827, 28.556459 32.338431, 28.71028 32.91989, 28.865413 33.501198, 29.021907 34.082352, 29.179815 34.663347, 29.339189 35.244181, 29.500086 35.824848, 29.662563 36.405344, 29.82668 36.985665, 29.9925 37.565806, 30.160087 38.145763, 30.32951 38.72553, 30.500839 39.305103, 30.674149 39.884477, 30.849515 40.463646, 31.027018 41.042604, 31.206743 41.621347, 31.388777 42.199868, 31.573211 42.77816, 31.760133 43.356219, 31.94965 43.934037, 32.14187 44.511607, 32.336903 45.088922, 32.534866 45.665975, 32.73588 46.242756, 32.940074 46.819259, 33.147583 47.395475, 33.358548 47.971394, 33.573118 48.547006, 33.791452 49.122303, 34.013715 49.697273, 34.240083 50.271906, 34.470741 50.846188, 34.705884 51.420109, 34.94572 51.993655, 35.190468 52.566812, 35.440361 53.139565, 35.695644 53.711899, 35.95658 54.283798, 36.223446 54.855243, 36.496539 55.426215, 36.776173 55.996696, 37.062667 56.566664, 37.356393 57.136096, 37.657733 57.704968, 37.967096 58.273253, 38.284919 58.840923, 38.611667 59.407948, 38.947843 59.974297, 39.293984 60.539933, 39.650668 61.10482, 40.018516 61.668918, 40.398198 62.232182, 40.790436 62.794566, 41.196009 63.356018, 41.61576 63.916483, 42.050602 64.47590099999999, 42.501524 65.034205, 42.969599 65.591324, 43.455996 66.14718000000001, 43.961985 66.701688, 44.488952 67.25475299999999, 45.03841 67.806273, 45.612014 68.35613499999999, 46.211575 68.904214, 46.839057 69.45037499999999, 47.496664 69.99446399999999, 48.186803 70.536312, 48.91212 71.075732, 49.675538 71.612514, 50.480285 72.14642600000001, 51.329936 72.677209, 52.228449 73.20457, 53.180217 73.728182, 54.190117 74.247676, 55.263568 74.762637, 56.406592 75.272594, 57.625885 75.77701399999999, 58.928884 76.27529199999999, 60.323843 76.766739, 61.819901 77.25057, 63.427147 77.725889, 65.15666299999999 78.19167400000001, 67.02054699999999 78.646756, 69.03187800000001 79.0898, 71.204616 79.519285, 73.553397 79.93347900000001, 76.093174 80.330421, 78.83862000000001 80.707914, 81.803448 81.06348699999999, 84.999177 81.394426, 88.433741 81.69779, 92.109756 81.970454, 96.02262 82.209198, 101.528355 79.738353))', 'name': 'footprint'},
                ],
                "style": {
                    "stroke_color": "red",
                    "fill_color": "rgba(255,0,0,0.3)",
                }
            },
        ]

        returned_map_l2a_missing_tooltip_info = self.driver.execute_script('return missing_segments_l2a;')
        assert map_l2a_missing_tooltip_info == returned_map_l2a_missing_tooltip_info

        # Check map complete segments tooltip
        planned_imaging_processing_completeness_l1c = self.query_eboa.get_events(gauge_names ={"filter": "PLANNED_IMAGING_PROCESSING_COMPLETENESS_L1C", "op":"=="},
                                                                                start_filters =[{"date": "2018-07-21T08:52:29", "op":"=="}],
                                                                                stop_filters = [{"date": "2018-07-21T08:54:19", "op": "=="}])
        msi_l1c_ds_mps = self.query_eboa.get_explicit_refs(explicit_refs ={"filter": "S2A_OPER_MSI_L1C_DS_MPS__20180721T104253_S20180721T085229_N02.06", "op":"=="})

        map_l1c_complete_tooltip_info = [
            {
                "id": str(planned_imaging_processing_completeness_l1c[0].event_uuid),
                "tooltip": "<table border='1'>" + 
                "<tr><td>UUID</td><td>" + str(planned_imaging_processing_completeness_l1c[0].event_uuid) + "</td></tr>" + 
                "<tr><td>Satellite</td><td>S2A</td></tr><tr>" + 
                "<td>Orbit</td><td>16077</td></tr>" + 
                "<tr><td>Datastrip</td><td><a href='/eboa_nav/query-er-links/" + str(msi_l1c_ds_mps[0].explicit_ref_uuid) + "'>S2A_OPER_MSI_L1C_DS_MPS__20180721T104253_S20180721T085229_N02.06</a></td></tr>" +  
                "<tr><td>Status</td><td><a class='bold-orange' href='/views/dhus-completeness-by-datatake/" + str(planned_imaging_correction[0].event_uuid) + "'>INCOMPLETE DISSEMINATION</a></td></tr>" + 
                "<tr><td>Start</td><td>2018-07-21T08:52:29</td></tr>" + 
                "<tr><td>Stop</td><td>2018-07-21T08:54:19</td></tr>" + 
                "<tr><td>Duration(m)</td><td>1.833</td></tr>" + 
                "<tr><td>Plan file</td><td>S2A_NPPF.EOF</td></tr>" + 
                '<tr><td>Planned imaging</td><td><a href="/eboa_nav/query-event-links/' + str(planned_cut_imaging[0].event_uuid) + '"><i class="fa fa-link"></i></a></td></tr>' + 
                "</table>",
                "geometries": [
                        {'value': 'POLYGON ((30.452534 27.975823, 30.392614 27.75977, 30.332896 27.543693, 30.273379 27.327592, 30.214044 27.111468, 30.1549 26.89532, 30.095949 26.679148, 30.037187 26.462953, 29.978597 26.246736, 29.920192 26.030496, 29.861972 25.814233, 29.803925 25.597949, 29.746048 25.381643, 29.688348 25.165315, 29.630823 24.948965, 29.573458 24.732595, 29.51626 24.516204, 29.45923 24.299792, 29.402366 24.083359, 29.345652 23.866907, 29.289101 23.650434, 29.23271 23.433942, 29.176471 23.21743, 29.12038 23.000899, 29.064444 22.784349, 29.008661 22.56778, 28.953019 22.351192, 28.897521 22.134586, 28.842171 21.917962, 28.786966 21.701319, 28.731891 21.484659, 26.01434 22.063948, 26.065337 22.280978, 26.1164 22.497996, 26.16756 22.715002, 26.218822 22.931994, 26.270178 23.148974, 26.321611 23.365942, 26.37315 23.582897, 26.424797 23.799838, 26.476531 24.016766, 26.52836 24.233681, 26.580303 24.450582, 26.632359 24.667468, 26.684496 24.884342, 26.736747 25.101201, 26.789118 25.318046, 26.841599 25.534876, 26.894174 25.751692, 26.946873 25.968493, 26.999698 26.185279, 27.052627 26.40205, 27.10567 26.618806, 27.158843 26.835546, 27.212151 27.052269, 27.265555 27.268979, 27.319093 27.485672, 27.372771 27.702348, 27.426579 27.919008, 27.480497 28.135652, 27.53456 28.35228, 27.58877 28.568889, 30.452534 27.975823))', 'name': 'footprint'},
                ],
                "style": {
                    "stroke_color": "orange",
                    "fill_color": "rgba(255,165,0,0.3)",
                }
            },
            {
                "id": "S2A_OPER_MSI_L1C_TL_MPS__20180721T104253_A016077_T35QMF_N02.06",
                "tooltip": "<table border='1'>" + 
                "<tr><td>Tile</td><td><a href='/eboa_nav/query-er-by-name/S2A_OPER_MSI_L1C_TL_MPS__20180721T104253_A016077_T35QMF_N02.06'>S2A_OPER_MSI_L1C_TL_MPS__20180721T104253_A016077_T35QMF_N02.06</a></td></tr>" + 
                "<tr><td>Satellite</td><td>S2A</td></tr>" + 
                "<tr><td>Orbit</td><td>16077</td></tr>" + 
                "<tr><td>Datastrip</td><td><a href='/eboa_nav/query-er/" + str(msi_l1c_ds_mps[0].explicit_ref_uuid) + "'>S2A_OPER_MSI_L1C_DS_MPS__20180721T104253_S20180721T085229_N02.06</a></td></tr>" + 
                "<tr><td>Status</td><td><span class='bold-red'>MISSING DHUS DISSEMINATION</span></td></tr>" + 
                "<tr><td>Plan file</td><td>S2A_NPPF.EOF</td></tr>" + 
                '<tr><td>Planned imaging</td><td><a href="/eboa_nav/query-event-links/' + str(planned_cut_imaging[0].event_uuid) + '"><i class="fa fa-link"></i></a></td></tr>' +  
                "</table>",
                "geometries": [
                        {'value': 'POLYGON ((26.09894133 22.5159429, 26.09894133 22.5159429, 26.09894133 22.5159429, 27.09490348 22.51865756, 27.09559995 23.51052669, 26.33407919 23.50836496, 26.33162644 23.49803796, 26.29639897 23.34992475, 26.26124401 23.20172944, 26.22572118 23.05360261, 26.19075293 22.90526669, 26.15590511 22.75680757, 26.1208153 22.60840942, 26.09894133 22.5159429, 26.09894133 22.5159429))', 'name': 'footprint'},
                ],
                "style": {
                    "stroke_color": "red",
                    "fill_color": "rgba(255,0,0,0.3)",
                }
            },

        ]

        returned_map_l1c_complete_tooltip_info = self.driver.execute_script('return complete_segments_l1c;')
        assert map_l1c_complete_tooltip_info == returned_map_l1c_complete_tooltip_info

        map_l2a_complete_tooltip_info = []

        returned_map_l2a_complete_tooltip_info = self.driver.execute_script('return complete_segments_l2a;')
        assert map_l2a_complete_tooltip_info == returned_map_l2a_complete_tooltip_info

        # Check whether the timeliness is displayed
        timeline_section = self.driver.find_element_by_id("dhus-completeness-e2e-timeline-section")

        condition = timeline_section.is_displayed()

        assert condition is True

        l1c_timeline_section = self.driver.find_element_by_id("dhus-completeness-l1c-e2e-timeline-section")

        condition = l1c_timeline_section.is_displayed()

        assert condition is True

        l2a_timeline_section = self.driver.find_element_by_id("dhus-completeness-l2a-e2e-timeline-section")

        condition = l2a_timeline_section.is_displayed()

        assert condition is True

        # Check timeliness tooltip
        timeliness_l1c_tooltip_info = [
            {
                "id": str(msi_l1c_ds_mps[0].explicit_ref_uuid),
                "group": "S2A",
                "x": "2018-07-21T08:52:29",
                "y": "1206891.184",
                "tooltip": "<table border='1'>" + 
                "<tr><td>Datatake</td><td>GS2A_20180721T083601_016077_N02.06</td></tr>" + 
                "<tr><td>Datastrip</td><td><a href='/eboa_nav/query-er/" + str(msi_l1c_ds_mps[0].explicit_ref_uuid) + "'>S2A_OPER_MSI_L1C_DS_MPS__20180721T104253_S20180721T085229_N02.06</a></td></tr>" + 
                "<tr><td>Satellite</td><td>S2A</td></tr>" + 
                "<tr><td>Orbit</td><td>16077</td></tr>" + 
                "<tr><td>Mean (sensing stop - publication in DHUS) of related tiles (m)</td><td>1206891.184</td></tr>" + 
                "<tr><td>Plan file</td><td>S2A_NPPF.EOF</td></tr>" + 
                '<tr><td>Planned imaging</td><td><a href="/eboa_nav/query-event-links/' + str(planned_cut_imaging[0].event_uuid) + '"><i class="fa fa-link"></i></a></td></tr>' +  
                "</table>"
            },
        ]

        returned_timeliness_l1c_tooltip_info = self.driver.execute_script('return e2e_timeliness_tiles_published_in_dhus_l1c;')
        assert timeliness_l1c_tooltip_info == returned_timeliness_l1c_tooltip_info
        
        timeliness_l2a_tooltip_info = []

        returned_timeliness_l2a_tooltip_info = self.driver.execute_script('return e2e_timeliness_tiles_published_in_dhus_l2a;')
        assert timeliness_l2a_tooltip_info == returned_timeliness_l2a_tooltip_info

        # Missing dissemination table
        missing_table = self.driver.find_element_by_id("dhus-completeness-list-table-MISSING")

        # Row 1
        level = missing_table.find_element_by_xpath("tbody/tr[1]/td[1]")

        assert level.text == "L1C"

        satellite = missing_table.find_element_by_xpath("tbody/tr[1]/td[2]")

        assert satellite.text == "S2A"

        orbit = missing_table.find_element_by_xpath("tbody/tr[1]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = missing_table.find_element_by_xpath("tbody/tr[1]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:54:19"

        stop_datastrip = missing_table.find_element_by_xpath("tbody/tr[1]/td[5]")

        assert stop_datastrip.text == "2018-07-21T09:08:50.195941"

        datastrip = missing_table.find_element_by_xpath("tbody/tr[1]/td[6]")

        assert datastrip.text == "N/A"

        status = missing_table.find_element_by_xpath("tbody/tr[1]/td[7]")

        assert status.text == "MISSING ACQUISITION"

        tiles = missing_table.find_element_by_xpath("tbody/tr[1]/td[8]")

        assert tiles.text == "N/A"

        tiles_dam = missing_table.find_element_by_xpath("tbody/tr[1]/td[9]")

        assert tiles_dam.text == "N/A"

        tiles_dhus = missing_table.find_element_by_xpath("tbody/tr[1]/td[10]")

        assert tiles_dhus.text == "N/A"

        tiles_published_dhus = missing_table.find_element_by_xpath("tbody/tr[1]/td[11]")

        assert tiles_published_dhus.text == "N/A"

        mean_time_dhus = missing_table.find_element_by_xpath("tbody/tr[1]/td[12]")

        assert mean_time_dhus.text == "N/A"

        mean_time_dhus_publication = missing_table.find_element_by_xpath("tbody/tr[1]/td[13]")

        assert mean_time_dhus_publication.text == "N/A"

        datatake = missing_table.find_element_by_xpath("tbody/tr[1]/td[14]")

        assert datatake.text == "N/A"

        start_msi = missing_table.find_element_by_xpath("tbody/tr[1]/td[15]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = missing_table.find_element_by_xpath("tbody/tr[1]/td[16]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

        # Row 2
        level = missing_table.find_element_by_xpath("tbody/tr[2]/td[1]")

        assert level.text == "L1C"

        satellite = missing_table.find_element_by_xpath("tbody/tr[2]/td[2]")

        assert satellite.text == "S2A"

        orbit = missing_table.find_element_by_xpath("tbody/tr[2]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = missing_table.find_element_by_xpath("tbody/tr[2]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:52:29"

        stop_datastrip = missing_table.find_element_by_xpath("tbody/tr[2]/td[5]")

        assert stop_datastrip.text == "2018-07-21T08:54:19"

        datastrip = missing_table.find_element_by_xpath("tbody/tr[2]/td[6]")

        assert datastrip.text == "S2A_OPER_MSI_L1C_DS_MPS__20180721T104253_S20180721T085229_N02.06"

        status = missing_table.find_element_by_xpath("tbody/tr[2]/td[7]")

        assert status.text == "MISSING DAM PUBLICATION"

        tiles = missing_table.find_element_by_xpath("tbody/tr[2]/td[8]")

        assert tiles.text == "4"

        tiles_dam = missing_table.find_element_by_xpath("tbody/tr[2]/td[9]")

        assert tiles_dam.text == "3"

        tiles_dhus = missing_table.find_element_by_xpath("tbody/tr[2]/td[10]")

        assert tiles_dhus.text == "2"

        tiles_published_dhus = missing_table.find_element_by_xpath("tbody/tr[2]/td[11]")

        assert tiles_published_dhus.text == "1"

        mean_time_dhus = missing_table.find_element_by_xpath("tbody/tr[2]/td[12]")

        assert mean_time_dhus.text == "225.797"

        mean_time_dhus_publication = missing_table.find_element_by_xpath("tbody/tr[2]/td[13]")

        assert mean_time_dhus_publication.text == "1206891.184"

        datatake = missing_table.find_element_by_xpath("tbody/tr[2]/td[14]")

        assert datatake.text == "GS2A_20180721T083601_016077_N02.06"

        start_msi = missing_table.find_element_by_xpath("tbody/tr[2]/td[15]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = missing_table.find_element_by_xpath("tbody/tr[2]/td[16]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

        # Row 3
        level = missing_table.find_element_by_xpath("tbody/tr[3]/td[1]")

        assert level.text == "L1C"

        satellite = missing_table.find_element_by_xpath("tbody/tr[3]/td[2]")

        assert satellite.text == "S2A"

        orbit = missing_table.find_element_by_xpath("tbody/tr[3]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = missing_table.find_element_by_xpath("tbody/tr[3]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:36:08.255634"

        stop_datastrip = missing_table.find_element_by_xpath("tbody/tr[3]/td[5]")

        assert stop_datastrip.text == "2018-07-21T08:52:29"

        datastrip = missing_table.find_element_by_xpath("tbody/tr[3]/td[6]")

        assert datastrip.text == "N/A"

        status = missing_table.find_element_by_xpath("tbody/tr[3]/td[7]")

        assert status.text == "MISSING ACQUISITION"

        tiles = missing_table.find_element_by_xpath("tbody/tr[3]/td[8]")

        assert tiles.text == "N/A"

        tiles_dam = missing_table.find_element_by_xpath("tbody/tr[3]/td[9]")

        assert tiles_dam.text == "N/A"

        tiles_dhus = missing_table.find_element_by_xpath("tbody/tr[3]/td[10]")

        assert tiles_dhus.text == "N/A"

        tiles_published_dhus = missing_table.find_element_by_xpath("tbody/tr[3]/td[11]")

        assert tiles_published_dhus.text == "N/A"

        mean_time_dhus = missing_table.find_element_by_xpath("tbody/tr[3]/td[12]")

        assert mean_time_dhus.text == "N/A"

        mean_time_dhus_publication = missing_table.find_element_by_xpath("tbody/tr[3]/td[13]")

        assert mean_time_dhus_publication.text == "N/A"

        datatake = missing_table.find_element_by_xpath("tbody/tr[3]/td[14]")

        assert datatake.text == "N/A"

        start_msi = missing_table.find_element_by_xpath("tbody/tr[3]/td[15]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = missing_table.find_element_by_xpath("tbody/tr[3]/td[16]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

        # Row 4
        level = missing_table.find_element_by_xpath("tbody/tr[4]/td[1]")

        assert level.text == "L2A"

        satellite = missing_table.find_element_by_xpath("tbody/tr[4]/td[2]")

        assert satellite.text == "S2A"

        orbit = missing_table.find_element_by_xpath("tbody/tr[4]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = missing_table.find_element_by_xpath("tbody/tr[4]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:36:08.255634"

        stop_datastrip = missing_table.find_element_by_xpath("tbody/tr[4]/td[5]")

        assert stop_datastrip.text == "2018-07-21T09:08:50.195941"

        datastrip = missing_table.find_element_by_xpath("tbody/tr[4]/td[6]")

        assert datastrip.text == "N/A"

        status = missing_table.find_element_by_xpath("tbody/tr[4]/td[7]")

        assert status.text == "MISSING ACQUISITION"

        tiles = missing_table.find_element_by_xpath("tbody/tr[4]/td[8]")

        assert tiles.text == "N/A"

        tiles_dam = missing_table.find_element_by_xpath("tbody/tr[4]/td[9]")

        assert tiles_dam.text == "N/A"

        tiles_dhus = missing_table.find_element_by_xpath("tbody/tr[4]/td[10]")

        assert tiles_dhus.text == "N/A"

        tiles_published_dhus = missing_table.find_element_by_xpath("tbody/tr[4]/td[11]")

        assert tiles_published_dhus.text == "N/A"

        mean_time_dhus = missing_table.find_element_by_xpath("tbody/tr[4]/td[12]")

        assert mean_time_dhus.text == "N/A"

        mean_time_dhus_publication = missing_table.find_element_by_xpath("tbody/tr[4]/td[13]")

        assert mean_time_dhus_publication.text == "N/A"

        datatake = missing_table.find_element_by_xpath("tbody/tr[4]/td[14]")

        assert datatake.text == "N/A"

        start_msi = missing_table.find_element_by_xpath("tbody/tr[4]/td[15]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = missing_table.find_element_by_xpath("tbody/tr[4]/td[16]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

        # Data availability table
        complete_table = self.driver.find_element_by_id("dhus-completeness-list-table-COMPLETE")

        # Row 1
        level = complete_table.find_element_by_xpath("tbody/tr[1]/td[1]")

        assert level.text == "L1C"

        satellite = complete_table.find_element_by_xpath("tbody/tr[1]/td[2]")

        assert satellite.text == "S2A"

        orbit = complete_table.find_element_by_xpath("tbody/tr[1]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = complete_table.find_element_by_xpath("tbody/tr[1]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:54:19"

        stop_datastrip = complete_table.find_element_by_xpath("tbody/tr[1]/td[5]")

        assert stop_datastrip.text == "2018-07-21T09:08:50.195941"

        datastrip = complete_table.find_element_by_xpath("tbody/tr[1]/td[6]")

        assert datastrip.text == "N/A"

        status = complete_table.find_element_by_xpath("tbody/tr[1]/td[7]")

        assert status.text == "MISSING ACQUISITION"

        tiles = complete_table.find_element_by_xpath("tbody/tr[1]/td[8]")

        assert tiles.text == "N/A"

        tiles_dam = complete_table.find_element_by_xpath("tbody/tr[1]/td[9]")

        assert tiles_dam.text == "N/A"

        tiles_dhus = complete_table.find_element_by_xpath("tbody/tr[1]/td[10]")

        assert tiles_dhus.text == "N/A"

        tiles_published_dhus = complete_table.find_element_by_xpath("tbody/tr[1]/td[11]")

        assert tiles_published_dhus.text == "N/A"

        mean_time_dhus = complete_table.find_element_by_xpath("tbody/tr[1]/td[12]")

        assert mean_time_dhus.text == "N/A"

        mean_time_dhus_publication = complete_table.find_element_by_xpath("tbody/tr[1]/td[13]")

        assert mean_time_dhus_publication.text == "N/A"

        datatake = complete_table.find_element_by_xpath("tbody/tr[1]/td[14]")

        assert datatake.text == "N/A"

        start_msi = complete_table.find_element_by_xpath("tbody/tr[1]/td[15]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = complete_table.find_element_by_xpath("tbody/tr[1]/td[16]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

        # Row 2
        level = complete_table.find_element_by_xpath("tbody/tr[2]/td[1]")

        assert level.text == "L1C"

        satellite = complete_table.find_element_by_xpath("tbody/tr[2]/td[2]")

        assert satellite.text == "S2A"

        orbit = complete_table.find_element_by_xpath("tbody/tr[2]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = complete_table.find_element_by_xpath("tbody/tr[2]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:52:29"

        stop_datastrip = complete_table.find_element_by_xpath("tbody/tr[2]/td[5]")

        assert stop_datastrip.text == "2018-07-21T08:54:19"

        datastrip = complete_table.find_element_by_xpath("tbody/tr[2]/td[6]")

        assert datastrip.text == "S2A_OPER_MSI_L1C_DS_MPS__20180721T104253_S20180721T085229_N02.06"

        status = complete_table.find_element_by_xpath("tbody/tr[2]/td[7]")

        assert status.text == "MISSING DAM PUBLICATION"

        tiles = complete_table.find_element_by_xpath("tbody/tr[2]/td[8]")

        assert tiles.text == "4"

        tiles_dam = complete_table.find_element_by_xpath("tbody/tr[2]/td[9]")

        assert tiles_dam.text == "3"

        tiles_dhus = complete_table.find_element_by_xpath("tbody/tr[2]/td[10]")

        assert tiles_dhus.text == "2"

        tiles_published_dhus = complete_table.find_element_by_xpath("tbody/tr[2]/td[11]")

        assert tiles_published_dhus.text == "1"

        mean_time_dhus = complete_table.find_element_by_xpath("tbody/tr[2]/td[12]")

        assert mean_time_dhus.text == "225.797"

        mean_time_dhus_publication = complete_table.find_element_by_xpath("tbody/tr[2]/td[13]")

        assert mean_time_dhus_publication.text == "1206891.184"

        datatake = complete_table.find_element_by_xpath("tbody/tr[2]/td[14]")

        assert datatake.text == "GS2A_20180721T083601_016077_N02.06"

        start_msi = complete_table.find_element_by_xpath("tbody/tr[2]/td[15]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = complete_table.find_element_by_xpath("tbody/tr[2]/td[16]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

        # Row 3
        level = complete_table.find_element_by_xpath("tbody/tr[3]/td[1]")

        assert level.text == "L1C"

        satellite = complete_table.find_element_by_xpath("tbody/tr[3]/td[2]")

        assert satellite.text == "S2A"

        orbit = complete_table.find_element_by_xpath("tbody/tr[3]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = complete_table.find_element_by_xpath("tbody/tr[3]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:36:08.255634"

        stop_datastrip = complete_table.find_element_by_xpath("tbody/tr[3]/td[5]")

        assert stop_datastrip.text == "2018-07-21T08:52:29"

        datastrip = complete_table.find_element_by_xpath("tbody/tr[3]/td[6]")

        assert datastrip.text == "N/A"

        status = complete_table.find_element_by_xpath("tbody/tr[3]/td[7]")

        assert status.text == "MISSING ACQUISITION"

        tiles = complete_table.find_element_by_xpath("tbody/tr[3]/td[8]")

        assert tiles.text == "N/A"

        tiles_dam = complete_table.find_element_by_xpath("tbody/tr[3]/td[9]")

        assert tiles_dam.text == "N/A"

        tiles_dhus = complete_table.find_element_by_xpath("tbody/tr[3]/td[10]")

        assert tiles_dhus.text == "N/A"

        tiles_published_dhus = complete_table.find_element_by_xpath("tbody/tr[3]/td[11]")

        assert tiles_published_dhus.text == "N/A"

        mean_time_dhus = complete_table.find_element_by_xpath("tbody/tr[3]/td[12]")

        assert mean_time_dhus.text == "N/A"

        mean_time_dhus_publication = complete_table.find_element_by_xpath("tbody/tr[3]/td[13]")

        assert mean_time_dhus_publication.text == "N/A"

        datatake = complete_table.find_element_by_xpath("tbody/tr[3]/td[14]")

        assert datatake.text == "N/A"

        start_msi = complete_table.find_element_by_xpath("tbody/tr[3]/td[15]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = complete_table.find_element_by_xpath("tbody/tr[3]/td[16]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

        # Row 4
        level = complete_table.find_element_by_xpath("tbody/tr[4]/td[1]")

        assert level.text == "L2A"

        satellite = complete_table.find_element_by_xpath("tbody/tr[4]/td[2]")

        assert satellite.text == "S2A"

        orbit = complete_table.find_element_by_xpath("tbody/tr[4]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = complete_table.find_element_by_xpath("tbody/tr[4]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:36:08.255634"

        stop_datastrip = complete_table.find_element_by_xpath("tbody/tr[4]/td[5]")

        assert stop_datastrip.text == "2018-07-21T09:08:50.195941"

        datastrip = complete_table.find_element_by_xpath("tbody/tr[4]/td[6]")

        assert datastrip.text == "N/A"

        status = complete_table.find_element_by_xpath("tbody/tr[4]/td[7]")

        assert status.text == "MISSING ACQUISITION"

        tiles = complete_table.find_element_by_xpath("tbody/tr[4]/td[8]")

        assert tiles.text == "N/A"

        tiles_dam = complete_table.find_element_by_xpath("tbody/tr[4]/td[9]")

        assert tiles_dam.text == "N/A"

        tiles_dhus = complete_table.find_element_by_xpath("tbody/tr[4]/td[10]")

        assert tiles_dhus.text == "N/A"

        tiles_published_dhus = complete_table.find_element_by_xpath("tbody/tr[4]/td[11]")

        assert tiles_published_dhus.text == "N/A"

        mean_time_dhus = complete_table.find_element_by_xpath("tbody/tr[4]/td[12]")

        assert mean_time_dhus.text == "N/A"

        mean_time_dhus_publication = complete_table.find_element_by_xpath("tbody/tr[4]/td[13]")

        assert mean_time_dhus_publication.text == "N/A"

        datatake = complete_table.find_element_by_xpath("tbody/tr[4]/td[14]")

        assert datatake.text == "N/A"

        start_msi = complete_table.find_element_by_xpath("tbody/tr[4]/td[15]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = complete_table.find_element_by_xpath("tbody/tr[4]/td[16]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

        # Datatake by UUID missing table
        wait = WebDriverWait(self.driver,5)

        self.driver.get("http://localhost:5000/views/dhus-completeness-by-datatake/" + str(planned_imaging_correction[0].event_uuid))

        missing_datatake_table = self.driver.find_element_by_id("dhus-completeness-list-table-MISSING")

        # Row 1
        level = missing_datatake_table.find_element_by_xpath("tbody/tr[1]/td[1]")

        assert level.text == "L1C"

        satellite = missing_datatake_table.find_element_by_xpath("tbody/tr[1]/td[2]")

        assert satellite.text == "S2A"

        orbit = missing_datatake_table.find_element_by_xpath("tbody/tr[1]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = missing_datatake_table.find_element_by_xpath("tbody/tr[1]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:54:19"

        stop_datastrip = missing_datatake_table.find_element_by_xpath("tbody/tr[1]/td[5]")

        assert stop_datastrip.text == "2018-07-21T09:08:50.195941"

        datastrip = missing_datatake_table.find_element_by_xpath("tbody/tr[1]/td[6]")

        assert datastrip.text == "N/A"

        status = missing_datatake_table.find_element_by_xpath("tbody/tr[1]/td[7]")

        assert status.text == "MISSING ACQUISITION"

        tiles = missing_datatake_table.find_element_by_xpath("tbody/tr[1]/td[8]")

        assert tiles.text == "N/A"

        tiles_dam = missing_datatake_table.find_element_by_xpath("tbody/tr[1]/td[9]")

        assert tiles_dam.text == "N/A"

        tiles_dhus = missing_datatake_table.find_element_by_xpath("tbody/tr[1]/td[10]")

        assert tiles_dhus.text == "N/A"

        tiles_published_dhus = missing_datatake_table.find_element_by_xpath("tbody/tr[1]/td[11]")

        assert tiles_published_dhus.text == "N/A"

        mean_time_dhus = missing_datatake_table.find_element_by_xpath("tbody/tr[1]/td[12]")

        assert mean_time_dhus.text == "N/A"

        mean_time_dhus_publication = missing_datatake_table.find_element_by_xpath("tbody/tr[1]/td[13]")

        assert mean_time_dhus_publication.text == "N/A"

        datatake = missing_datatake_table.find_element_by_xpath("tbody/tr[1]/td[14]")

        assert datatake.text == "N/A"

        datatake = missing_datatake_table.find_element_by_xpath("tbody/tr[1]/td[15]")

        assert datatake.text == "N/A"

        datatake = missing_datatake_table.find_element_by_xpath("tbody/tr[1]/td[16]")

        assert datatake.text == "N/A"

        start_msi = missing_datatake_table.find_element_by_xpath("tbody/tr[1]/td[17]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = missing_datatake_table.find_element_by_xpath("tbody/tr[1]/td[18]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

        # Row 2
        level = missing_datatake_table.find_element_by_xpath("tbody/tr[2]/td[1]")

        assert level.text == "L1C"

        satellite = missing_datatake_table.find_element_by_xpath("tbody/tr[2]/td[2]")

        assert satellite.text == "S2A"

        orbit = missing_datatake_table.find_element_by_xpath("tbody/tr[2]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = missing_datatake_table.find_element_by_xpath("tbody/tr[2]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:52:29"

        stop_datastrip = missing_datatake_table.find_element_by_xpath("tbody/tr[2]/td[5]")

        assert stop_datastrip.text == "2018-07-21T08:54:19"

        datastrip = missing_datatake_table.find_element_by_xpath("tbody/tr[2]/td[6]")

        assert datastrip.text == "S2A_OPER_MSI_L1C_TL_MPS__20180721T104253_A016077_T35QMF_N02.06"

        status = missing_datatake_table.find_element_by_xpath("tbody/tr[2]/td[7]")

        assert status.text == "MISSING DHUS DISSEMINATION"

        tiles = missing_datatake_table.find_element_by_xpath("tbody/tr[2]/td[8]")

        assert tiles.text == "N/A"

        tiles_dam = missing_datatake_table.find_element_by_xpath("tbody/tr[2]/td[9]")

        assert tiles_dam.text == "2018-07-21 11:02:45.886792"

        tiles_dhus = missing_datatake_table.find_element_by_xpath("tbody/tr[2]/td[10]")

        assert tiles_dhus.text == "N/A"

        tiles_published_dhus = missing_datatake_table.find_element_by_xpath("tbody/tr[2]/td[11]")

        assert tiles_published_dhus.text == "N/A"

        mean_time_dhus = missing_datatake_table.find_element_by_xpath("tbody/tr[2]/td[12]")

        assert mean_time_dhus.text == "N/A"

        mean_time_dhus_publication = missing_datatake_table.find_element_by_xpath("tbody/tr[2]/td[13]")

        assert mean_time_dhus_publication.text == "N/A"

        datatake = missing_datatake_table.find_element_by_xpath("tbody/tr[2]/td[14]")

        assert datatake.text == "N/A"

        datatake = missing_datatake_table.find_element_by_xpath("tbody/tr[2]/td[15]")

        assert datatake.text == "S2A_OPER_MSI_L1C_DS_MPS__20180721T104253_S20180721T085229_N02.06"

        datatake = missing_datatake_table.find_element_by_xpath("tbody/tr[2]/td[16]")

        assert datatake.text == "GS2A_20180721T083601_016077_N02.06"

        start_msi = missing_datatake_table.find_element_by_xpath("tbody/tr[2]/td[17]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = missing_datatake_table.find_element_by_xpath("tbody/tr[2]/td[18]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

        # Row 3
        level = missing_datatake_table.find_element_by_xpath("tbody/tr[3]/td[1]")

        assert level.text == "L1C"

        satellite = missing_datatake_table.find_element_by_xpath("tbody/tr[3]/td[2]")

        assert satellite.text == "S2A"

        orbit = missing_datatake_table.find_element_by_xpath("tbody/tr[3]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = missing_datatake_table.find_element_by_xpath("tbody/tr[3]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:52:29"

        stop_datastrip = missing_datatake_table.find_element_by_xpath("tbody/tr[3]/td[5]")

        assert stop_datastrip.text == "2018-07-21T08:54:19"

        datastrip = missing_datatake_table.find_element_by_xpath("tbody/tr[3]/td[6]")

        assert datastrip.text == "S2A_OPER_MSI_L1C_TL_MPS__20180721T104253_A016077_T35QMG_N02.06"

        status = missing_datatake_table.find_element_by_xpath("tbody/tr[3]/td[7]")

        assert status.text == "MISSING DAM PUBLICATION"

        tiles = missing_datatake_table.find_element_by_xpath("tbody/tr[3]/td[8]")

        assert tiles.text == "N/A"

        tiles_dam = missing_datatake_table.find_element_by_xpath("tbody/tr[3]/td[9]")

        assert tiles_dam.text == "N/A"

        tiles_dhus = missing_datatake_table.find_element_by_xpath("tbody/tr[3]/td[10]")

        assert tiles_dhus.text == "N/A"

        tiles_published_dhus = missing_datatake_table.find_element_by_xpath("tbody/tr[3]/td[11]")

        assert tiles_published_dhus.text == "N/A"

        mean_time_dhus = missing_datatake_table.find_element_by_xpath("tbody/tr[3]/td[12]")

        assert mean_time_dhus.text == "N/A"

        mean_time_dhus_publication = missing_datatake_table.find_element_by_xpath("tbody/tr[3]/td[13]")

        assert mean_time_dhus_publication.text == "N/A"

        datatake = missing_datatake_table.find_element_by_xpath("tbody/tr[3]/td[14]")

        assert datatake.text == "N/A"

        datatake = missing_datatake_table.find_element_by_xpath("tbody/tr[3]/td[15]")

        assert datatake.text == "S2A_OPER_MSI_L1C_DS_MPS__20180721T104253_S20180721T085229_N02.06"

        datatake = missing_datatake_table.find_element_by_xpath("tbody/tr[3]/td[16]")

        assert datatake.text == "GS2A_20180721T083601_016077_N02.06"

        start_msi = missing_datatake_table.find_element_by_xpath("tbody/tr[3]/td[17]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = missing_datatake_table.find_element_by_xpath("tbody/tr[3]/td[18]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

        # Row 4
        level = missing_datatake_table.find_element_by_xpath("tbody/tr[4]/td[1]")

        assert level.text == "L1C"

        satellite = missing_datatake_table.find_element_by_xpath("tbody/tr[4]/td[2]")

        assert satellite.text == "S2A"

        orbit = missing_datatake_table.find_element_by_xpath("tbody/tr[4]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = missing_datatake_table.find_element_by_xpath("tbody/tr[4]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:52:29"

        stop_datastrip = missing_datatake_table.find_element_by_xpath("tbody/tr[4]/td[5]")

        assert stop_datastrip.text == "2018-07-21T08:54:19"

        datastrip = missing_datatake_table.find_element_by_xpath("tbody/tr[4]/td[6]")

        assert datastrip.text == "S2A_OPER_MSI_L1C_TL_MPS__20180721T104253_A016077_T35QMQ_N02.06"

        status = missing_datatake_table.find_element_by_xpath("tbody/tr[4]/td[7]")

        assert status.text == "MISSING DHUS PUBLICATION"

        tiles = missing_datatake_table.find_element_by_xpath("tbody/tr[4]/td[8]")

        assert tiles.text == "S2B_MSIL1C_20180721T085229_N0206_R107_T35QMQ_20180721T104253.SAFE"

        tiles_dam = missing_datatake_table.find_element_by_xpath("tbody/tr[4]/td[9]")

        assert tiles_dam.text == "N/A"

        tiles_dhus = missing_datatake_table.find_element_by_xpath("tbody/tr[4]/td[10]")

        assert tiles_dhus.text == "2018-07-21 12:54:48"

        tiles_published_dhus = missing_datatake_table.find_element_by_xpath("tbody/tr[4]/td[11]")

        assert tiles_published_dhus.text == "N/A"

        mean_time_dhus = missing_datatake_table.find_element_by_xpath("tbody/tr[4]/td[12]")

        assert mean_time_dhus.text == "N/A"

        mean_time_dhus_publication = missing_datatake_table.find_element_by_xpath("tbody/tr[4]/td[13]")

        assert mean_time_dhus_publication.text == "225.797"

        datatake = missing_datatake_table.find_element_by_xpath("tbody/tr[4]/td[14]")

        assert datatake.text == "N/A"

        datatake = missing_datatake_table.find_element_by_xpath("tbody/tr[4]/td[15]")

        assert datatake.text == "S2A_OPER_MSI_L1C_DS_MPS__20180721T104253_S20180721T085229_N02.06"

        datatake = missing_datatake_table.find_element_by_xpath("tbody/tr[4]/td[16]")

        assert datatake.text == "GS2A_20180721T083601_016077_N02.06"

        start_msi = missing_datatake_table.find_element_by_xpath("tbody/tr[4]/td[17]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = missing_datatake_table.find_element_by_xpath("tbody/tr[4]/td[18]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

        # Row 5
        level = missing_datatake_table.find_element_by_xpath("tbody/tr[5]/td[1]")

        assert level.text == "L1C"

        satellite = missing_datatake_table.find_element_by_xpath("tbody/tr[5]/td[2]")

        assert satellite.text == "S2A"

        orbit = missing_datatake_table.find_element_by_xpath("tbody/tr[5]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = missing_datatake_table.find_element_by_xpath("tbody/tr[5]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:36:08.255634"

        stop_datastrip = missing_datatake_table.find_element_by_xpath("tbody/tr[5]/td[5]")

        assert stop_datastrip.text == "2018-07-21T08:52:29"

        datastrip = missing_datatake_table.find_element_by_xpath("tbody/tr[5]/td[6]")

        assert datastrip.text == "N/A"

        status = missing_datatake_table.find_element_by_xpath("tbody/tr[5]/td[7]")

        assert status.text == "MISSING ACQUISITION"

        tiles = missing_datatake_table.find_element_by_xpath("tbody/tr[5]/td[8]")

        assert tiles.text == "N/A"

        tiles_dam = missing_datatake_table.find_element_by_xpath("tbody/tr[5]/td[9]")

        assert tiles_dam.text == "N/A"

        tiles_dhus = missing_datatake_table.find_element_by_xpath("tbody/tr[5]/td[10]")

        assert tiles_dhus.text == "N/A"

        tiles_published_dhus = missing_datatake_table.find_element_by_xpath("tbody/tr[5]/td[11]")

        assert tiles_published_dhus.text == "N/A"

        mean_time_dhus = missing_datatake_table.find_element_by_xpath("tbody/tr[5]/td[12]")

        assert mean_time_dhus.text == "N/A"

        mean_time_dhus_publication = missing_datatake_table.find_element_by_xpath("tbody/tr[5]/td[13]")

        assert mean_time_dhus_publication.text == "N/A"

        datatake = missing_datatake_table.find_element_by_xpath("tbody/tr[5]/td[14]")

        assert datatake.text == "N/A"

        datatake = missing_datatake_table.find_element_by_xpath("tbody/tr[5]/td[15]")

        assert datatake.text == "N/A"

        datatake = missing_datatake_table.find_element_by_xpath("tbody/tr[5]/td[16]")

        assert datatake.text == "N/A"

        start_msi = missing_datatake_table.find_element_by_xpath("tbody/tr[5]/td[17]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = missing_datatake_table.find_element_by_xpath("tbody/tr[5]/td[18]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

        # Row 6
        level = missing_datatake_table.find_element_by_xpath("tbody/tr[6]/td[1]")

        assert level.text == "L2A"

        satellite = missing_datatake_table.find_element_by_xpath("tbody/tr[6]/td[2]")

        assert satellite.text == "S2A"

        orbit = missing_datatake_table.find_element_by_xpath("tbody/tr[6]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = missing_datatake_table.find_element_by_xpath("tbody/tr[6]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:36:08.255634"

        stop_datastrip = missing_datatake_table.find_element_by_xpath("tbody/tr[6]/td[5]")

        assert stop_datastrip.text == "2018-07-21T09:08:50.195941"

        datastrip = missing_datatake_table.find_element_by_xpath("tbody/tr[6]/td[6]")

        assert datastrip.text == "N/A"

        status = missing_datatake_table.find_element_by_xpath("tbody/tr[6]/td[7]")

        assert status.text == "MISSING ACQUISITION"

        tiles = missing_datatake_table.find_element_by_xpath("tbody/tr[6]/td[8]")

        assert tiles.text == "N/A"

        tiles_dam = missing_datatake_table.find_element_by_xpath("tbody/tr[6]/td[9]")

        assert tiles_dam.text == "N/A"

        tiles_dhus = missing_datatake_table.find_element_by_xpath("tbody/tr[6]/td[10]")

        assert tiles_dhus.text == "N/A"

        tiles_published_dhus = missing_datatake_table.find_element_by_xpath("tbody/tr[6]/td[11]")

        assert tiles_published_dhus.text == "N/A"

        mean_time_dhus = missing_datatake_table.find_element_by_xpath("tbody/tr[6]/td[12]")

        assert mean_time_dhus.text == "N/A"

        mean_time_dhus_publication = missing_datatake_table.find_element_by_xpath("tbody/tr[6]/td[13]")

        assert mean_time_dhus_publication.text == "N/A"

        datatake = missing_datatake_table.find_element_by_xpath("tbody/tr[6]/td[14]")

        assert datatake.text == "N/A"

        datatake = missing_datatake_table.find_element_by_xpath("tbody/tr[6]/td[15]")

        assert datatake.text == "N/A"

        datatake = missing_datatake_table.find_element_by_xpath("tbody/tr[6]/td[16]")

        assert datatake.text == "N/A"

        start_msi = missing_datatake_table.find_element_by_xpath("tbody/tr[6]/td[17]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = missing_datatake_table.find_element_by_xpath("tbody/tr[6]/td[18]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

        # Datatake by UUID complete table
        complete_datatake_table = self.driver.find_element_by_id("dhus-completeness-list-table-COMPLETE")

        # Row 1
        level = complete_datatake_table.find_element_by_xpath("tbody/tr[1]/td[1]")

        assert level.text == "L1C"

        satellite = complete_datatake_table.find_element_by_xpath("tbody/tr[1]/td[2]")

        assert satellite.text == "S2A"

        orbit = complete_datatake_table.find_element_by_xpath("tbody/tr[1]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = complete_datatake_table.find_element_by_xpath("tbody/tr[1]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:54:19"

        stop_datastrip = complete_datatake_table.find_element_by_xpath("tbody/tr[1]/td[5]")

        assert stop_datastrip.text == "2018-07-21T09:08:50.195941"

        datastrip = complete_datatake_table.find_element_by_xpath("tbody/tr[1]/td[6]")

        assert datastrip.text == "N/A"

        status = complete_datatake_table.find_element_by_xpath("tbody/tr[1]/td[7]")

        assert status.text == "MISSING ACQUISITION"

        tiles = complete_datatake_table.find_element_by_xpath("tbody/tr[1]/td[8]")

        assert tiles.text == "N/A"

        tiles_dam = complete_datatake_table.find_element_by_xpath("tbody/tr[1]/td[9]")

        assert tiles_dam.text == "N/A"

        tiles_dhus = complete_datatake_table.find_element_by_xpath("tbody/tr[1]/td[10]")

        assert tiles_dhus.text == "N/A"

        tiles_published_dhus = complete_datatake_table.find_element_by_xpath("tbody/tr[1]/td[11]")

        assert tiles_published_dhus.text == "N/A"

        mean_time_dhus = complete_datatake_table.find_element_by_xpath("tbody/tr[1]/td[12]")

        assert mean_time_dhus.text == "N/A"

        mean_time_dhus_publication = complete_datatake_table.find_element_by_xpath("tbody/tr[1]/td[13]")

        assert mean_time_dhus_publication.text == "N/A"

        datatake = complete_datatake_table.find_element_by_xpath("tbody/tr[1]/td[14]")

        assert datatake.text == "N/A"

        datatake = complete_datatake_table.find_element_by_xpath("tbody/tr[1]/td[15]")

        assert datatake.text == "N/A"

        datatake = complete_datatake_table.find_element_by_xpath("tbody/tr[1]/td[16]")

        assert datatake.text == "N/A"

        start_msi = complete_datatake_table.find_element_by_xpath("tbody/tr[1]/td[17]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = complete_datatake_table.find_element_by_xpath("tbody/tr[1]/td[18]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

         # Row 2
        level = complete_datatake_table.find_element_by_xpath("tbody/tr[2]/td[1]")

        assert level.text == "L1C"

        satellite = complete_datatake_table.find_element_by_xpath("tbody/tr[2]/td[2]")

        assert satellite.text == "S2A"

        orbit = complete_datatake_table.find_element_by_xpath("tbody/tr[2]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = complete_datatake_table.find_element_by_xpath("tbody/tr[2]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:52:29"

        stop_datastrip = complete_datatake_table.find_element_by_xpath("tbody/tr[2]/td[5]")

        assert stop_datastrip.text == "2018-07-21T08:54:19"

        datastrip = complete_datatake_table.find_element_by_xpath("tbody/tr[2]/td[6]")

        assert datastrip.text == "S2A_OPER_MSI_L1C_TL_MPS__20180721T104253_A016077_T35QME_N02.06"

        status = complete_datatake_table.find_element_by_xpath("tbody/tr[2]/td[7]")

        assert status.text == "OK"

        tiles = complete_datatake_table.find_element_by_xpath("tbody/tr[2]/td[8]")

        assert tiles.text == "S2B_MSIL1C_20180721T085229_N0206_R107_T35QME_20180721T104253.SAFE"

        tiles_dam = complete_datatake_table.find_element_by_xpath("tbody/tr[2]/td[9]")

        assert tiles_dam.text == "2018-07-21 11:02:45.891129"

        tiles_dhus = complete_datatake_table.find_element_by_xpath("tbody/tr[2]/td[10]")

        assert tiles_dhus.text == "2018-07-21 12:54:48"

        tiles_published_dhus = complete_datatake_table.find_element_by_xpath("tbody/tr[2]/td[11]")

        assert tiles_published_dhus.text == "2020-11-05 12:00:11.234000"

        mean_time_dhus = complete_datatake_table.find_element_by_xpath("tbody/tr[2]/td[12]")

        assert mean_time_dhus.text == "112.035"

        mean_time_dhus_publication = complete_datatake_table.find_element_by_xpath("tbody/tr[2]/td[13]")

        assert mean_time_dhus_publication.text == "225.797"

        datatake = complete_datatake_table.find_element_by_xpath("tbody/tr[2]/td[14]")

        assert datatake.text == "1206891.184"

        datatake = complete_datatake_table.find_element_by_xpath("tbody/tr[2]/td[15]")

        assert datatake.text == "S2A_OPER_MSI_L1C_DS_MPS__20180721T104253_S20180721T085229_N02.06"

        datatake = complete_datatake_table.find_element_by_xpath("tbody/tr[2]/td[16]")

        assert datatake.text == "GS2A_20180721T083601_016077_N02.06"

        start_msi = complete_datatake_table.find_element_by_xpath("tbody/tr[2]/td[17]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = complete_datatake_table.find_element_by_xpath("tbody/tr[2]/td[18]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

        # Row 3
        level = complete_datatake_table.find_element_by_xpath("tbody/tr[3]/td[1]")

        assert level.text == "L1C"

        satellite = complete_datatake_table.find_element_by_xpath("tbody/tr[3]/td[2]")

        assert satellite.text == "S2A"

        orbit = complete_datatake_table.find_element_by_xpath("tbody/tr[3]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = complete_datatake_table.find_element_by_xpath("tbody/tr[3]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:52:29"

        stop_datastrip = complete_datatake_table.find_element_by_xpath("tbody/tr[3]/td[5]")

        assert stop_datastrip.text == "2018-07-21T08:54:19"

        datastrip = complete_datatake_table.find_element_by_xpath("tbody/tr[3]/td[6]")

        assert datastrip.text == "S2A_OPER_MSI_L1C_TL_MPS__20180721T104253_A016077_T35QMF_N02.06"

        status = complete_datatake_table.find_element_by_xpath("tbody/tr[3]/td[7]")

        assert status.text == "MISSING DHUS DISSEMINATION"

        tiles = complete_datatake_table.find_element_by_xpath("tbody/tr[3]/td[8]")

        assert tiles.text == "N/A"

        tiles_dam = complete_datatake_table.find_element_by_xpath("tbody/tr[3]/td[9]")

        assert tiles_dam.text == "2018-07-21 11:02:45.886792"

        tiles_dhus = complete_datatake_table.find_element_by_xpath("tbody/tr[3]/td[10]")

        assert tiles_dhus.text == "N/A"

        tiles_published_dhus = complete_datatake_table.find_element_by_xpath("tbody/tr[3]/td[11]")

        assert tiles_published_dhus.text == "N/A"

        mean_time_dhus = complete_datatake_table.find_element_by_xpath("tbody/tr[3]/td[12]")

        assert mean_time_dhus.text == "N/A"

        mean_time_dhus_publication = complete_datatake_table.find_element_by_xpath("tbody/tr[3]/td[13]")

        assert mean_time_dhus_publication.text == "N/A"

        datatake = complete_datatake_table.find_element_by_xpath("tbody/tr[3]/td[14]")

        assert datatake.text == "N/A"

        datatake = complete_datatake_table.find_element_by_xpath("tbody/tr[3]/td[15]")

        assert datatake.text == "S2A_OPER_MSI_L1C_DS_MPS__20180721T104253_S20180721T085229_N02.06"

        datatake = complete_datatake_table.find_element_by_xpath("tbody/tr[3]/td[16]")

        assert datatake.text == "GS2A_20180721T083601_016077_N02.06"

        start_msi = complete_datatake_table.find_element_by_xpath("tbody/tr[3]/td[17]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = complete_datatake_table.find_element_by_xpath("tbody/tr[3]/td[18]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

        # Row 4
        level = complete_datatake_table.find_element_by_xpath("tbody/tr[4]/td[1]")

        assert level.text == "L1C"

        satellite = complete_datatake_table.find_element_by_xpath("tbody/tr[4]/td[2]")

        assert satellite.text == "S2A"

        orbit = complete_datatake_table.find_element_by_xpath("tbody/tr[4]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = complete_datatake_table.find_element_by_xpath("tbody/tr[4]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:52:29"

        stop_datastrip = complete_datatake_table.find_element_by_xpath("tbody/tr[4]/td[5]")

        assert stop_datastrip.text == "2018-07-21T08:54:19"

        datastrip = complete_datatake_table.find_element_by_xpath("tbody/tr[4]/td[6]")

        assert datastrip.text == "S2A_OPER_MSI_L1C_TL_MPS__20180721T104253_A016077_T35QMG_N02.06"

        status = complete_datatake_table.find_element_by_xpath("tbody/tr[4]/td[7]")

        assert status.text == "MISSING DAM PUBLICATION"

        tiles = complete_datatake_table.find_element_by_xpath("tbody/tr[4]/td[8]")

        assert tiles.text == "N/A"

        tiles_dam = complete_datatake_table.find_element_by_xpath("tbody/tr[4]/td[9]")

        assert tiles_dam.text == "N/A"

        tiles_dhus = complete_datatake_table.find_element_by_xpath("tbody/tr[4]/td[10]")

        assert tiles_dhus.text == "N/A"

        tiles_published_dhus = complete_datatake_table.find_element_by_xpath("tbody/tr[4]/td[11]")

        assert tiles_published_dhus.text == "N/A"

        mean_time_dhus = complete_datatake_table.find_element_by_xpath("tbody/tr[4]/td[12]")

        assert mean_time_dhus.text == "N/A"

        mean_time_dhus_publication = complete_datatake_table.find_element_by_xpath("tbody/tr[4]/td[13]")

        assert mean_time_dhus_publication.text == "N/A"

        datatake = complete_datatake_table.find_element_by_xpath("tbody/tr[4]/td[14]")

        assert datatake.text == "N/A"

        datatake = complete_datatake_table.find_element_by_xpath("tbody/tr[4]/td[15]")

        assert datatake.text == "S2A_OPER_MSI_L1C_DS_MPS__20180721T104253_S20180721T085229_N02.06"

        datatake = complete_datatake_table.find_element_by_xpath("tbody/tr[4]/td[16]")

        assert datatake.text == "GS2A_20180721T083601_016077_N02.06"

        start_msi = complete_datatake_table.find_element_by_xpath("tbody/tr[4]/td[17]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = complete_datatake_table.find_element_by_xpath("tbody/tr[4]/td[18]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

        # Row 5
        level = complete_datatake_table.find_element_by_xpath("tbody/tr[5]/td[1]")

        assert level.text == "L1C"

        satellite = complete_datatake_table.find_element_by_xpath("tbody/tr[5]/td[2]")

        assert satellite.text == "S2A"

        orbit = complete_datatake_table.find_element_by_xpath("tbody/tr[5]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = complete_datatake_table.find_element_by_xpath("tbody/tr[5]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:52:29"

        stop_datastrip = complete_datatake_table.find_element_by_xpath("tbody/tr[5]/td[5]")

        assert stop_datastrip.text == "2018-07-21T08:54:19"

        datastrip = complete_datatake_table.find_element_by_xpath("tbody/tr[5]/td[6]")

        assert datastrip.text == "S2A_OPER_MSI_L1C_TL_MPS__20180721T104253_A016077_T35QMQ_N02.06"

        status = complete_datatake_table.find_element_by_xpath("tbody/tr[5]/td[7]")

        assert status.text == "MISSING DHUS PUBLICATION"

        tiles = complete_datatake_table.find_element_by_xpath("tbody/tr[5]/td[8]")

        assert tiles.text == "S2B_MSIL1C_20180721T085229_N0206_R107_T35QMQ_20180721T104253.SAFE"

        tiles_dam = complete_datatake_table.find_element_by_xpath("tbody/tr[5]/td[9]")

        assert tiles_dam.text == "N/A"

        tiles_dhus = complete_datatake_table.find_element_by_xpath("tbody/tr[5]/td[10]")

        assert tiles_dhus.text == "2018-07-21 12:54:48"

        tiles_published_dhus = complete_datatake_table.find_element_by_xpath("tbody/tr[5]/td[11]")

        assert tiles_published_dhus.text == "N/A"

        mean_time_dhus = complete_datatake_table.find_element_by_xpath("tbody/tr[5]/td[12]")

        assert mean_time_dhus.text == "N/A"

        mean_time_dhus_publication = complete_datatake_table.find_element_by_xpath("tbody/tr[5]/td[13]")

        assert mean_time_dhus_publication.text == "225.797"

        datatake = complete_datatake_table.find_element_by_xpath("tbody/tr[5]/td[14]")

        assert datatake.text == "N/A"

        datatake = complete_datatake_table.find_element_by_xpath("tbody/tr[5]/td[15]")

        assert datatake.text == "S2A_OPER_MSI_L1C_DS_MPS__20180721T104253_S20180721T085229_N02.06"

        datatake = complete_datatake_table.find_element_by_xpath("tbody/tr[5]/td[16]")

        assert datatake.text == "GS2A_20180721T083601_016077_N02.06"

        start_msi = complete_datatake_table.find_element_by_xpath("tbody/tr[5]/td[17]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = complete_datatake_table.find_element_by_xpath("tbody/tr[5]/td[18]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

        # Row 6
        level = complete_datatake_table.find_element_by_xpath("tbody/tr[6]/td[1]")

        assert level.text == "L1C"

        satellite = complete_datatake_table.find_element_by_xpath("tbody/tr[6]/td[2]")

        assert satellite.text == "S2A"

        orbit = complete_datatake_table.find_element_by_xpath("tbody/tr[6]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = complete_datatake_table.find_element_by_xpath("tbody/tr[6]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:36:08.255634"

        stop_datastrip = complete_datatake_table.find_element_by_xpath("tbody/tr[6]/td[5]")

        assert stop_datastrip.text == "2018-07-21T08:52:29"

        datastrip = complete_datatake_table.find_element_by_xpath("tbody/tr[6]/td[6]")

        assert datastrip.text == "N/A"

        status = complete_datatake_table.find_element_by_xpath("tbody/tr[6]/td[7]")

        assert status.text == "MISSING ACQUISITION"

        tiles = complete_datatake_table.find_element_by_xpath("tbody/tr[6]/td[8]")

        assert tiles.text == "N/A"

        tiles_dam = complete_datatake_table.find_element_by_xpath("tbody/tr[6]/td[9]")

        assert tiles_dam.text == "N/A"

        tiles_dhus = complete_datatake_table.find_element_by_xpath("tbody/tr[6]/td[10]")

        assert tiles_dhus.text == "N/A"

        tiles_published_dhus = complete_datatake_table.find_element_by_xpath("tbody/tr[6]/td[11]")

        assert tiles_published_dhus.text == "N/A"

        mean_time_dhus = complete_datatake_table.find_element_by_xpath("tbody/tr[6]/td[12]")

        assert mean_time_dhus.text == "N/A"

        mean_time_dhus_publication = complete_datatake_table.find_element_by_xpath("tbody/tr[6]/td[13]")

        assert mean_time_dhus_publication.text == "N/A"

        datatake = complete_datatake_table.find_element_by_xpath("tbody/tr[6]/td[14]")

        assert datatake.text == "N/A"

        datatake = complete_datatake_table.find_element_by_xpath("tbody/tr[6]/td[15]")

        assert datatake.text == "N/A"

        datatake = complete_datatake_table.find_element_by_xpath("tbody/tr[6]/td[16]")

        assert datatake.text == "N/A"

        start_msi = complete_datatake_table.find_element_by_xpath("tbody/tr[6]/td[17]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = complete_datatake_table.find_element_by_xpath("tbody/tr[6]/td[18]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

        # Row 7
        level = complete_datatake_table.find_element_by_xpath("tbody/tr[7]/td[1]")

        assert level.text == "L2A"

        satellite = complete_datatake_table.find_element_by_xpath("tbody/tr[7]/td[2]")

        assert satellite.text == "S2A"

        orbit = complete_datatake_table.find_element_by_xpath("tbody/tr[7]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = complete_datatake_table.find_element_by_xpath("tbody/tr[7]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:36:08.255634"

        stop_datastrip = complete_datatake_table.find_element_by_xpath("tbody/tr[7]/td[5]")

        assert stop_datastrip.text == "2018-07-21T09:08:50.195941"

        datastrip = complete_datatake_table.find_element_by_xpath("tbody/tr[7]/td[6]")

        assert datastrip.text == "N/A"

        status = complete_datatake_table.find_element_by_xpath("tbody/tr[7]/td[7]")

        assert status.text == "MISSING ACQUISITION"

        tiles = complete_datatake_table.find_element_by_xpath("tbody/tr[7]/td[8]")

        assert tiles.text == "N/A"

        tiles_dam = complete_datatake_table.find_element_by_xpath("tbody/tr[7]/td[9]")

        assert tiles_dam.text == "N/A"

        tiles_dhus = complete_datatake_table.find_element_by_xpath("tbody/tr[7]/td[10]")

        assert tiles_dhus.text == "N/A"

        tiles_published_dhus = complete_datatake_table.find_element_by_xpath("tbody/tr[7]/td[11]")

        assert tiles_published_dhus.text == "N/A"

        mean_time_dhus = complete_datatake_table.find_element_by_xpath("tbody/tr[7]/td[12]")

        assert mean_time_dhus.text == "N/A"

        mean_time_dhus_publication = complete_datatake_table.find_element_by_xpath("tbody/tr[7]/td[13]")

        assert mean_time_dhus_publication.text == "N/A"

        datatake = complete_datatake_table.find_element_by_xpath("tbody/tr[7]/td[14]")

        assert datatake.text == "N/A"

        datatake = complete_datatake_table.find_element_by_xpath("tbody/tr[7]/td[15]")

        assert datatake.text == "N/A"

        datatake = complete_datatake_table.find_element_by_xpath("tbody/tr[7]/td[16]")

        assert datatake.text == "N/A"

        start_msi = complete_datatake_table.find_element_by_xpath("tbody/tr[7]/td[17]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = complete_datatake_table.find_element_by_xpath("tbody/tr[7]/td[18]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

    def test_dhus_completeness_only_nppf_and_orbpre(self):

        filename = "S2A_NPPF.EOF"
        file_path = os.path.dirname(os.path.abspath(__file__)) + "/inputs/" + filename

        exit_status = ingestion.command_process_file("s2boa.ingestions.ingestion_nppf.ingestion_nppf", file_path, "2018-01-01T00:00:00")

        assert len([item for item in exit_status if item["status"] != eboa_engine.exit_codes["OK"]["status"]]) == 0

        filename = "S2A_ORBPRE.EOF"
        file_path = os.path.dirname(os.path.abspath(__file__)) + "/inputs/" + filename

        exit_status = ingestion.command_process_file("s2boa.ingestions.ingestion_orbpre.ingestion_orbpre", file_path, "2018-01-01T00:00:00")

        assert len([item for item in exit_status if item["status"] != eboa_engine.exit_codes["OK"]["status"]]) == 0

        wait = WebDriverWait(self.driver,5)

        self.driver.get("http://localhost:5000/views/dhus-completeness")

        functions.query(self.driver, wait, "S2A", start = "2018-07-01T00:00:00", stop = "2018-07-31T23:59:59", start_orbit = "17600", stop_orbit = "17800", table_details = True, map = True, station_reports = True)

        # Check summary expected msi
        summary_expected_msi = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-expected-msi")))

        assert summary_expected_msi

        assert summary_expected_msi.text == "33.033"

        # Check summary acquired msi
        summary_acquired_msi = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-acquired-msi")))

        assert summary_acquired_msi

        assert summary_acquired_msi.text == "0.0"

        # Check summary processed to l1c msi
        summary_processed_l1c_msi = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-processed-to-l1c-msi")))

        assert summary_processed_l1c_msi

        assert summary_processed_l1c_msi.text == "0.0"

        # Check summary processed to l2a msi
        summary_processed_l2a_msi = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-processed-to-l2a-msi")))

        assert summary_processed_l2a_msi

        assert summary_processed_l2a_msi.text == "0.0"

        # Check summary generated to l1c tiles
        summary_generated_l1c_tiles = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-generated-l1c-tiles")))

        assert summary_generated_l1c_tiles

        assert summary_generated_l1c_tiles.text == "0"

        # Check summary generated to l2a tiles
        summary_generated_l2a_tiles = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-generated-l2a-tiles")))

        assert summary_generated_l2a_tiles

        assert summary_generated_l2a_tiles.text == "0"

        # Check summary missing acquistion
        summary_missing_acquistion = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-missing-acquistion")))

        assert summary_missing_acquistion

        assert summary_missing_acquistion.text == "32.699"

        # Check summary missing processing l1c
        summary_missing_processing_l1c = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-missing-processing-l1c")))

        assert summary_missing_processing_l1c

        assert summary_missing_processing_l1c.text == "32.699"

        # Check summary missing processing l2a
        summary_missing_processing_l2a = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-missing-processing-l2a")))

        assert summary_missing_processing_l2a

        assert summary_missing_processing_l2a.text == "32.699"

        # Check number of elements in summary
        assert len(summary_expected_msi.find_elements_by_xpath("../../../div")) == 9

        # Check whether the map is displayed
        map_section = self.driver.find_element_by_id("dhus-completeness-on-map-section")

        condition = map_section.is_displayed()

        assert condition is True

        l1c_map_section = self.driver.find_element_by_id("dhus-completeness-l1c-on-map-section")

        condition = l1c_map_section.is_displayed()

        assert condition is True

        l2a_map_section = self.driver.find_element_by_id("dhus-completeness-l2a-on-map-section")

        condition = l2a_map_section.is_displayed()

        assert condition is True

        # Check map missing segments tooltip
        planned_imaging_processing_completeness_l1c_1 = self.query_eboa.get_events(gauge_names ={"filter": "PLANNED_IMAGING_PROCESSING_COMPLETENESS_L1C", "op":"=="},
                                                                                start_filters =[{"date": "2018-07-21T08:36:08.255634", "op":"=="}],
                                                                                stop_filters = [{"date": "2018-07-21T09:08:50.195941", "op": "=="}])
        planned_imaging_correction = self.query_eboa.get_events(gauge_names ={"filter": "PLANNED_CUT_IMAGING_CORRECTION", "op":"=="})
        planned_cut_imaging = self.query_eboa.get_events(gauge_names ={"filter": "PLANNED_CUT_IMAGING", "op":"=="})

        map_l1c_missing_tooltip_info = [
            {
                "id": str(planned_imaging_processing_completeness_l1c_1[0].event_uuid),
                "tooltip": "<table border='1'>" + 
                "<tr><td>UUID</td><td>" + str(planned_imaging_processing_completeness_l1c_1[0].event_uuid) + "</td></tr>" + 
                "<tr><td>Satellite</td><td>S2A</td></tr><tr>" + 
                "<td>Orbit</td><td>16077</td></tr>" + 
                "<tr><td>Datastrip</td><td>N/A</td></tr>" + 
                "<tr><td>Status</td><td><a class='bold-red' href='/views/dhus-completeness-by-datatake/" + str(planned_imaging_correction[0].event_uuid) + "'>MISSING ACQUISITION</a></td></tr>" + 
                "<tr><td>Start</td><td>2018-07-21T08:36:08.255634</td></tr>" + 
                "<tr><td>Stop</td><td>2018-07-21T09:08:50.195941</td></tr>" + 
                "<tr><td>Duration(m)</td><td>32.699</td></tr>" + 
                "<tr><td>Plan file</td><td>S2A_NPPF.EOF</td></tr>" + 
                '<tr><td>Planned imaging</td><td><a href="/eboa_nav/query-event-links/' + str(planned_cut_imaging[0].event_uuid) + '"><i class="fa fa-link"></i></a></td></tr>' + 
                "</table>",
                "geometries": [
                        {'value': 'POLYGON ((101.528355 79.738353, 98.393294 79.554394, 95.372456 79.34158499999999, 92.47433599999999 79.101615, 89.704358 78.83623299999999, 87.065195 78.547203, 84.557168 78.236266, 82.178646 77.905114, 79.92652200000001 77.555353, 77.796533 77.188502, 75.78361 76.80598500000001, 73.882164 76.409121, 72.086314 75.999127, 70.390066 75.577118, 68.787451 75.144115, 67.27263000000001 74.701048, 65.839963 74.248763, 64.484058 73.788026, 63.199803 73.319535, 61.98238 72.84392099999999, 60.82727 72.361756, 59.730252 71.87356, 58.687393 71.379802, 57.69504 70.880909, 56.749802 70.377269, 55.848538 69.86923400000001, 54.988339 69.357125, 54.166514 68.841234, 53.380572 68.321826, 52.628211 67.799145, 51.907284 67.273414, 51.215837 66.74483499999999, 50.552046 66.21359200000001, 49.914221 65.679856, 49.300795 65.14378499999999, 48.710317 64.605521, 48.141439 64.06519900000001, 47.592911 63.522938, 47.063571 62.978854, 46.552336 62.433049, 46.058203 61.88562, 45.580233 61.336656, 45.117553 60.786241, 44.669348 60.23445, 44.234857 59.681356, 43.813369 59.127025, 43.404219 58.571519, 43.006785 58.014895, 42.620482 57.457208, 42.244763 56.898507, 41.879116 56.33884, 41.523059 55.778251, 41.176136 55.216781, 40.837913 54.65447, 40.507999 54.091353, 40.186016 53.527465, 39.871607 52.962837, 39.564437 52.3975, 39.264186 51.831483, 38.970556 51.264812, 38.683263 50.697513, 38.402038 50.12961, 38.126626 49.561125, 37.856788 48.992081, 37.592294 48.422497, 37.332928 47.852393, 37.078485 47.281788, 36.828768 46.710698, 36.583593 46.139141, 36.342781 45.567132, 36.106166 44.994686, 35.873587 44.421818, 35.644892 43.848541, 35.419934 43.274869, 35.198576 42.700813, 34.980684 42.126386, 34.766127 41.5516, 34.554789 40.976465, 34.346555 40.400992, 34.141315 39.825191, 33.938963 39.249071, 33.739397 38.672642, 33.542521 38.095913, 33.348241 37.518892, 33.156469 36.941588, 32.967118 36.364009, 32.780106 35.786163, 32.595355 35.208056, 32.412788 34.629697, 32.232333 34.051093, 32.053919 33.472249, 31.877479 32.893174, 31.702948 32.313873, 31.530263 31.734352, 31.359365 31.154617, 31.190194 30.574676, 31.022695 29.994532, 30.856813 29.414192, 30.692496 28.833661, 30.52969 28.252945, 30.368351 27.672049, 30.208431 27.090977, 30.049883 26.509735, 29.892665 25.928328, 29.736733 25.34676, 29.582046 24.765036, 29.428563 24.183161, 29.276246 23.601139, 29.125056 23.018975, 28.974958 22.436672, 28.825915 21.854236, 28.677892 21.27167, 28.530857 20.688979, 28.384776 20.106167, 28.239618 19.523237, 28.095351 18.940194, 27.951945 18.357042, 27.809371 17.773784, 27.667601 17.190425, 27.526605 16.606967, 27.386357 16.023415, 27.24683 15.439774, 27.107997 14.856045, 26.969834 14.272233, 26.832316 13.688341, 26.695417 13.104374, 26.559115 12.520334, 26.423385 11.936225, 26.288205 11.352051, 26.153552 10.767815, 26.019404 10.18352, 25.885738 9.599170000000001, 25.752535 9.014768, 25.619771 8.430318, 25.487428 7.845822, 25.355483 7.261285, 25.223917 6.676709, 25.092711 6.092098, 24.961844 5.507454, 24.831296 4.922782, 24.701049 4.338085, 24.571084 3.753365, 24.441382 3.168625, 24.311923 2.58387, 24.182691 1.999102, 24.053667 1.414324, 23.924832 0.8295400000000001, 23.796168 0.244752, 23.667656 -0.340037, 23.53928 -0.924823, 23.411021 -1.509603, 23.282861 -2.094374, 23.154782 -2.679134, 23.026766 -3.263878, 22.898797 -3.848605, 22.770855 -4.433311, 22.642923 -5.017993, 22.514983 -5.602648, 22.387017 -6.187273, 22.259008 -6.771866, 22.130936 -7.356423, 22.002785 -7.940941, 21.874535 -8.525416999999999, 21.746168 -9.109848, 21.617666 -9.694233000000001, 21.489009 -10.278566, 21.36018 -10.862846, 21.231159 -11.44707, 21.10193 -12.031235, 20.972471 -12.615337, 20.84276 -13.199375, 20.712779 -13.783345, 20.582507 -14.367243, 20.451923 -14.951069, 20.321007 -15.534817, 20.189737 -16.118486, 20.058092 -16.702073, 19.926048 -17.285575, 19.793585 -17.868989, 19.660679 -18.452311, 19.527306 -19.03554, 19.393443 -19.618672, 19.259065 -20.201704, 19.124148 -20.784634, 18.988665 -21.367458, 18.852591 -21.950174, 18.7159 -22.532779, 18.578563 -23.115269, 18.440552 -23.697642, 18.301839 -24.279894, 18.162396 -24.862023, 18.022195 -25.444026, 17.8812 -26.0259, 17.73938 -26.607641, 17.596701 -27.189247, 17.453128 -27.770714, 17.308628 -28.352039, 17.163163 -28.933219, 17.016695 -29.514251, 16.869187 -30.095131, 13.933539 -29.491417, 14.098138 -28.912293, 14.261223 -28.33296, 14.422844 -27.753423, 14.583047 -27.173686, 14.741878 -26.593755, 14.89938 -26.013634, 15.055598 -25.433327, 15.210571 -24.852841, 15.36434 -24.272178, 15.516947 -23.691343, 15.668426 -23.11034, 15.818815 -22.529175, 15.968148 -21.94785, 16.116461 -21.36637, 16.263787 -20.784739, 16.410159 -20.202961, 16.555607 -19.62104, 16.700165 -19.038979, 16.843861 -18.456783, 16.986725 -17.874455, 17.128786 -17.292, 17.270072 -16.70942, 17.41061 -16.126719, 17.550427 -15.543901, 17.689548 -14.96097, 17.828001 -14.377929, 17.965808 -13.794781, 18.102996 -13.211531, 18.239588 -12.628181, 18.375607 -12.044735, 18.511076 -11.461196, 18.646018 -10.877568, 18.780456 -10.293853, 18.914411 -9.710056, 19.047904 -9.12618, 19.180957 -8.542228, 19.31359 -7.958203, 19.445824 -7.374108, 19.577679 -6.789947, 19.709176 -6.205723, 19.840332 -5.62144, 19.971169 -5.037099, 20.101706 -4.452706, 20.231961 -3.868262, 20.361954 -3.28377, 20.491703 -2.699235, 20.621226 -2.114659, 20.750543 -1.530045, 20.879671 -0.945397, 21.008628 -0.360717, 21.137434 0.223991, 21.266105 0.808725, 21.39466 1.393481, 21.523116 1.978257, 21.651492 2.563048, 21.779804 3.147853, 21.908071 3.732668, 22.03631 4.31749, 22.164541 4.902317, 22.29278 5.487144, 22.421046 6.071969, 22.549357 6.656789, 22.677731 7.241602, 22.806186 7.826403, 22.934741 8.41119, 23.063414 8.995960999999999, 23.192224 9.580711000000001, 23.321189 10.165439, 23.45033 10.750141, 23.579663 11.334813, 23.70921 11.919454, 23.83899 12.504061, 23.969023 13.088629, 24.099328 13.673157, 24.229927 14.257641, 24.36084 14.842078, 24.492088 15.426466, 24.623693 16.010801, 24.755672 16.59508, 24.888051 17.179302, 25.020852 17.763461, 25.1541 18.347556, 25.287817 18.931583, 25.422028 19.51554, 25.556756 20.099424, 25.692028 20.68323, 25.827869 21.266957, 25.964305 21.850601, 26.101363 22.43416, 26.23907 23.017629, 26.377456 23.601007, 26.516548 24.184289, 26.656377 24.767473, 26.796974 25.350556, 26.93837 25.933533, 27.080597 26.516404, 27.223689 27.099162, 27.367681 27.681807, 27.512607 28.264333, 27.658505 28.846738, 27.805411 29.429019, 27.95336 30.011172, 28.102397 30.593193, 28.252563 31.175079, 28.403902 31.756827, 28.556459 32.338431, 28.71028 32.91989, 28.865413 33.501198, 29.021907 34.082352, 29.179815 34.663347, 29.339189 35.244181, 29.500086 35.824848, 29.662563 36.405344, 29.82668 36.985665, 29.9925 37.565806, 30.160087 38.145763, 30.32951 38.72553, 30.500839 39.305103, 30.674149 39.884477, 30.849515 40.463646, 31.027018 41.042604, 31.206743 41.621347, 31.388777 42.199868, 31.573211 42.77816, 31.760133 43.356219, 31.94965 43.934037, 32.14187 44.511607, 32.336903 45.088922, 32.534866 45.665975, 32.73588 46.242756, 32.940074 46.819259, 33.147583 47.395475, 33.358548 47.971394, 33.573118 48.547006, 33.791452 49.122303, 34.013715 49.697273, 34.240083 50.271906, 34.470741 50.846188, 34.705884 51.420109, 34.94572 51.993655, 35.190468 52.566812, 35.440361 53.139565, 35.695644 53.711899, 35.95658 54.283798, 36.223446 54.855243, 36.496539 55.426215, 36.776173 55.996696, 37.062667 56.566664, 37.356393 57.136096, 37.657733 57.704968, 37.967096 58.273253, 38.284919 58.840923, 38.611667 59.407948, 38.947843 59.974297, 39.293984 60.539933, 39.650668 61.10482, 40.018516 61.668918, 40.398198 62.232182, 40.790436 62.794566, 41.196009 63.356018, 41.61576 63.916483, 42.050602 64.47590099999999, 42.501524 65.034205, 42.969599 65.591324, 43.455996 66.14718000000001, 43.961985 66.701688, 44.488952 67.25475299999999, 45.03841 67.806273, 45.612014 68.35613499999999, 46.211575 68.904214, 46.839057 69.45037499999999, 47.496664 69.99446399999999, 48.186803 70.536312, 48.91212 71.075732, 49.675538 71.612514, 50.480285 72.14642600000001, 51.329936 72.677209, 52.228449 73.20457, 53.180217 73.728182, 54.190117 74.247676, 55.263568 74.762637, 56.406592 75.272594, 57.625885 75.77701399999999, 58.928884 76.27529199999999, 60.323843 76.766739, 61.819901 77.25057, 63.427147 77.725889, 65.15666299999999 78.19167400000001, 67.02054699999999 78.646756, 69.03187800000001 79.0898, 71.204616 79.519285, 73.553397 79.93347900000001, 76.093174 80.330421, 78.83862000000001 80.707914, 81.803448 81.06348699999999, 84.999177 81.394426, 88.433741 81.69779, 92.109756 81.970454, 96.02262 82.209198, 101.528355 79.738353))', 'name': 'footprint'}
                ],
                "style": {
                    "stroke_color": "red",
                    "fill_color": "rgba(255,0,0,0.3)",
                }
            },
        ]

        returned_map_l1c_missing_tooltip_info = self.driver.execute_script('return missing_segments_l1c;')
        assert map_l1c_missing_tooltip_info == returned_map_l1c_missing_tooltip_info
        
        planned_imaging_processing_completeness_l2a = self.query_eboa.get_events(gauge_names ={"filter": "PLANNED_IMAGING_PROCESSING_COMPLETENESS_L2A", "op":"=="})
        
        map_l2a_missing_tooltip_info = [
            {
                "id": str(planned_imaging_processing_completeness_l2a[0].event_uuid),
                "tooltip": "<table border='1'>" + 
                "<tr><td>UUID</td><td>" + str(planned_imaging_processing_completeness_l2a[0].event_uuid) + "</td></tr>" + 
                "<tr><td>Satellite</td><td>S2A</td></tr><tr>" + 
                "<td>Orbit</td><td>16077</td></tr>" + 
                "<tr><td>Datastrip</td><td>N/A</td></tr>" + 
                "<tr><td>Status</td><td><a class='bold-red' href='/views/dhus-completeness-by-datatake/" + str(planned_imaging_correction[0].event_uuid) + "'>MISSING ACQUISITION</a></td></tr>" + 
                "<tr><td>Start</td><td>2018-07-21T08:36:08.255634</td></tr>" + 
                "<tr><td>Stop</td><td>2018-07-21T09:08:50.195941</td></tr>" + 
                "<tr><td>Duration(m)</td><td>32.699</td></tr>" + 
                "<tr><td>Plan file</td><td>S2A_NPPF.EOF</td></tr>" + 
                '<tr><td>Planned imaging</td><td><a href="/eboa_nav/query-event-links/' + str(planned_cut_imaging[0].event_uuid) + '"><i class="fa fa-link"></i></a></td></tr>' + 
                "</table>",
                "geometries": [
                        {'value': 'POLYGON ((101.528355 79.738353, 98.393294 79.554394, 95.372456 79.34158499999999, 92.47433599999999 79.101615, 89.704358 78.83623299999999, 87.065195 78.547203, 84.557168 78.236266, 82.178646 77.905114, 79.92652200000001 77.555353, 77.796533 77.188502, 75.78361 76.80598500000001, 73.882164 76.409121, 72.086314 75.999127, 70.390066 75.577118, 68.787451 75.144115, 67.27263000000001 74.701048, 65.839963 74.248763, 64.484058 73.788026, 63.199803 73.319535, 61.98238 72.84392099999999, 60.82727 72.361756, 59.730252 71.87356, 58.687393 71.379802, 57.69504 70.880909, 56.749802 70.377269, 55.848538 69.86923400000001, 54.988339 69.357125, 54.166514 68.841234, 53.380572 68.321826, 52.628211 67.799145, 51.907284 67.273414, 51.215837 66.74483499999999, 50.552046 66.21359200000001, 49.914221 65.679856, 49.300795 65.14378499999999, 48.710317 64.605521, 48.141439 64.06519900000001, 47.592911 63.522938, 47.063571 62.978854, 46.552336 62.433049, 46.058203 61.88562, 45.580233 61.336656, 45.117553 60.786241, 44.669348 60.23445, 44.234857 59.681356, 43.813369 59.127025, 43.404219 58.571519, 43.006785 58.014895, 42.620482 57.457208, 42.244763 56.898507, 41.879116 56.33884, 41.523059 55.778251, 41.176136 55.216781, 40.837913 54.65447, 40.507999 54.091353, 40.186016 53.527465, 39.871607 52.962837, 39.564437 52.3975, 39.264186 51.831483, 38.970556 51.264812, 38.683263 50.697513, 38.402038 50.12961, 38.126626 49.561125, 37.856788 48.992081, 37.592294 48.422497, 37.332928 47.852393, 37.078485 47.281788, 36.828768 46.710698, 36.583593 46.139141, 36.342781 45.567132, 36.106166 44.994686, 35.873587 44.421818, 35.644892 43.848541, 35.419934 43.274869, 35.198576 42.700813, 34.980684 42.126386, 34.766127 41.5516, 34.554789 40.976465, 34.346555 40.400992, 34.141315 39.825191, 33.938963 39.249071, 33.739397 38.672642, 33.542521 38.095913, 33.348241 37.518892, 33.156469 36.941588, 32.967118 36.364009, 32.780106 35.786163, 32.595355 35.208056, 32.412788 34.629697, 32.232333 34.051093, 32.053919 33.472249, 31.877479 32.893174, 31.702948 32.313873, 31.530263 31.734352, 31.359365 31.154617, 31.190194 30.574676, 31.022695 29.994532, 30.856813 29.414192, 30.692496 28.833661, 30.52969 28.252945, 30.368351 27.672049, 30.208431 27.090977, 30.049883 26.509735, 29.892665 25.928328, 29.736733 25.34676, 29.582046 24.765036, 29.428563 24.183161, 29.276246 23.601139, 29.125056 23.018975, 28.974958 22.436672, 28.825915 21.854236, 28.677892 21.27167, 28.530857 20.688979, 28.384776 20.106167, 28.239618 19.523237, 28.095351 18.940194, 27.951945 18.357042, 27.809371 17.773784, 27.667601 17.190425, 27.526605 16.606967, 27.386357 16.023415, 27.24683 15.439774, 27.107997 14.856045, 26.969834 14.272233, 26.832316 13.688341, 26.695417 13.104374, 26.559115 12.520334, 26.423385 11.936225, 26.288205 11.352051, 26.153552 10.767815, 26.019404 10.18352, 25.885738 9.599170000000001, 25.752535 9.014768, 25.619771 8.430318, 25.487428 7.845822, 25.355483 7.261285, 25.223917 6.676709, 25.092711 6.092098, 24.961844 5.507454, 24.831296 4.922782, 24.701049 4.338085, 24.571084 3.753365, 24.441382 3.168625, 24.311923 2.58387, 24.182691 1.999102, 24.053667 1.414324, 23.924832 0.8295400000000001, 23.796168 0.244752, 23.667656 -0.340037, 23.53928 -0.924823, 23.411021 -1.509603, 23.282861 -2.094374, 23.154782 -2.679134, 23.026766 -3.263878, 22.898797 -3.848605, 22.770855 -4.433311, 22.642923 -5.017993, 22.514983 -5.602648, 22.387017 -6.187273, 22.259008 -6.771866, 22.130936 -7.356423, 22.002785 -7.940941, 21.874535 -8.525416999999999, 21.746168 -9.109848, 21.617666 -9.694233000000001, 21.489009 -10.278566, 21.36018 -10.862846, 21.231159 -11.44707, 21.10193 -12.031235, 20.972471 -12.615337, 20.84276 -13.199375, 20.712779 -13.783345, 20.582507 -14.367243, 20.451923 -14.951069, 20.321007 -15.534817, 20.189737 -16.118486, 20.058092 -16.702073, 19.926048 -17.285575, 19.793585 -17.868989, 19.660679 -18.452311, 19.527306 -19.03554, 19.393443 -19.618672, 19.259065 -20.201704, 19.124148 -20.784634, 18.988665 -21.367458, 18.852591 -21.950174, 18.7159 -22.532779, 18.578563 -23.115269, 18.440552 -23.697642, 18.301839 -24.279894, 18.162396 -24.862023, 18.022195 -25.444026, 17.8812 -26.0259, 17.73938 -26.607641, 17.596701 -27.189247, 17.453128 -27.770714, 17.308628 -28.352039, 17.163163 -28.933219, 17.016695 -29.514251, 16.869187 -30.095131, 13.933539 -29.491417, 14.098138 -28.912293, 14.261223 -28.33296, 14.422844 -27.753423, 14.583047 -27.173686, 14.741878 -26.593755, 14.89938 -26.013634, 15.055598 -25.433327, 15.210571 -24.852841, 15.36434 -24.272178, 15.516947 -23.691343, 15.668426 -23.11034, 15.818815 -22.529175, 15.968148 -21.94785, 16.116461 -21.36637, 16.263787 -20.784739, 16.410159 -20.202961, 16.555607 -19.62104, 16.700165 -19.038979, 16.843861 -18.456783, 16.986725 -17.874455, 17.128786 -17.292, 17.270072 -16.70942, 17.41061 -16.126719, 17.550427 -15.543901, 17.689548 -14.96097, 17.828001 -14.377929, 17.965808 -13.794781, 18.102996 -13.211531, 18.239588 -12.628181, 18.375607 -12.044735, 18.511076 -11.461196, 18.646018 -10.877568, 18.780456 -10.293853, 18.914411 -9.710056, 19.047904 -9.12618, 19.180957 -8.542228, 19.31359 -7.958203, 19.445824 -7.374108, 19.577679 -6.789947, 19.709176 -6.205723, 19.840332 -5.62144, 19.971169 -5.037099, 20.101706 -4.452706, 20.231961 -3.868262, 20.361954 -3.28377, 20.491703 -2.699235, 20.621226 -2.114659, 20.750543 -1.530045, 20.879671 -0.945397, 21.008628 -0.360717, 21.137434 0.223991, 21.266105 0.808725, 21.39466 1.393481, 21.523116 1.978257, 21.651492 2.563048, 21.779804 3.147853, 21.908071 3.732668, 22.03631 4.31749, 22.164541 4.902317, 22.29278 5.487144, 22.421046 6.071969, 22.549357 6.656789, 22.677731 7.241602, 22.806186 7.826403, 22.934741 8.41119, 23.063414 8.995960999999999, 23.192224 9.580711000000001, 23.321189 10.165439, 23.45033 10.750141, 23.579663 11.334813, 23.70921 11.919454, 23.83899 12.504061, 23.969023 13.088629, 24.099328 13.673157, 24.229927 14.257641, 24.36084 14.842078, 24.492088 15.426466, 24.623693 16.010801, 24.755672 16.59508, 24.888051 17.179302, 25.020852 17.763461, 25.1541 18.347556, 25.287817 18.931583, 25.422028 19.51554, 25.556756 20.099424, 25.692028 20.68323, 25.827869 21.266957, 25.964305 21.850601, 26.101363 22.43416, 26.23907 23.017629, 26.377456 23.601007, 26.516548 24.184289, 26.656377 24.767473, 26.796974 25.350556, 26.93837 25.933533, 27.080597 26.516404, 27.223689 27.099162, 27.367681 27.681807, 27.512607 28.264333, 27.658505 28.846738, 27.805411 29.429019, 27.95336 30.011172, 28.102397 30.593193, 28.252563 31.175079, 28.403902 31.756827, 28.556459 32.338431, 28.71028 32.91989, 28.865413 33.501198, 29.021907 34.082352, 29.179815 34.663347, 29.339189 35.244181, 29.500086 35.824848, 29.662563 36.405344, 29.82668 36.985665, 29.9925 37.565806, 30.160087 38.145763, 30.32951 38.72553, 30.500839 39.305103, 30.674149 39.884477, 30.849515 40.463646, 31.027018 41.042604, 31.206743 41.621347, 31.388777 42.199868, 31.573211 42.77816, 31.760133 43.356219, 31.94965 43.934037, 32.14187 44.511607, 32.336903 45.088922, 32.534866 45.665975, 32.73588 46.242756, 32.940074 46.819259, 33.147583 47.395475, 33.358548 47.971394, 33.573118 48.547006, 33.791452 49.122303, 34.013715 49.697273, 34.240083 50.271906, 34.470741 50.846188, 34.705884 51.420109, 34.94572 51.993655, 35.190468 52.566812, 35.440361 53.139565, 35.695644 53.711899, 35.95658 54.283798, 36.223446 54.855243, 36.496539 55.426215, 36.776173 55.996696, 37.062667 56.566664, 37.356393 57.136096, 37.657733 57.704968, 37.967096 58.273253, 38.284919 58.840923, 38.611667 59.407948, 38.947843 59.974297, 39.293984 60.539933, 39.650668 61.10482, 40.018516 61.668918, 40.398198 62.232182, 40.790436 62.794566, 41.196009 63.356018, 41.61576 63.916483, 42.050602 64.47590099999999, 42.501524 65.034205, 42.969599 65.591324, 43.455996 66.14718000000001, 43.961985 66.701688, 44.488952 67.25475299999999, 45.03841 67.806273, 45.612014 68.35613499999999, 46.211575 68.904214, 46.839057 69.45037499999999, 47.496664 69.99446399999999, 48.186803 70.536312, 48.91212 71.075732, 49.675538 71.612514, 50.480285 72.14642600000001, 51.329936 72.677209, 52.228449 73.20457, 53.180217 73.728182, 54.190117 74.247676, 55.263568 74.762637, 56.406592 75.272594, 57.625885 75.77701399999999, 58.928884 76.27529199999999, 60.323843 76.766739, 61.819901 77.25057, 63.427147 77.725889, 65.15666299999999 78.19167400000001, 67.02054699999999 78.646756, 69.03187800000001 79.0898, 71.204616 79.519285, 73.553397 79.93347900000001, 76.093174 80.330421, 78.83862000000001 80.707914, 81.803448 81.06348699999999, 84.999177 81.394426, 88.433741 81.69779, 92.109756 81.970454, 96.02262 82.209198, 101.528355 79.738353))', 'name': 'footprint'},
                ],
                "style": {
                    "stroke_color": "red",
                    "fill_color": "rgba(255,0,0,0.3)",
                }
            },
        ]

        returned_map_l2a_missing_tooltip_info = self.driver.execute_script('return missing_segments_l2a;')
        assert map_l2a_missing_tooltip_info == returned_map_l2a_missing_tooltip_info

        # Check whether the timeliness is displayed
        timeline_section = self.driver.find_element_by_id("dhus-completeness-e2e-timeline-section")

        condition = timeline_section.is_displayed()

        assert condition is True

        l1c_timeline_section = self.driver.find_element_by_id("dhus-completeness-l1c-e2e-timeline-section")

        condition = l1c_timeline_section.is_displayed()

        assert condition is True

        l2a_timeline_section = self.driver.find_element_by_id("dhus-completeness-l2a-e2e-timeline-section")

        condition = l2a_timeline_section.is_displayed()

        assert condition is True

        # Check timeliness tooltip
        timeliness_l1c_tooltip_info = []

        returned_timeliness_l1c_tooltip_info = self.driver.execute_script('return e2e_timeliness_tiles_published_in_dhus_l1c;')
        assert timeliness_l1c_tooltip_info == returned_timeliness_l1c_tooltip_info
        
        timeliness_l2a_tooltip_info = []

        returned_timeliness_l2a_tooltip_info = self.driver.execute_script('return e2e_timeliness_tiles_published_in_dhus_l2a;')
        assert timeliness_l2a_tooltip_info == returned_timeliness_l2a_tooltip_info

        # Missing dissemination table
        missing_table = self.driver.find_element_by_id("dhus-completeness-list-table-MISSING")

        # Row 1
        level = missing_table.find_element_by_xpath("tbody/tr[1]/td[1]")

        assert level.text == "L1C"

        satellite = missing_table.find_element_by_xpath("tbody/tr[1]/td[2]")

        assert satellite.text == "S2A"

        orbit = missing_table.find_element_by_xpath("tbody/tr[1]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = missing_table.find_element_by_xpath("tbody/tr[1]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:36:08.255634"

        stop_datastrip = missing_table.find_element_by_xpath("tbody/tr[1]/td[5]")

        assert stop_datastrip.text == "2018-07-21T09:08:50.195941"

        datastrip = missing_table.find_element_by_xpath("tbody/tr[1]/td[6]")

        assert datastrip.text == "N/A"

        status = missing_table.find_element_by_xpath("tbody/tr[1]/td[7]")

        assert status.text == "MISSING ACQUISITION"

        tiles = missing_table.find_element_by_xpath("tbody/tr[1]/td[8]")

        assert tiles.text == "N/A"

        tiles_dam = missing_table.find_element_by_xpath("tbody/tr[1]/td[9]")

        assert tiles_dam.text == "N/A"

        tiles_dhus = missing_table.find_element_by_xpath("tbody/tr[1]/td[10]")

        assert tiles_dhus.text == "N/A"

        tiles_published_dhus = missing_table.find_element_by_xpath("tbody/tr[1]/td[11]")

        assert tiles_published_dhus.text == "N/A"

        mean_time_dhus = missing_table.find_element_by_xpath("tbody/tr[1]/td[12]")

        assert mean_time_dhus.text == "N/A"

        mean_time_dhus_publication = missing_table.find_element_by_xpath("tbody/tr[1]/td[13]")

        assert mean_time_dhus_publication.text == "N/A"

        datatake = missing_table.find_element_by_xpath("tbody/tr[1]/td[14]")

        assert datatake.text == "N/A"

        start_msi = missing_table.find_element_by_xpath("tbody/tr[1]/td[15]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = missing_table.find_element_by_xpath("tbody/tr[1]/td[16]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

        # Row 2
        level = missing_table.find_element_by_xpath("tbody/tr[2]/td[1]")

        assert level.text == "L2A"

        satellite = missing_table.find_element_by_xpath("tbody/tr[2]/td[2]")

        assert satellite.text == "S2A"

        orbit = missing_table.find_element_by_xpath("tbody/tr[2]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = missing_table.find_element_by_xpath("tbody/tr[2]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:36:08.255634"

        stop_datastrip = missing_table.find_element_by_xpath("tbody/tr[2]/td[5]")

        assert stop_datastrip.text == "2018-07-21T09:08:50.195941"

        datastrip = missing_table.find_element_by_xpath("tbody/tr[2]/td[6]")

        assert datastrip.text == "N/A"

        status = missing_table.find_element_by_xpath("tbody/tr[2]/td[7]")

        assert status.text == "MISSING ACQUISITION"

        tiles = missing_table.find_element_by_xpath("tbody/tr[2]/td[8]")

        assert tiles.text == "N/A"

        tiles_dam = missing_table.find_element_by_xpath("tbody/tr[2]/td[9]")

        assert tiles_dam.text == "N/A"

        tiles_dhus = missing_table.find_element_by_xpath("tbody/tr[2]/td[10]")

        assert tiles_dhus.text == "N/A"

        tiles_published_dhus = missing_table.find_element_by_xpath("tbody/tr[2]/td[11]")

        assert tiles_published_dhus.text == "N/A"

        mean_time_dhus = missing_table.find_element_by_xpath("tbody/tr[2]/td[12]")

        assert mean_time_dhus.text == "N/A"

        mean_time_dhus_publication = missing_table.find_element_by_xpath("tbody/tr[2]/td[13]")

        assert mean_time_dhus_publication.text == "N/A"

        datatake = missing_table.find_element_by_xpath("tbody/tr[2]/td[14]")

        assert datatake.text == "N/A"

        start_msi = missing_table.find_element_by_xpath("tbody/tr[2]/td[15]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = missing_table.find_element_by_xpath("tbody/tr[2]/td[16]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

        # Data availability table
        complete_table = self.driver.find_element_by_id("dhus-completeness-list-table-COMPLETE")

        # Row 1
        level = complete_table.find_element_by_xpath("tbody/tr[1]/td[1]")

        assert level.text == "L1C"

        satellite = complete_table.find_element_by_xpath("tbody/tr[1]/td[2]")

        assert satellite.text == "S2A"

        orbit = complete_table.find_element_by_xpath("tbody/tr[1]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = complete_table.find_element_by_xpath("tbody/tr[1]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:36:08.255634"

        stop_datastrip = complete_table.find_element_by_xpath("tbody/tr[1]/td[5]")

        assert stop_datastrip.text == "2018-07-21T09:08:50.195941"

        datastrip = complete_table.find_element_by_xpath("tbody/tr[1]/td[6]")

        assert datastrip.text == "N/A"

        status = complete_table.find_element_by_xpath("tbody/tr[1]/td[7]")

        assert status.text == "MISSING ACQUISITION"

        tiles = complete_table.find_element_by_xpath("tbody/tr[1]/td[8]")

        assert tiles.text == "N/A"

        tiles_dam = complete_table.find_element_by_xpath("tbody/tr[1]/td[9]")

        assert tiles_dam.text == "N/A"

        tiles_dhus = complete_table.find_element_by_xpath("tbody/tr[1]/td[10]")

        assert tiles_dhus.text == "N/A"

        tiles_published_dhus = complete_table.find_element_by_xpath("tbody/tr[1]/td[11]")

        assert tiles_published_dhus.text == "N/A"

        mean_time_dhus = complete_table.find_element_by_xpath("tbody/tr[1]/td[12]")

        assert mean_time_dhus.text == "N/A"

        mean_time_dhus_publication = complete_table.find_element_by_xpath("tbody/tr[1]/td[13]")

        assert mean_time_dhus_publication.text == "N/A"

        datatake = complete_table.find_element_by_xpath("tbody/tr[1]/td[14]")

        assert datatake.text == "N/A"

        start_msi = complete_table.find_element_by_xpath("tbody/tr[1]/td[15]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = complete_table.find_element_by_xpath("tbody/tr[1]/td[16]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

        # Row 2
        level = complete_table.find_element_by_xpath("tbody/tr[2]/td[1]")

        assert level.text == "L2A"

        satellite = complete_table.find_element_by_xpath("tbody/tr[2]/td[2]")

        assert satellite.text == "S2A"

        orbit = complete_table.find_element_by_xpath("tbody/tr[2]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = complete_table.find_element_by_xpath("tbody/tr[2]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:36:08.255634"

        stop_datastrip = complete_table.find_element_by_xpath("tbody/tr[2]/td[5]")

        assert stop_datastrip.text == "2018-07-21T09:08:50.195941"

        datastrip = complete_table.find_element_by_xpath("tbody/tr[2]/td[6]")

        assert datastrip.text == "N/A"

        status = complete_table.find_element_by_xpath("tbody/tr[2]/td[7]")

        assert status.text == "MISSING ACQUISITION"

        tiles = complete_table.find_element_by_xpath("tbody/tr[2]/td[8]")

        assert tiles.text == "N/A"

        tiles_dam = complete_table.find_element_by_xpath("tbody/tr[2]/td[9]")

        assert tiles_dam.text == "N/A"

        tiles_dhus = complete_table.find_element_by_xpath("tbody/tr[2]/td[10]")

        assert tiles_dhus.text == "N/A"

        tiles_published_dhus = complete_table.find_element_by_xpath("tbody/tr[2]/td[11]")

        assert tiles_published_dhus.text == "N/A"

        mean_time_dhus = complete_table.find_element_by_xpath("tbody/tr[2]/td[12]")

        assert mean_time_dhus.text == "N/A"

        mean_time_dhus_publication = complete_table.find_element_by_xpath("tbody/tr[2]/td[13]")

        assert mean_time_dhus_publication.text == "N/A"

        datatake = complete_table.find_element_by_xpath("tbody/tr[2]/td[14]")

        assert datatake.text == "N/A"

        start_msi = complete_table.find_element_by_xpath("tbody/tr[2]/td[15]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = complete_table.find_element_by_xpath("tbody/tr[2]/td[16]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

    def test_dhus_completeness_only_nppf_and_orbpre_and_rep_pass(self):

        filename = "S2A_NPPF.EOF"
        file_path = os.path.dirname(os.path.abspath(__file__)) + "/inputs/" + filename

        exit_status = ingestion.command_process_file("s2boa.ingestions.ingestion_nppf.ingestion_nppf", file_path, "2018-01-01T00:00:00")

        assert len([item for item in exit_status if item["status"] != eboa_engine.exit_codes["OK"]["status"]]) == 0

        filename = "S2A_ORBPRE.EOF"
        file_path = os.path.dirname(os.path.abspath(__file__)) + "/inputs/" + filename

        exit_status = ingestion.command_process_file("s2boa.ingestions.ingestion_orbpre.ingestion_orbpre", file_path, "2018-01-01T00:00:00")

        assert len([item for item in exit_status if item["status"] != eboa_engine.exit_codes["OK"]["status"]]) == 0

        filename = "S2A_REP_PASS_NO_GAPS.EOF"
        file_path = os.path.dirname(os.path.abspath(__file__)) + "/inputs/" + filename

        exit_status = ingestion.command_process_file("s2boa.ingestions.ingestion_dfep_acquisition.ingestion_dfep_acquisition", file_path, "2018-01-01T00:00:00")

        assert len([item for item in exit_status if item["status"] != eboa_engine.exit_codes["OK"]["status"]]) == 0

        wait = WebDriverWait(self.driver,5)

        self.driver.get("http://localhost:5000/views/dhus-completeness")

        functions.query(self.driver, wait, "S2A", start = "2018-07-01T00:00:00", stop = "2018-07-31T23:59:59", start_orbit = "17600", stop_orbit = "17800", table_details = True, map = True, station_reports = True)

        # Check summary expected msi
        summary_expected_msi = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-expected-msi")))

        assert summary_expected_msi

        assert summary_expected_msi.text == "33.033"

        # Check summary acquired msi
        summary_acquired_msi = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-acquired-msi")))

        assert summary_acquired_msi

        assert summary_acquired_msi.text == "1.804"

        # Check summary processed to l1c msi
        summary_processed_l1c_msi = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-processed-to-l1c-msi")))

        assert summary_processed_l1c_msi

        assert summary_processed_l1c_msi.text == "0.0"

        # Check summary processed to l2a msi
        summary_processed_l2a_msi = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-processed-to-l2a-msi")))

        assert summary_processed_l2a_msi

        assert summary_processed_l2a_msi.text == "0.0"

        # Check summary generated to l1c tiles
        summary_generated_l1c_tiles = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-generated-l1c-tiles")))

        assert summary_generated_l1c_tiles

        assert summary_generated_l1c_tiles.text == "0"

        # Check summary generated to l2a tiles
        summary_generated_l2a_tiles = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-generated-l2a-tiles")))

        assert summary_generated_l2a_tiles

        assert summary_generated_l2a_tiles.text == "0"

        # Check summary missing acquistion
        summary_missing_acquistion = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-missing-acquistion")))

        assert summary_missing_acquistion

        assert summary_missing_acquistion.text == "30.895"

        # Check summary missing processing l1c
        summary_missing_processing_l1c = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-missing-processing-l1c")))

        assert summary_missing_processing_l1c

        assert summary_missing_processing_l1c.text == "32.699"

        # Check summary missing processing l2a
        summary_missing_processing_l2a = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-missing-processing-l2a")))

        assert summary_missing_processing_l2a

        assert summary_missing_processing_l2a.text == "32.699"

        # Check number of elements in summary
        assert len(summary_expected_msi.find_elements_by_xpath("../../../div")) == 9

        # Check whether the map is displayed
        map_section = self.driver.find_element_by_id("dhus-completeness-on-map-section")

        condition = map_section.is_displayed()

        assert condition is True

        l1c_map_section = self.driver.find_element_by_id("dhus-completeness-l1c-on-map-section")

        condition = l1c_map_section.is_displayed()

        assert condition is True

        l2a_map_section = self.driver.find_element_by_id("dhus-completeness-l2a-on-map-section")

        condition = l2a_map_section.is_displayed()

        assert condition is True

        # Check map missing segments tooltip
        planned_imaging_processing_completeness_l1c_1 = self.query_eboa.get_events(gauge_names ={"filter": "PLANNED_IMAGING_PROCESSING_COMPLETENESS_L1C", "op":"=="},
                                                                                start_filters =[{"date": "2018-07-21T08:36:08.255634", "op":"=="}],
                                                                                stop_filters = [{"date": "2018-07-21T09:08:50.195941", "op": "=="}])
        planned_imaging_correction = self.query_eboa.get_events(gauge_names ={"filter": "PLANNED_CUT_IMAGING_CORRECTION", "op":"=="})
        planned_cut_imaging = self.query_eboa.get_events(gauge_names ={"filter": "PLANNED_CUT_IMAGING", "op":"=="})

        map_l1c_missing_tooltip_info = [
            {
                "id": str(planned_imaging_processing_completeness_l1c_1[0].event_uuid),
                "tooltip": "<table border='1'>" + 
                "<tr><td>UUID</td><td>" + str(planned_imaging_processing_completeness_l1c_1[0].event_uuid) + "</td></tr>" + 
                "<tr><td>Satellite</td><td>S2A</td></tr><tr>" + 
                "<td>Orbit</td><td>16077</td></tr>" + 
                "<tr><td>Datastrip</td><td>N/A</td></tr>" + 
                "<tr><td>Status</td><td><a class='bold-red' href='/views/dhus-completeness-by-datatake/" + str(planned_imaging_correction[0].event_uuid) + "'>MISSING ACQUISITION</a></td></tr>" + 
                "<tr><td>Start</td><td>2018-07-21T08:36:08.255634</td></tr>" + 
                "<tr><td>Stop</td><td>2018-07-21T09:08:50.195941</td></tr>" + 
                "<tr><td>Duration(m)</td><td>32.699</td></tr>" + 
                "<tr><td>Plan file</td><td>S2A_NPPF.EOF</td></tr>" + 
                '<tr><td>Planned imaging</td><td><a href="/eboa_nav/query-event-links/' + str(planned_cut_imaging[0].event_uuid) + '"><i class="fa fa-link"></i></a></td></tr>' + 
                "</table>",
                "geometries": [
                        {'value': 'POLYGON ((101.528355 79.738353, 98.393294 79.554394, 95.372456 79.34158499999999, 92.47433599999999 79.101615, 89.704358 78.83623299999999, 87.065195 78.547203, 84.557168 78.236266, 82.178646 77.905114, 79.92652200000001 77.555353, 77.796533 77.188502, 75.78361 76.80598500000001, 73.882164 76.409121, 72.086314 75.999127, 70.390066 75.577118, 68.787451 75.144115, 67.27263000000001 74.701048, 65.839963 74.248763, 64.484058 73.788026, 63.199803 73.319535, 61.98238 72.84392099999999, 60.82727 72.361756, 59.730252 71.87356, 58.687393 71.379802, 57.69504 70.880909, 56.749802 70.377269, 55.848538 69.86923400000001, 54.988339 69.357125, 54.166514 68.841234, 53.380572 68.321826, 52.628211 67.799145, 51.907284 67.273414, 51.215837 66.74483499999999, 50.552046 66.21359200000001, 49.914221 65.679856, 49.300795 65.14378499999999, 48.710317 64.605521, 48.141439 64.06519900000001, 47.592911 63.522938, 47.063571 62.978854, 46.552336 62.433049, 46.058203 61.88562, 45.580233 61.336656, 45.117553 60.786241, 44.669348 60.23445, 44.234857 59.681356, 43.813369 59.127025, 43.404219 58.571519, 43.006785 58.014895, 42.620482 57.457208, 42.244763 56.898507, 41.879116 56.33884, 41.523059 55.778251, 41.176136 55.216781, 40.837913 54.65447, 40.507999 54.091353, 40.186016 53.527465, 39.871607 52.962837, 39.564437 52.3975, 39.264186 51.831483, 38.970556 51.264812, 38.683263 50.697513, 38.402038 50.12961, 38.126626 49.561125, 37.856788 48.992081, 37.592294 48.422497, 37.332928 47.852393, 37.078485 47.281788, 36.828768 46.710698, 36.583593 46.139141, 36.342781 45.567132, 36.106166 44.994686, 35.873587 44.421818, 35.644892 43.848541, 35.419934 43.274869, 35.198576 42.700813, 34.980684 42.126386, 34.766127 41.5516, 34.554789 40.976465, 34.346555 40.400992, 34.141315 39.825191, 33.938963 39.249071, 33.739397 38.672642, 33.542521 38.095913, 33.348241 37.518892, 33.156469 36.941588, 32.967118 36.364009, 32.780106 35.786163, 32.595355 35.208056, 32.412788 34.629697, 32.232333 34.051093, 32.053919 33.472249, 31.877479 32.893174, 31.702948 32.313873, 31.530263 31.734352, 31.359365 31.154617, 31.190194 30.574676, 31.022695 29.994532, 30.856813 29.414192, 30.692496 28.833661, 30.52969 28.252945, 30.368351 27.672049, 30.208431 27.090977, 30.049883 26.509735, 29.892665 25.928328, 29.736733 25.34676, 29.582046 24.765036, 29.428563 24.183161, 29.276246 23.601139, 29.125056 23.018975, 28.974958 22.436672, 28.825915 21.854236, 28.677892 21.27167, 28.530857 20.688979, 28.384776 20.106167, 28.239618 19.523237, 28.095351 18.940194, 27.951945 18.357042, 27.809371 17.773784, 27.667601 17.190425, 27.526605 16.606967, 27.386357 16.023415, 27.24683 15.439774, 27.107997 14.856045, 26.969834 14.272233, 26.832316 13.688341, 26.695417 13.104374, 26.559115 12.520334, 26.423385 11.936225, 26.288205 11.352051, 26.153552 10.767815, 26.019404 10.18352, 25.885738 9.599170000000001, 25.752535 9.014768, 25.619771 8.430318, 25.487428 7.845822, 25.355483 7.261285, 25.223917 6.676709, 25.092711 6.092098, 24.961844 5.507454, 24.831296 4.922782, 24.701049 4.338085, 24.571084 3.753365, 24.441382 3.168625, 24.311923 2.58387, 24.182691 1.999102, 24.053667 1.414324, 23.924832 0.8295400000000001, 23.796168 0.244752, 23.667656 -0.340037, 23.53928 -0.924823, 23.411021 -1.509603, 23.282861 -2.094374, 23.154782 -2.679134, 23.026766 -3.263878, 22.898797 -3.848605, 22.770855 -4.433311, 22.642923 -5.017993, 22.514983 -5.602648, 22.387017 -6.187273, 22.259008 -6.771866, 22.130936 -7.356423, 22.002785 -7.940941, 21.874535 -8.525416999999999, 21.746168 -9.109848, 21.617666 -9.694233000000001, 21.489009 -10.278566, 21.36018 -10.862846, 21.231159 -11.44707, 21.10193 -12.031235, 20.972471 -12.615337, 20.84276 -13.199375, 20.712779 -13.783345, 20.582507 -14.367243, 20.451923 -14.951069, 20.321007 -15.534817, 20.189737 -16.118486, 20.058092 -16.702073, 19.926048 -17.285575, 19.793585 -17.868989, 19.660679 -18.452311, 19.527306 -19.03554, 19.393443 -19.618672, 19.259065 -20.201704, 19.124148 -20.784634, 18.988665 -21.367458, 18.852591 -21.950174, 18.7159 -22.532779, 18.578563 -23.115269, 18.440552 -23.697642, 18.301839 -24.279894, 18.162396 -24.862023, 18.022195 -25.444026, 17.8812 -26.0259, 17.73938 -26.607641, 17.596701 -27.189247, 17.453128 -27.770714, 17.308628 -28.352039, 17.163163 -28.933219, 17.016695 -29.514251, 16.869187 -30.095131, 13.933539 -29.491417, 14.098138 -28.912293, 14.261223 -28.33296, 14.422844 -27.753423, 14.583047 -27.173686, 14.741878 -26.593755, 14.89938 -26.013634, 15.055598 -25.433327, 15.210571 -24.852841, 15.36434 -24.272178, 15.516947 -23.691343, 15.668426 -23.11034, 15.818815 -22.529175, 15.968148 -21.94785, 16.116461 -21.36637, 16.263787 -20.784739, 16.410159 -20.202961, 16.555607 -19.62104, 16.700165 -19.038979, 16.843861 -18.456783, 16.986725 -17.874455, 17.128786 -17.292, 17.270072 -16.70942, 17.41061 -16.126719, 17.550427 -15.543901, 17.689548 -14.96097, 17.828001 -14.377929, 17.965808 -13.794781, 18.102996 -13.211531, 18.239588 -12.628181, 18.375607 -12.044735, 18.511076 -11.461196, 18.646018 -10.877568, 18.780456 -10.293853, 18.914411 -9.710056, 19.047904 -9.12618, 19.180957 -8.542228, 19.31359 -7.958203, 19.445824 -7.374108, 19.577679 -6.789947, 19.709176 -6.205723, 19.840332 -5.62144, 19.971169 -5.037099, 20.101706 -4.452706, 20.231961 -3.868262, 20.361954 -3.28377, 20.491703 -2.699235, 20.621226 -2.114659, 20.750543 -1.530045, 20.879671 -0.945397, 21.008628 -0.360717, 21.137434 0.223991, 21.266105 0.808725, 21.39466 1.393481, 21.523116 1.978257, 21.651492 2.563048, 21.779804 3.147853, 21.908071 3.732668, 22.03631 4.31749, 22.164541 4.902317, 22.29278 5.487144, 22.421046 6.071969, 22.549357 6.656789, 22.677731 7.241602, 22.806186 7.826403, 22.934741 8.41119, 23.063414 8.995960999999999, 23.192224 9.580711000000001, 23.321189 10.165439, 23.45033 10.750141, 23.579663 11.334813, 23.70921 11.919454, 23.83899 12.504061, 23.969023 13.088629, 24.099328 13.673157, 24.229927 14.257641, 24.36084 14.842078, 24.492088 15.426466, 24.623693 16.010801, 24.755672 16.59508, 24.888051 17.179302, 25.020852 17.763461, 25.1541 18.347556, 25.287817 18.931583, 25.422028 19.51554, 25.556756 20.099424, 25.692028 20.68323, 25.827869 21.266957, 25.964305 21.850601, 26.101363 22.43416, 26.23907 23.017629, 26.377456 23.601007, 26.516548 24.184289, 26.656377 24.767473, 26.796974 25.350556, 26.93837 25.933533, 27.080597 26.516404, 27.223689 27.099162, 27.367681 27.681807, 27.512607 28.264333, 27.658505 28.846738, 27.805411 29.429019, 27.95336 30.011172, 28.102397 30.593193, 28.252563 31.175079, 28.403902 31.756827, 28.556459 32.338431, 28.71028 32.91989, 28.865413 33.501198, 29.021907 34.082352, 29.179815 34.663347, 29.339189 35.244181, 29.500086 35.824848, 29.662563 36.405344, 29.82668 36.985665, 29.9925 37.565806, 30.160087 38.145763, 30.32951 38.72553, 30.500839 39.305103, 30.674149 39.884477, 30.849515 40.463646, 31.027018 41.042604, 31.206743 41.621347, 31.388777 42.199868, 31.573211 42.77816, 31.760133 43.356219, 31.94965 43.934037, 32.14187 44.511607, 32.336903 45.088922, 32.534866 45.665975, 32.73588 46.242756, 32.940074 46.819259, 33.147583 47.395475, 33.358548 47.971394, 33.573118 48.547006, 33.791452 49.122303, 34.013715 49.697273, 34.240083 50.271906, 34.470741 50.846188, 34.705884 51.420109, 34.94572 51.993655, 35.190468 52.566812, 35.440361 53.139565, 35.695644 53.711899, 35.95658 54.283798, 36.223446 54.855243, 36.496539 55.426215, 36.776173 55.996696, 37.062667 56.566664, 37.356393 57.136096, 37.657733 57.704968, 37.967096 58.273253, 38.284919 58.840923, 38.611667 59.407948, 38.947843 59.974297, 39.293984 60.539933, 39.650668 61.10482, 40.018516 61.668918, 40.398198 62.232182, 40.790436 62.794566, 41.196009 63.356018, 41.61576 63.916483, 42.050602 64.47590099999999, 42.501524 65.034205, 42.969599 65.591324, 43.455996 66.14718000000001, 43.961985 66.701688, 44.488952 67.25475299999999, 45.03841 67.806273, 45.612014 68.35613499999999, 46.211575 68.904214, 46.839057 69.45037499999999, 47.496664 69.99446399999999, 48.186803 70.536312, 48.91212 71.075732, 49.675538 71.612514, 50.480285 72.14642600000001, 51.329936 72.677209, 52.228449 73.20457, 53.180217 73.728182, 54.190117 74.247676, 55.263568 74.762637, 56.406592 75.272594, 57.625885 75.77701399999999, 58.928884 76.27529199999999, 60.323843 76.766739, 61.819901 77.25057, 63.427147 77.725889, 65.15666299999999 78.19167400000001, 67.02054699999999 78.646756, 69.03187800000001 79.0898, 71.204616 79.519285, 73.553397 79.93347900000001, 76.093174 80.330421, 78.83862000000001 80.707914, 81.803448 81.06348699999999, 84.999177 81.394426, 88.433741 81.69779, 92.109756 81.970454, 96.02262 82.209198, 101.528355 79.738353))', 'name': 'footprint'}
                ],
                "style": {
                    "stroke_color": "red",
                    "fill_color": "rgba(255,0,0,0.3)",
                }
            },
        ]

        returned_map_l1c_missing_tooltip_info = self.driver.execute_script('return missing_segments_l1c;')
        assert map_l1c_missing_tooltip_info == returned_map_l1c_missing_tooltip_info
        
        planned_imaging_processing_completeness_l2a = self.query_eboa.get_events(gauge_names ={"filter": "PLANNED_IMAGING_PROCESSING_COMPLETENESS_L2A", "op":"=="})
        
        map_l2a_missing_tooltip_info = [
            {
                "id": str(planned_imaging_processing_completeness_l2a[0].event_uuid),
                "tooltip": "<table border='1'>" + 
                "<tr><td>UUID</td><td>" + str(planned_imaging_processing_completeness_l2a[0].event_uuid) + "</td></tr>" + 
                "<tr><td>Satellite</td><td>S2A</td></tr><tr>" + 
                "<td>Orbit</td><td>16077</td></tr>" + 
                "<tr><td>Datastrip</td><td>N/A</td></tr>" + 
                "<tr><td>Status</td><td><a class='bold-red' href='/views/dhus-completeness-by-datatake/" + str(planned_imaging_correction[0].event_uuid) + "'>MISSING ACQUISITION</a></td></tr>" + 
                "<tr><td>Start</td><td>2018-07-21T08:36:08.255634</td></tr>" + 
                "<tr><td>Stop</td><td>2018-07-21T09:08:50.195941</td></tr>" + 
                "<tr><td>Duration(m)</td><td>32.699</td></tr>" + 
                "<tr><td>Plan file</td><td>S2A_NPPF.EOF</td></tr>" + 
                '<tr><td>Planned imaging</td><td><a href="/eboa_nav/query-event-links/' + str(planned_cut_imaging[0].event_uuid) + '"><i class="fa fa-link"></i></a></td></tr>' + 
                "</table>",
                "geometries": [
                        {'value': 'POLYGON ((101.528355 79.738353, 98.393294 79.554394, 95.372456 79.34158499999999, 92.47433599999999 79.101615, 89.704358 78.83623299999999, 87.065195 78.547203, 84.557168 78.236266, 82.178646 77.905114, 79.92652200000001 77.555353, 77.796533 77.188502, 75.78361 76.80598500000001, 73.882164 76.409121, 72.086314 75.999127, 70.390066 75.577118, 68.787451 75.144115, 67.27263000000001 74.701048, 65.839963 74.248763, 64.484058 73.788026, 63.199803 73.319535, 61.98238 72.84392099999999, 60.82727 72.361756, 59.730252 71.87356, 58.687393 71.379802, 57.69504 70.880909, 56.749802 70.377269, 55.848538 69.86923400000001, 54.988339 69.357125, 54.166514 68.841234, 53.380572 68.321826, 52.628211 67.799145, 51.907284 67.273414, 51.215837 66.74483499999999, 50.552046 66.21359200000001, 49.914221 65.679856, 49.300795 65.14378499999999, 48.710317 64.605521, 48.141439 64.06519900000001, 47.592911 63.522938, 47.063571 62.978854, 46.552336 62.433049, 46.058203 61.88562, 45.580233 61.336656, 45.117553 60.786241, 44.669348 60.23445, 44.234857 59.681356, 43.813369 59.127025, 43.404219 58.571519, 43.006785 58.014895, 42.620482 57.457208, 42.244763 56.898507, 41.879116 56.33884, 41.523059 55.778251, 41.176136 55.216781, 40.837913 54.65447, 40.507999 54.091353, 40.186016 53.527465, 39.871607 52.962837, 39.564437 52.3975, 39.264186 51.831483, 38.970556 51.264812, 38.683263 50.697513, 38.402038 50.12961, 38.126626 49.561125, 37.856788 48.992081, 37.592294 48.422497, 37.332928 47.852393, 37.078485 47.281788, 36.828768 46.710698, 36.583593 46.139141, 36.342781 45.567132, 36.106166 44.994686, 35.873587 44.421818, 35.644892 43.848541, 35.419934 43.274869, 35.198576 42.700813, 34.980684 42.126386, 34.766127 41.5516, 34.554789 40.976465, 34.346555 40.400992, 34.141315 39.825191, 33.938963 39.249071, 33.739397 38.672642, 33.542521 38.095913, 33.348241 37.518892, 33.156469 36.941588, 32.967118 36.364009, 32.780106 35.786163, 32.595355 35.208056, 32.412788 34.629697, 32.232333 34.051093, 32.053919 33.472249, 31.877479 32.893174, 31.702948 32.313873, 31.530263 31.734352, 31.359365 31.154617, 31.190194 30.574676, 31.022695 29.994532, 30.856813 29.414192, 30.692496 28.833661, 30.52969 28.252945, 30.368351 27.672049, 30.208431 27.090977, 30.049883 26.509735, 29.892665 25.928328, 29.736733 25.34676, 29.582046 24.765036, 29.428563 24.183161, 29.276246 23.601139, 29.125056 23.018975, 28.974958 22.436672, 28.825915 21.854236, 28.677892 21.27167, 28.530857 20.688979, 28.384776 20.106167, 28.239618 19.523237, 28.095351 18.940194, 27.951945 18.357042, 27.809371 17.773784, 27.667601 17.190425, 27.526605 16.606967, 27.386357 16.023415, 27.24683 15.439774, 27.107997 14.856045, 26.969834 14.272233, 26.832316 13.688341, 26.695417 13.104374, 26.559115 12.520334, 26.423385 11.936225, 26.288205 11.352051, 26.153552 10.767815, 26.019404 10.18352, 25.885738 9.599170000000001, 25.752535 9.014768, 25.619771 8.430318, 25.487428 7.845822, 25.355483 7.261285, 25.223917 6.676709, 25.092711 6.092098, 24.961844 5.507454, 24.831296 4.922782, 24.701049 4.338085, 24.571084 3.753365, 24.441382 3.168625, 24.311923 2.58387, 24.182691 1.999102, 24.053667 1.414324, 23.924832 0.8295400000000001, 23.796168 0.244752, 23.667656 -0.340037, 23.53928 -0.924823, 23.411021 -1.509603, 23.282861 -2.094374, 23.154782 -2.679134, 23.026766 -3.263878, 22.898797 -3.848605, 22.770855 -4.433311, 22.642923 -5.017993, 22.514983 -5.602648, 22.387017 -6.187273, 22.259008 -6.771866, 22.130936 -7.356423, 22.002785 -7.940941, 21.874535 -8.525416999999999, 21.746168 -9.109848, 21.617666 -9.694233000000001, 21.489009 -10.278566, 21.36018 -10.862846, 21.231159 -11.44707, 21.10193 -12.031235, 20.972471 -12.615337, 20.84276 -13.199375, 20.712779 -13.783345, 20.582507 -14.367243, 20.451923 -14.951069, 20.321007 -15.534817, 20.189737 -16.118486, 20.058092 -16.702073, 19.926048 -17.285575, 19.793585 -17.868989, 19.660679 -18.452311, 19.527306 -19.03554, 19.393443 -19.618672, 19.259065 -20.201704, 19.124148 -20.784634, 18.988665 -21.367458, 18.852591 -21.950174, 18.7159 -22.532779, 18.578563 -23.115269, 18.440552 -23.697642, 18.301839 -24.279894, 18.162396 -24.862023, 18.022195 -25.444026, 17.8812 -26.0259, 17.73938 -26.607641, 17.596701 -27.189247, 17.453128 -27.770714, 17.308628 -28.352039, 17.163163 -28.933219, 17.016695 -29.514251, 16.869187 -30.095131, 13.933539 -29.491417, 14.098138 -28.912293, 14.261223 -28.33296, 14.422844 -27.753423, 14.583047 -27.173686, 14.741878 -26.593755, 14.89938 -26.013634, 15.055598 -25.433327, 15.210571 -24.852841, 15.36434 -24.272178, 15.516947 -23.691343, 15.668426 -23.11034, 15.818815 -22.529175, 15.968148 -21.94785, 16.116461 -21.36637, 16.263787 -20.784739, 16.410159 -20.202961, 16.555607 -19.62104, 16.700165 -19.038979, 16.843861 -18.456783, 16.986725 -17.874455, 17.128786 -17.292, 17.270072 -16.70942, 17.41061 -16.126719, 17.550427 -15.543901, 17.689548 -14.96097, 17.828001 -14.377929, 17.965808 -13.794781, 18.102996 -13.211531, 18.239588 -12.628181, 18.375607 -12.044735, 18.511076 -11.461196, 18.646018 -10.877568, 18.780456 -10.293853, 18.914411 -9.710056, 19.047904 -9.12618, 19.180957 -8.542228, 19.31359 -7.958203, 19.445824 -7.374108, 19.577679 -6.789947, 19.709176 -6.205723, 19.840332 -5.62144, 19.971169 -5.037099, 20.101706 -4.452706, 20.231961 -3.868262, 20.361954 -3.28377, 20.491703 -2.699235, 20.621226 -2.114659, 20.750543 -1.530045, 20.879671 -0.945397, 21.008628 -0.360717, 21.137434 0.223991, 21.266105 0.808725, 21.39466 1.393481, 21.523116 1.978257, 21.651492 2.563048, 21.779804 3.147853, 21.908071 3.732668, 22.03631 4.31749, 22.164541 4.902317, 22.29278 5.487144, 22.421046 6.071969, 22.549357 6.656789, 22.677731 7.241602, 22.806186 7.826403, 22.934741 8.41119, 23.063414 8.995960999999999, 23.192224 9.580711000000001, 23.321189 10.165439, 23.45033 10.750141, 23.579663 11.334813, 23.70921 11.919454, 23.83899 12.504061, 23.969023 13.088629, 24.099328 13.673157, 24.229927 14.257641, 24.36084 14.842078, 24.492088 15.426466, 24.623693 16.010801, 24.755672 16.59508, 24.888051 17.179302, 25.020852 17.763461, 25.1541 18.347556, 25.287817 18.931583, 25.422028 19.51554, 25.556756 20.099424, 25.692028 20.68323, 25.827869 21.266957, 25.964305 21.850601, 26.101363 22.43416, 26.23907 23.017629, 26.377456 23.601007, 26.516548 24.184289, 26.656377 24.767473, 26.796974 25.350556, 26.93837 25.933533, 27.080597 26.516404, 27.223689 27.099162, 27.367681 27.681807, 27.512607 28.264333, 27.658505 28.846738, 27.805411 29.429019, 27.95336 30.011172, 28.102397 30.593193, 28.252563 31.175079, 28.403902 31.756827, 28.556459 32.338431, 28.71028 32.91989, 28.865413 33.501198, 29.021907 34.082352, 29.179815 34.663347, 29.339189 35.244181, 29.500086 35.824848, 29.662563 36.405344, 29.82668 36.985665, 29.9925 37.565806, 30.160087 38.145763, 30.32951 38.72553, 30.500839 39.305103, 30.674149 39.884477, 30.849515 40.463646, 31.027018 41.042604, 31.206743 41.621347, 31.388777 42.199868, 31.573211 42.77816, 31.760133 43.356219, 31.94965 43.934037, 32.14187 44.511607, 32.336903 45.088922, 32.534866 45.665975, 32.73588 46.242756, 32.940074 46.819259, 33.147583 47.395475, 33.358548 47.971394, 33.573118 48.547006, 33.791452 49.122303, 34.013715 49.697273, 34.240083 50.271906, 34.470741 50.846188, 34.705884 51.420109, 34.94572 51.993655, 35.190468 52.566812, 35.440361 53.139565, 35.695644 53.711899, 35.95658 54.283798, 36.223446 54.855243, 36.496539 55.426215, 36.776173 55.996696, 37.062667 56.566664, 37.356393 57.136096, 37.657733 57.704968, 37.967096 58.273253, 38.284919 58.840923, 38.611667 59.407948, 38.947843 59.974297, 39.293984 60.539933, 39.650668 61.10482, 40.018516 61.668918, 40.398198 62.232182, 40.790436 62.794566, 41.196009 63.356018, 41.61576 63.916483, 42.050602 64.47590099999999, 42.501524 65.034205, 42.969599 65.591324, 43.455996 66.14718000000001, 43.961985 66.701688, 44.488952 67.25475299999999, 45.03841 67.806273, 45.612014 68.35613499999999, 46.211575 68.904214, 46.839057 69.45037499999999, 47.496664 69.99446399999999, 48.186803 70.536312, 48.91212 71.075732, 49.675538 71.612514, 50.480285 72.14642600000001, 51.329936 72.677209, 52.228449 73.20457, 53.180217 73.728182, 54.190117 74.247676, 55.263568 74.762637, 56.406592 75.272594, 57.625885 75.77701399999999, 58.928884 76.27529199999999, 60.323843 76.766739, 61.819901 77.25057, 63.427147 77.725889, 65.15666299999999 78.19167400000001, 67.02054699999999 78.646756, 69.03187800000001 79.0898, 71.204616 79.519285, 73.553397 79.93347900000001, 76.093174 80.330421, 78.83862000000001 80.707914, 81.803448 81.06348699999999, 84.999177 81.394426, 88.433741 81.69779, 92.109756 81.970454, 96.02262 82.209198, 101.528355 79.738353))', 'name': 'footprint'},
                ],
                "style": {
                    "stroke_color": "red",
                    "fill_color": "rgba(255,0,0,0.3)",
                }
            },
        ]

        returned_map_l2a_missing_tooltip_info = self.driver.execute_script('return missing_segments_l2a;')
        assert map_l2a_missing_tooltip_info == returned_map_l2a_missing_tooltip_info

        # Check whether the timeliness is displayed
        timeline_section = self.driver.find_element_by_id("dhus-completeness-e2e-timeline-section")

        condition = timeline_section.is_displayed()

        assert condition is True

        l1c_timeline_section = self.driver.find_element_by_id("dhus-completeness-l1c-e2e-timeline-section")

        condition = l1c_timeline_section.is_displayed()

        assert condition is True

        l2a_timeline_section = self.driver.find_element_by_id("dhus-completeness-l2a-e2e-timeline-section")

        condition = l2a_timeline_section.is_displayed()

        assert condition is True

        # Check timeliness tooltip
        timeliness_l1c_tooltip_info = []

        returned_timeliness_l1c_tooltip_info = self.driver.execute_script('return e2e_timeliness_tiles_published_in_dhus_l1c;')
        assert timeliness_l1c_tooltip_info == returned_timeliness_l1c_tooltip_info
        
        timeliness_l2a_tooltip_info = []

        returned_timeliness_l2a_tooltip_info = self.driver.execute_script('return e2e_timeliness_tiles_published_in_dhus_l2a;')
        assert timeliness_l2a_tooltip_info == returned_timeliness_l2a_tooltip_info

        # Missing dissemination table
        missing_table = self.driver.find_element_by_id("dhus-completeness-list-table-MISSING")

        # Row 1
        level = missing_table.find_element_by_xpath("tbody/tr[1]/td[1]")

        assert level.text == "L1C"

        satellite = missing_table.find_element_by_xpath("tbody/tr[1]/td[2]")

        assert satellite.text == "S2A"

        orbit = missing_table.find_element_by_xpath("tbody/tr[1]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = missing_table.find_element_by_xpath("tbody/tr[1]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:36:08.255634"

        stop_datastrip = missing_table.find_element_by_xpath("tbody/tr[1]/td[5]")

        assert stop_datastrip.text == "2018-07-21T09:08:50.195941"

        datastrip = missing_table.find_element_by_xpath("tbody/tr[1]/td[6]")

        assert datastrip.text == "N/A"

        status = missing_table.find_element_by_xpath("tbody/tr[1]/td[7]")

        assert status.text == "MISSING ACQUISITION"

        tiles = missing_table.find_element_by_xpath("tbody/tr[1]/td[8]")

        assert tiles.text == "N/A"

        tiles_dam = missing_table.find_element_by_xpath("tbody/tr[1]/td[9]")

        assert tiles_dam.text == "N/A"

        tiles_dhus = missing_table.find_element_by_xpath("tbody/tr[1]/td[10]")

        assert tiles_dhus.text == "N/A"

        tiles_published_dhus = missing_table.find_element_by_xpath("tbody/tr[1]/td[11]")

        assert tiles_published_dhus.text == "N/A"

        mean_time_dhus = missing_table.find_element_by_xpath("tbody/tr[1]/td[12]")

        assert mean_time_dhus.text == "N/A"

        mean_time_dhus_publication = missing_table.find_element_by_xpath("tbody/tr[1]/td[13]")

        assert mean_time_dhus_publication.text == "N/A"

        datatake = missing_table.find_element_by_xpath("tbody/tr[1]/td[14]")

        assert datatake.text == "N/A"

        start_msi = missing_table.find_element_by_xpath("tbody/tr[1]/td[15]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = missing_table.find_element_by_xpath("tbody/tr[1]/td[16]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

        # Row 2
        level = missing_table.find_element_by_xpath("tbody/tr[2]/td[1]")

        assert level.text == "L2A"

        satellite = missing_table.find_element_by_xpath("tbody/tr[2]/td[2]")

        assert satellite.text == "S2A"

        orbit = missing_table.find_element_by_xpath("tbody/tr[2]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = missing_table.find_element_by_xpath("tbody/tr[2]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:36:08.255634"

        stop_datastrip = missing_table.find_element_by_xpath("tbody/tr[2]/td[5]")

        assert stop_datastrip.text == "2018-07-21T09:08:50.195941"

        datastrip = missing_table.find_element_by_xpath("tbody/tr[2]/td[6]")

        assert datastrip.text == "N/A"

        status = missing_table.find_element_by_xpath("tbody/tr[2]/td[7]")

        assert status.text == "MISSING ACQUISITION"

        tiles = missing_table.find_element_by_xpath("tbody/tr[2]/td[8]")

        assert tiles.text == "N/A"

        tiles_dam = missing_table.find_element_by_xpath("tbody/tr[2]/td[9]")

        assert tiles_dam.text == "N/A"

        tiles_dhus = missing_table.find_element_by_xpath("tbody/tr[2]/td[10]")

        assert tiles_dhus.text == "N/A"

        tiles_published_dhus = missing_table.find_element_by_xpath("tbody/tr[2]/td[11]")

        assert tiles_published_dhus.text == "N/A"

        mean_time_dhus = missing_table.find_element_by_xpath("tbody/tr[2]/td[12]")

        assert mean_time_dhus.text == "N/A"

        mean_time_dhus_publication = missing_table.find_element_by_xpath("tbody/tr[2]/td[13]")

        assert mean_time_dhus_publication.text == "N/A"

        datatake = missing_table.find_element_by_xpath("tbody/tr[2]/td[14]")

        assert datatake.text == "N/A"

        start_msi = missing_table.find_element_by_xpath("tbody/tr[2]/td[15]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = missing_table.find_element_by_xpath("tbody/tr[2]/td[16]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

        # Data availability table
        complete_table = self.driver.find_element_by_id("dhus-completeness-list-table-COMPLETE")

        # Row 1
        level = complete_table.find_element_by_xpath("tbody/tr[1]/td[1]")

        assert level.text == "L1C"

        satellite = complete_table.find_element_by_xpath("tbody/tr[1]/td[2]")

        assert satellite.text == "S2A"

        orbit = complete_table.find_element_by_xpath("tbody/tr[1]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = complete_table.find_element_by_xpath("tbody/tr[1]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:36:08.255634"

        stop_datastrip = complete_table.find_element_by_xpath("tbody/tr[1]/td[5]")

        assert stop_datastrip.text == "2018-07-21T09:08:50.195941"

        datastrip = complete_table.find_element_by_xpath("tbody/tr[1]/td[6]")

        assert datastrip.text == "N/A"

        status = complete_table.find_element_by_xpath("tbody/tr[1]/td[7]")

        assert status.text == "MISSING ACQUISITION"

        tiles = complete_table.find_element_by_xpath("tbody/tr[1]/td[8]")

        assert tiles.text == "N/A"

        tiles_dam = complete_table.find_element_by_xpath("tbody/tr[1]/td[9]")

        assert tiles_dam.text == "N/A"

        tiles_dhus = complete_table.find_element_by_xpath("tbody/tr[1]/td[10]")

        assert tiles_dhus.text == "N/A"

        tiles_published_dhus = complete_table.find_element_by_xpath("tbody/tr[1]/td[11]")

        assert tiles_published_dhus.text == "N/A"

        mean_time_dhus = complete_table.find_element_by_xpath("tbody/tr[1]/td[12]")

        assert mean_time_dhus.text == "N/A"

        mean_time_dhus_publication = complete_table.find_element_by_xpath("tbody/tr[1]/td[13]")

        assert mean_time_dhus_publication.text == "N/A"

        datatake = complete_table.find_element_by_xpath("tbody/tr[1]/td[14]")

        assert datatake.text == "N/A"

        start_msi = complete_table.find_element_by_xpath("tbody/tr[1]/td[15]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = complete_table.find_element_by_xpath("tbody/tr[1]/td[16]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

        # Row 2
        level = complete_table.find_element_by_xpath("tbody/tr[2]/td[1]")

        assert level.text == "L2A"

        satellite = complete_table.find_element_by_xpath("tbody/tr[2]/td[2]")

        assert satellite.text == "S2A"

        orbit = complete_table.find_element_by_xpath("tbody/tr[2]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = complete_table.find_element_by_xpath("tbody/tr[2]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:36:08.255634"

        stop_datastrip = complete_table.find_element_by_xpath("tbody/tr[2]/td[5]")

        assert stop_datastrip.text == "2018-07-21T09:08:50.195941"

        datastrip = complete_table.find_element_by_xpath("tbody/tr[2]/td[6]")

        assert datastrip.text == "N/A"

        status = complete_table.find_element_by_xpath("tbody/tr[2]/td[7]")

        assert status.text == "MISSING ACQUISITION"

        tiles = complete_table.find_element_by_xpath("tbody/tr[2]/td[8]")

        assert tiles.text == "N/A"

        tiles_dam = complete_table.find_element_by_xpath("tbody/tr[2]/td[9]")

        assert tiles_dam.text == "N/A"

        tiles_dhus = complete_table.find_element_by_xpath("tbody/tr[2]/td[10]")

        assert tiles_dhus.text == "N/A"

        tiles_published_dhus = complete_table.find_element_by_xpath("tbody/tr[2]/td[11]")

        assert tiles_published_dhus.text == "N/A"

        mean_time_dhus = complete_table.find_element_by_xpath("tbody/tr[2]/td[12]")

        assert mean_time_dhus.text == "N/A"

        mean_time_dhus_publication = complete_table.find_element_by_xpath("tbody/tr[2]/td[13]")

        assert mean_time_dhus_publication.text == "N/A"

        datatake = complete_table.find_element_by_xpath("tbody/tr[2]/td[14]")

        assert datatake.text == "N/A"

        start_msi = complete_table.find_element_by_xpath("tbody/tr[2]/td[15]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = complete_table.find_element_by_xpath("tbody/tr[2]/td[16]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"