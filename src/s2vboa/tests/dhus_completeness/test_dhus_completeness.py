"""
Automated tests for the DHUS completeness view

Written by DEIMOS Space S.L. (femd)

module vboa
"""
import os
import sys
import unittest
import time
import subprocess
import datetime
import s2vboa.tests.dhus_completeness.aux_functions as functions
import re
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver import ActionChains,TouchActions
from selenium.webdriver.common.keys import Keys

# Import engine of the DDBB
import eboa.engine.engine as eboa_engine
import eboa.ingestion.eboa_ingestion as ingestion
import eboa.triggering.eboa_triggering as triggering
from eboa.engine.engine import Engine
from eboa.engine.query import Query
from eboa.datamodel.base import Session, engine, Base
from eboa.engine.errors import UndefinedEventLink, DuplicatedEventLinkRef, WrongPeriod, SourceAlreadyIngested, WrongValue, OddNumberOfCoordinates, EboaResourcesPathNotAvailable, WrongGeometry
from eboa.debugging import debug


class TestDhusCompletenessView(unittest.TestCase):
    options = Options()
    options.add_argument('--headless')
    options.add_argument('--no-sandbox')
    options.add_argument('window-size=1920,1080')
    driver = webdriver.Chrome(options=options)
    driver.implicitly_wait(5)

    def setUp(self):
        # Create the engine to manage the data
        self.engine_eboa = Engine()
        self.query_eboa = Query()

        # Create session to connect to the database
        self.session = Session()

        # Clear all tables before executing the test
        self.query_eboa.clear_db()

    def tearDown(self):
        # Close connections to the DDBB
        self.engine_eboa.close_session()
        self.query_eboa.close_session()
        self.session.close()

    @classmethod
    def tearDownClass(self):
        self.driver.quit()

    def test_dhus_completeness_no_data(self):

        wait = WebDriverWait(self.driver,5)

        self.driver.get("http://localhost:5000/views/dhus-completeness")

        functions.query(self.driver, wait, "S2A", start = "2018-07-01T00:00:00", stop = "2018-07-31T23:59:59", start_orbit = "17600", stop_orbit = "17800", table_details = True, map = True, station_reports = True)

        # Check header generated
        header_no_data = wait.until(EC.visibility_of_element_located((By.ID,"header-no-data")))

        assert header_no_data

        table_details_no_data = wait.until(EC.visibility_of_element_located((By.ID,"dhus-completeness-no-expected-dissemination")))

        assert table_details_no_data

    def test_dhus_completeness(self):

        filename = "S2A_NPPF.EOF"
        file_path = os.path.dirname(os.path.abspath(__file__)) + "/inputs/" + filename

        exit_status = ingestion.command_process_file("s2boa.ingestions.ingestion_nppf.ingestion_nppf", file_path, "2018-01-01T00:00:00")

        assert len([item for item in exit_status if item["status"] != eboa_engine.exit_codes["OK"]["status"]]) == 0

        filename = "S2A_ORBPRE.EOF"
        file_path = os.path.dirname(os.path.abspath(__file__)) + "/inputs/" + filename

        exit_status = ingestion.command_process_file("s2boa.ingestions.ingestion_orbpre.ingestion_orbpre", file_path, "2018-01-01T00:00:00")

        assert len([item for item in exit_status if item["status"] != eboa_engine.exit_codes["OK"]["status"]]) == 0

        filename = "S2A_REP_PASS_NO_GAPS.EOF"
        file_path = os.path.dirname(os.path.abspath(__file__)) + "/inputs/" + filename

        exit_status = ingestion.command_process_file("s2boa.ingestions.ingestion_dfep_acquisition.ingestion_dfep_acquisition", file_path, "2018-01-01T00:00:00")

        assert len([item for item in exit_status if item["status"] != eboa_engine.exit_codes["OK"]["status"]]) == 0

        filename = "S2A_OPER_REP_OPDPC_L0_L1B.EOF"
        file_path = os.path.dirname(os.path.abspath(__file__)) + "/inputs/" + filename

        exit_status = ingestion.command_process_file("s2boa.ingestions.ingestion_dpc.ingestion_dpc", file_path, "2018-01-01T00:00:00")

        assert len([item for item in exit_status if item["status"] != eboa_engine.exit_codes["OK"]["status"]]) == 0

        filename = "S2A_OPER_REP_OPDPC_L1B_L1C.EOF"
        file_path = os.path.dirname(os.path.abspath(__file__)) + "/inputs/" + filename

        exit_status = ingestion.command_process_file("s2boa.ingestions.ingestion_dpc.ingestion_dpc", file_path, "2018-01-01T00:00:00")

        assert len([item for item in exit_status if item["status"] != eboa_engine.exit_codes["OK"]["status"]]) == 0

        filename = "S2__OPDAM.EOF"
        file_path = os.path.dirname(os.path.abspath(__file__)) + "/inputs/" + filename

        exit_status = ingestion.command_process_file("s2boa.ingestions.ingestion_dam.ingestion_dam", file_path, "2018-01-01T00:00:00")

        assert len([item for item in exit_status if item["status"] != eboa_engine.exit_codes["OK"]["status"]]) == 0

        filename = "S2__OPER_REP_ARC____MPS__20180721T110232_V20180721T085229_20180721T085414.EOF"
        file_path = os.path.dirname(os.path.abspath(__file__)) + "/inputs/" + filename

        exit_status = ingestion.command_process_file("s2boa.ingestions.ingestion_rep_arc.ingestion_rep_arc", file_path, "2018-01-01T00:00:00")

        assert len([item for item in exit_status if item["status"] != eboa_engine.exit_codes["OK"]["status"]]) == 0
        
        filename = "S2__OPDHUS.xml"
        file_path = os.path.dirname(os.path.abspath(__file__)) + "/inputs/" + filename

        exit_status = ingestion.command_process_file("s2boa.ingestions.ingestion_dhus.ingestion_dhus", file_path, "2018-01-01T00:00:00")

        assert len([item for item in exit_status if item["status"] != eboa_engine.exit_codes["OK"]["status"]]) == 0

        filename = "test_input_file_containing_dhus_publication_timings.xml"
        file_path = os.path.dirname(os.path.abspath(__file__)) + "/inputs/" + filename

        exit_status = ingestion.command_process_file("s2boa.ingestions.ingestion_publication_dhus.ingestion_publication_dhus", file_path, "2018-01-01T00:00:00")

        assert len([item for item in exit_status if item["status"] != eboa_engine.exit_codes["OK"]["status"]]) == 0

        wait = WebDriverWait(self.driver,5)

        self.driver.get("http://localhost:5000/views/dhus-completeness")

        functions.query(self.driver, wait, "S2A", start = "2018-07-01T00:00:00", stop = "2018-07-31T23:59:59", start_orbit = "17600", stop_orbit = "17800", table_details = True, map = True, station_reports = True)

        # Check summary expected msi
        summary_expected_msi = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-expected-msi")))

        assert summary_expected_msi

        assert summary_expected_msi.text == "33.033"

        # Check summary acquired msi
        summary_acquired_msi = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-acquired-msi")))

        assert summary_acquired_msi

        assert summary_acquired_msi.text == "1.804"

        # Check summary processed to l1c msi
        summary_processed_l1c_msi = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-processed-to-l1c-msi")))

        assert summary_processed_l1c_msi

        assert summary_processed_l1c_msi.text == "1.717"

        # Check summary processed to l2a msi
        summary_processed_l2a_msi = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-processed-to-l2a-msi")))

        assert summary_processed_l2a_msi

        assert summary_processed_l2a_msi.text == "0.0"

        # Check summary generated to l1c tiles
        summary_generated_l1c_tiles = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-generated-l1c-tiles")))

        assert summary_generated_l1c_tiles

        assert summary_generated_l1c_tiles.text == "4"

        # Check summary generated to l2a tiles
        summary_generated_l2a_tiles = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-generated-l2a-tiles")))

        assert summary_generated_l2a_tiles

        assert summary_generated_l2a_tiles.text == "0"

        # Check summary missing acquistion
        summary_missing_acquistion = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-missing-acquistion")))

        assert summary_missing_acquistion

        assert summary_missing_acquistion.text == "30.895"

        # Check summary missing processing l1c
        summary_missing_processing_l1c = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-missing-processing-l1c")))

        assert summary_missing_processing_l1c

        assert summary_missing_processing_l1c.text == "30.982"

        # Check summary missing processing l2a
        summary_missing_processing_l2a = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-missing-processing-l2a")))

        assert summary_missing_processing_l2a

        assert summary_missing_processing_l2a.text == "32.699"

        # Check summary missing l1c tiles in DAM
        summary_missing_l1c_tiles_dam = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-missing-l1c-tiles-in-dam")))

        assert summary_missing_l1c_tiles_dam

        assert summary_missing_l1c_tiles_dam.text == "1"

        # Check summary missing l1c tiles in DHUS
        summary_missing_l1c_tiles_dhus = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-missing-l1c-tiles-in-dhus")))

        assert summary_missing_l1c_tiles_dhus

        assert summary_missing_l1c_tiles_dhus.text == "2"

        # Check summary missing l1c tiles published in DHUS
        summary_missing_l1c_tiles_published_dhus = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-missing-l1c-tiles-published-in-dhus")))

        assert summary_missing_l1c_tiles_published_dhus

        assert summary_missing_l1c_tiles_published_dhus.text == "3"

        # Check number of elements in summary
        assert len(summary_expected_msi.find_elements_by_xpath("../../../div")) == 12

        # Check whether the map is displayed
        map_section = self.driver.find_element_by_id("dhus-completeness-on-map-section")

        condition = map_section.is_displayed()

        assert condition is True

        l1c_map_section = self.driver.find_element_by_id("dhus-completeness-l1c-on-map-section")

        condition = l1c_map_section.is_displayed()

        assert condition is True

        l2a_map_section = self.driver.find_element_by_id("dhus-completeness-l2a-on-map-section")

        condition = l2a_map_section.is_displayed()

        assert condition is True

        # Check map missing segments tooltip
        planned_imaging_processing_completeness_l1c_1 = self.query_eboa.get_events(gauge_names ={"filter": "PLANNED_IMAGING_PROCESSING_COMPLETENESS_L1C", "op":"=="},
                                                                                start_filters =[{"date": "2018-07-21T08:36:08.255634", "op":"=="}],
                                                                                stop_filters = [{"date": "2018-07-21T08:52:31", "op": "=="}])
        planned_imaging_processing_completeness_l1c_2 = self.query_eboa.get_events(gauge_names ={"filter": "PLANNED_IMAGING_PROCESSING_COMPLETENESS_L1C", "op":"=="},
                                                                                start_filters =[{"date": "2018-07-21T08:54:14", "op":"=="}],
                                                                                stop_filters = [{"date": "2018-07-21T09:08:50.195941", "op": "=="}])
        planned_imaging_correction = self.query_eboa.get_events(gauge_names ={"filter": "PLANNED_CUT_IMAGING_CORRECTION", "op":"=="})
        planned_cut_imaging = self.query_eboa.get_events(gauge_names ={"filter": "PLANNED_CUT_IMAGING", "op":"=="})

        map_l1c_missing_tooltip_info = [
            {
                "id": str(planned_imaging_processing_completeness_l1c_1[0].event_uuid),
                "tooltip": "<table border='1'>" + 
                "<tr><td>UUID</td><td>" + str(planned_imaging_processing_completeness_l1c_1[0].event_uuid) + "</td></tr>" + 
                "<tr><td>Satellite</td><td>S2A</td></tr><tr>" + 
                "<td>Orbit</td><td>16077</td></tr>" + 
                "<tr><td>Datastrip</td><td>N/A</td></tr>" + 
                "<tr><td>Status</td><td><a class='bold-red' href='/views/dhus-completeness-by-datatake/" + str(planned_imaging_correction[0].event_uuid) + "'>MISSING ACQUISITION</a></td></tr>" + 
                "<tr><td>Start</td><td>2018-07-21T08:36:08.255634</td></tr>" + 
                "<tr><td>Stop</td><td>2018-07-21T08:52:31</td></tr>" + 
                "<tr><td>Duration(m)</td><td>16.379</td></tr>" + 
                "<tr><td>Plan file</td><td>S2A_NPPF.EOF</td></tr>" + 
                '<tr><td>Planned imaging</td><td><a href="/eboa_nav/query-event-links/' + str(planned_cut_imaging[0].event_uuid) + '"><i class="fa fa-link"></i></a></td></tr>' + 
                "</table>",
                "geometries": [
                        {'value': 'POLYGON ((101.528355 79.738353, 99.944368 79.64991499999999, 98.38772400000001 79.554035, 96.85979500000001 79.45091499999999, 95.36174699999999 79.340766, 93.894544 79.22380200000001, 92.458955 79.10024300000001, 91.055567 78.97031, 89.68479000000001 78.834226, 88.346875 78.692212, 87.04192399999999 78.544488, 85.76990499999999 78.391273, 84.53066200000001 78.23277899999999, 83.32393500000001 78.06921800000001, 82.14935699999999 77.90079799999999, 81.00649900000001 77.72771400000001, 79.89485000000001 77.550161, 78.813841 77.36832800000001, 77.762851 77.182396, 76.741219 76.99254000000001, 75.748254 76.798929, 74.783236 76.601726, 73.845432 76.401087, 72.934094 76.19716, 72.04846999999999 75.99009, 71.187802 75.780012, 70.351339 75.567058, 69.538331 75.351353, 68.74804 75.133016, 67.979737 74.91216, 67.232707 74.688895, 66.506248 74.463324, 65.79967499999999 74.235544, 65.112319 74.005651, 64.44353099999999 73.77373299999999, 63.792676 73.53987600000001, 63.159142 73.30416, 62.542334 73.06666300000001, 61.941675 72.82745799999999, 61.356609 72.58661499999999, 60.786597 72.3442, 60.231119 72.10027700000001, 59.689673 71.854906, 59.161775 71.608144, 58.64696 71.36004699999999, 58.144778 71.11066599999999, 57.654795 70.860052, 57.176597 70.60825, 56.70978 70.355307, 56.253961 70.101266, 55.808767 69.84616699999999, 55.373841 69.59004899999999, 54.94884 69.33295099999999, 54.533434 69.074907, 54.127304 68.815952, 53.730146 68.556118, 53.341665 68.295436, 52.96158 68.03393699999999, 52.589617 67.771647, 52.225516 67.508595, 51.869026 67.244806, 51.519904 66.980305, 51.177918 66.71511599999999, 50.842843 66.449262, 50.514458 66.182765, 50.192562 65.915645, 49.876956 65.64792300000001, 49.567448 65.379616, 49.263852 65.11074499999999, 48.965991 64.841326, 48.673692 64.571376, 48.386792 64.300911, 48.105129 64.029948, 47.828552 63.7585, 47.556911 63.486583, 47.290065 63.21421, 47.027875 62.941394, 46.770209 62.668149, 46.516939 62.394486, 46.267941 62.120418, 46.023096 61.845955, 45.78229 61.571109, 45.545411 61.295889, 45.312351 61.020308, 45.083008 60.744373, 44.857281 60.468095, 44.635073 60.191482, 44.416291 59.914544, 44.200844 59.637288, 43.988646 59.359723, 43.779611 59.081858, 43.573658 58.803698, 43.370708 58.525253, 43.170684 58.246528, 42.973512 57.967531, 42.779121 57.688268, 42.58744 57.408746, 42.398404 57.12897, 42.211946 56.848948, 42.028003 56.568684, 41.846514 56.288184, 41.667421 56.007454, 41.490665 55.726499, 41.316191 55.445324, 41.143944 55.163933, 40.973873 54.882333, 40.805926 54.600526, 40.640054 54.318519, 40.476208 54.036314, 40.314344 53.753916, 40.154414 53.47133, 39.996376 53.18856, 39.840187 52.905608, 39.685805 52.622479, 39.533186 52.339177, 39.382295 52.055706, 39.233094 51.772067, 39.085546 51.488266, 38.939616 51.204304, 38.795268 50.920185, 38.652468 50.635913, 38.511183 50.351489, 38.371381 50.066918, 38.233031 49.782201, 38.096102 49.497342, 37.960565 49.212343, 37.826391 48.927207, 37.69355 48.641935, 37.562017 48.356532, 37.431765 48.070999, 37.302766 47.785338, 37.174997 47.499552, 37.048432 47.213642, 36.923047 46.927612, 36.798818 46.641463, 36.675724 46.355197, 36.55374 46.068816, 36.432847 45.782322, 36.313021 45.495717, 36.194244 45.209004, 36.076494 44.922182, 35.959751 44.635256, 35.843997 44.348225, 35.729212 44.061093, 35.615378 43.77386, 35.502478 43.486528, 35.390493 43.199099, 35.279407 42.911574, 35.169202 42.623955, 35.059863 42.336243, 34.951373 42.04844, 34.843717 41.760547, 34.73688 41.472566, 34.630846 41.184497, 34.525602 40.896343, 34.421132 40.608104, 34.317423 40.319782, 34.214461 40.031378, 34.112233 39.742893, 34.010725 39.454328, 33.909926 39.165686, 33.809822 38.876966, 33.710401 38.58817, 33.611652 38.299298, 33.513559 38.010354, 33.416114 37.721336, 33.319306 37.432247, 33.223124 37.143086, 33.127557 36.853857, 33.032594 36.564558, 32.938225 36.275191, 32.84444 35.985758, 32.751229 35.696259, 32.658582 35.406695, 32.566489 35.117067, 32.474942 34.827376, 32.38393 34.537623, 32.293445 34.247808, 32.203479 33.957933, 32.114022 33.667999, 32.025066 33.378005, 31.936602 33.087954, 31.848623 32.797845, 31.76112 32.50768, 31.674085 32.217459, 31.587511 31.927184, 31.50139 31.636854, 31.415715 31.346471, 31.330478 31.056036, 31.245672 30.765548, 31.16129 30.47501, 31.077325 30.184421, 30.993771 29.893783, 30.910619 29.603095, 30.827865 29.312359, 30.745501 29.021576, 30.663522 28.730745, 30.58192 28.439869, 30.500689 28.148946, 30.419825 27.857979, 27.559182 28.450741, 27.632295 28.742466, 27.705659 29.03416, 27.77928 29.325823, 27.853162 29.617453, 27.92731 29.909051, 28.001729 30.200616, 28.076424 30.492148, 28.151402 30.783646, 28.226666 31.07511, 28.302223 31.366539, 28.378077 31.657934, 28.454236 31.949292, 28.530703 32.240614, 28.607486 32.5319, 28.68459 32.823149, 28.762021 33.11436, 28.839785 33.405533, 28.917889 33.696668, 28.996338 33.987764, 29.075141 34.27882, 29.154302 34.569836, 29.233829 34.860812, 29.313728 35.151747, 29.394007 35.44264, 29.474674 35.73349, 29.555734 36.024299, 29.637195 36.315063, 29.719066 36.605785, 29.801354 36.896461, 29.884066 37.187093, 29.967211 37.477679, 30.050798 37.768219, 30.134833 38.058713, 30.219327 38.349159, 30.304287 38.639557, 30.389722 38.929907, 30.475638 39.220208, 30.562048 39.510459, 30.648961 39.800659, 30.736387 40.090808, 30.824336 40.380905, 30.912819 40.67095, 31.001845 40.960942, 31.091425 41.250879, 31.18157 41.540762, 31.272291 41.83059, 31.3636 42.120361, 31.455508 42.410075, 31.548026 42.699732, 31.641167 42.989329, 31.734944 43.278868, 31.829369 43.568346, 31.924455 43.857763, 32.020216 44.147118, 32.116664 44.436411, 32.213815 44.725639, 32.311682 45.014803, 32.410281 45.303901, 32.509625 45.592933, 32.609731 45.881897, 32.710615 46.170792, 32.812292 46.459618, 32.914779 46.748373, 33.018094 47.037056, 33.122253 47.325666, 33.227275 47.614202, 33.333178 47.902662, 33.439981 48.191046, 33.547704 48.479353, 33.656366 48.76758, 33.765988 49.055727, 33.87659 49.343793, 33.988195 49.631775, 34.100824 49.919673, 34.214501 50.207485, 34.329249 50.49521, 34.445092 50.782846, 34.562054 51.070392, 34.680162 51.357845, 34.799441 51.645205, 34.919918 51.932469, 35.041622 52.219636, 35.164581 52.506704, 35.288824 52.793672, 35.414381 53.080536, 35.541284 53.367296, 35.669559 53.653949, 35.799244 53.940494, 35.930374 54.226927, 36.062985 54.513248, 36.197113 54.799452, 36.332795 55.085539, 36.47007 55.371506, 36.608977 55.657349, 36.749559 55.943067, 36.891858 56.228656, 37.035917 56.514115, 37.181782 56.799439, 37.329499 57.084627, 37.479118 57.369674, 37.630689 57.654578, 37.784262 57.939336, 37.939893 58.223943, 38.097635 58.508397, 38.257547 58.792694, 38.419687 59.076829, 38.584119 59.3608, 38.750904 59.644601, 38.920109 59.928229, 39.091802 60.21168, 39.266054 60.494947, 39.442939 60.778028, 39.622533 61.060917, 39.804915 61.343608, 39.990167 61.626097, 40.178374 61.908377, 40.369625 62.190444, 40.564011 62.47229, 40.761628 62.75391, 40.962575 63.035298, 41.166956 63.316446, 41.374877 63.597348, 41.586451 63.877995, 41.801794 64.15838100000001, 42.021027 64.438497, 42.244276 64.718335, 42.471672 64.99788700000001, 42.703352 65.277142, 42.939459 65.55609200000001, 43.180143 65.834726, 43.425557 66.113034, 43.675866 66.391006, 43.931237 66.668629, 44.191848 66.945892, 44.457884 67.222782, 44.729538 67.499286, 45.007 67.775391, 45.290493 68.05108300000001, 45.580239 68.326345, 45.876469 68.601162, 46.179425 68.875517, 46.489363 69.14939200000001, 46.806548 69.422768, 47.13126 69.695627, 47.463792 69.96794800000001, 47.804452 70.239709, 48.153562 70.51088799999999, 48.511461 70.781459, 48.878507 71.051399, 49.255072 71.32068, 49.641551 71.589274, 50.038358 71.85715, 50.445927 72.124279, 50.864718 72.390625, 51.295213 72.656154, 51.737919 72.920828, 52.193371 73.184607, 52.662135 73.44745, 53.144802 73.709311, 53.642 73.970144, 54.154389 74.22989699999999, 54.682665 74.488518, 55.22756 74.745948, 55.78985 75.002129, 56.37035 75.25699400000001, 56.96992 75.510475, 57.589467 75.7625, 58.229947 76.012989, 58.892366 76.26186, 59.577786 76.509023, 60.287323 76.754384, 61.022149 76.99784099999999, 61.7835 77.23928600000001, 62.57267 77.47860300000001, 63.391018 77.71566799999999, 64.239965 77.95035, 65.120998 78.182506, 66.03566499999999 78.411985, 66.98558 78.638626, 67.972414 78.862256, 68.99789699999999 79.082691, 70.06380799999999 79.299733, 71.171972 79.51317299999999, 72.324246 79.722787, 73.52251099999999 79.928336, 74.768653 80.12956800000001, 76.064527 80.326216, 77.411991 80.51799200000001, 78.812821 80.704596, 80.2687 80.88571, 81.781176 81.061001, 83.351624 81.230119, 84.981195 81.392703, 86.670765 81.54837499999999, 88.42088 81.696746, 90.23169 81.83741999999999, 92.102891 81.96999099999999, 94.033665 82.094052, 96.02262 82.209198, 101.528355 79.738353))', 'name': 'footprint'},
                ],
                "style": {
                    "stroke_color": "red",
                    "fill_color": "rgba(255,0,0,0.3)",
                }
            },
            {
                "id": str(planned_imaging_processing_completeness_l1c_2[0].event_uuid),
                "tooltip": "<table border='1'>" + 
                "<tr><td>UUID</td><td>" + str(planned_imaging_processing_completeness_l1c_2[0].event_uuid) + "</td></tr>" + 
                "<tr><td>Satellite</td><td>S2A</td></tr><tr>" + 
                "<td>Orbit</td><td>16077</td></tr>" + 
                "<tr><td>Datastrip</td><td>N/A</td></tr>" + 
                "<tr><td>Status</td><td><a class='bold-red' href='/views/dhus-completeness-by-datatake/" + str(planned_imaging_correction[0].event_uuid) + "'>MISSING ACQUISITION</a></td></tr>" + 
                "<tr><td>Start</td><td>2018-07-21T08:54:14</td></tr>" + 
                "<tr><td>Stop</td><td>2018-07-21T09:08:50.195941</td></tr>" + 
                "<tr><td>Duration(m)</td><td>14.603</td></tr>" + 
                "<tr><td>Plan file</td><td>S2A_NPPF.EOF</td></tr>" + 
                '<tr><td>Planned imaging</td><td><a href="/eboa_nav/query-event-links/' + str(planned_cut_imaging[0].event_uuid) + '"><i class="fa fa-link"></i></a></td></tr>' + 
                "</table>",
                "geometries": [
                        {'value': 'POLYGON ((28.807021 21.780101, 28.740847 21.519937, 28.674874 21.259748, 28.609098 20.999535, 28.543516 20.739296, 28.478126 20.479033, 28.412923 20.218747, 28.347902 19.958437, 28.283064 19.698103, 28.218407 19.437747, 28.153927 19.177369, 28.089622 18.916968, 28.025489 18.656545, 27.961525 18.396101, 27.897727 18.135636, 27.83409 17.875151, 27.770614 17.614644, 27.707298 17.354118, 27.644139 17.093572, 27.581134 16.833007, 27.51828 16.572422, 27.455576 16.311819, 27.393017 16.051197, 27.330601 15.790558, 27.268326 15.5299, 27.206192 15.269225, 27.144195 15.008533, 27.082334 14.747825, 27.020605 14.4871, 26.959006 14.226358, 26.897535 13.965601, 26.836189 13.704828, 26.774968 13.444041, 26.713868 13.183238, 26.652888 12.922421, 26.592026 12.66159, 26.531279 12.400744, 26.470645 12.139885, 26.410122 11.879013, 26.349708 11.618128, 26.289401 11.35723, 26.229199 11.09632, 26.169101 10.835397, 26.109104 10.574463, 26.049206 10.313518, 25.989406 10.052561, 25.9297 9.791594, 25.870089 9.530614999999999, 25.810568 9.269627, 25.751138 9.008629000000001, 25.691795 8.747621000000001, 25.632538 8.486603000000001, 25.573365 8.225576999999999, 25.514274 7.964542, 25.455264 7.703498, 25.396333 7.442446, 25.337479 7.181386, 25.278699 6.920319, 25.219993 6.659244, 25.161358 6.398163, 25.102792 6.137074, 25.044294 5.875979, 24.985864 5.614878, 24.927498 5.353772, 24.869195 5.092659, 24.810953 4.831541, 24.752769 4.570419, 24.694643 4.309291, 24.636573 4.048159, 24.578557 3.787023, 24.520595 3.525883, 24.462685 3.26474, 24.404823 3.003593, 24.347009 2.742443, 24.289241 2.481291, 24.231516 2.220136, 24.173833 1.958979, 24.116191 1.697819, 24.058592 1.436659, 24.00103 1.175497, 23.943504 0.914334, 23.886013 0.65317, 23.828553 0.392005, 23.771125 0.130841, 23.713725 -0.130324, 23.656354 -0.391488, 23.599012 -0.652652, 23.541696 -0.913815, 23.484402 -1.174977, 23.427129 -1.436137, 23.369876 -1.697296, 23.312641 -1.958453, 23.255422 -2.219607, 23.198219 -2.480759, 23.141034 -2.741909, 23.08386 -3.003055, 23.026696 -3.264198, 22.969541 -3.525337, 22.912393 -3.786473, 22.855249 -4.047604, 22.798109 -4.308731, 22.740972 -4.569854, 22.683841 -4.830971, 22.626709 -5.092084, 22.569574 -5.353191, 22.512435 -5.614292, 22.455289 -5.875387, 22.398135 -6.136476, 22.340972 -6.397559, 22.283801 -6.658635, 22.226622 -6.919704, 22.16943 -7.180765, 22.112221 -7.441819, 22.054995 -7.702865, 21.997749 -7.963903, 21.940483 -8.224933, 21.883194 -8.485954, 21.825885 -8.746966, 21.768555 -9.007968999999999, 21.711198 -9.268962999999999, 21.653812 -9.529947, 21.596395 -9.790921000000001, 21.538945 -10.051885, 21.481461 -10.312839, 21.423941 -10.573782, 21.366389 -10.834714, 21.308802 -11.095635, 21.251174 -11.356544, 21.193503 -11.617441, 21.135788 -11.878327, 21.078027 -12.139201, 21.020217 -12.400061, 20.962357 -12.66091, 20.904452 -12.921745, 20.846499 -13.182566, 20.78849 -13.443375, 20.730424 -13.704169, 20.6723 -13.96495, 20.614114 -14.225716, 20.555866 -14.486468, 20.497553 -14.747205, 20.439182 -15.007926, 20.380746 -15.268633, 20.322241 -15.529324, 20.263664 -15.789999, 20.205013 -16.050658, 20.146285 -16.3113, 20.08748 -16.571926, 20.028595 -16.832535, 19.969637 -17.093127, 19.910599 -17.353702, 19.851475 -17.614259, 19.792264 -17.874798, 19.732962 -18.135319, 19.673568 -18.395821, 19.614079 -18.656305, 19.554494 -18.91677, 19.494822 -19.177216, 19.435052 -19.437642, 19.37518 -19.698049, 19.315202 -19.958435, 19.255117 -20.218802, 19.194922 -20.479148, 19.134615 -20.739473, 19.074194 -20.999777, 19.01367 -21.26006, 18.95303 -21.520322, 18.892268 -21.780561, 18.831382 -22.040779, 18.770371 -22.300974, 18.709231 -22.561147, 18.647959 -22.821297, 18.586554 -23.081424, 18.52503 -23.341527, 18.463367 -23.601607, 18.401564 -23.861663, 18.339616 -24.121695, 18.277522 -24.381703, 18.215279 -24.641685, 18.152884 -24.901643, 18.090334 -25.161575, 18.027645 -25.421482, 17.964796 -25.681364, 17.901783 -25.941219, 17.838605 -26.201048, 17.775257 -26.46085, 17.711738 -26.720625, 17.648043 -26.980374, 17.584172 -27.240094, 17.520138 -27.499787, 17.45592 -27.759453, 17.391514 -28.019089, 17.326917 -28.278698, 17.262127 -28.538277, 17.197139 -28.797827, 17.13195 -29.057348, 17.066561 -29.316839, 17.000982 -29.5763, 16.935192 -29.835731, 16.869187 -30.095131, 13.933539 -29.491417, 14.007237 -29.232809, 14.080626 -28.974158, 14.153712 -28.715465, 14.226506 -28.456731, 14.299006 -28.197956, 14.371215 -27.93914, 14.443137 -27.680284, 14.514776 -27.421389, 14.586137 -27.162455, 14.657223 -26.903481, 14.728039 -26.64447, 14.798595 -26.38542, 14.86889 -26.126333, 14.938926 -25.867209, 15.008706 -25.608048, 15.078235 -25.348851, 15.147516 -25.089618, 15.216552 -24.830349, 15.285348 -24.571046, 15.353914 -24.311707, 15.422246 -24.052334, 15.490348 -23.792928, 15.558223 -23.533487, 15.625874 -23.274014, 15.693305 -23.014508, 15.760518 -22.754969, 15.827518 -22.495399, 15.894314 -22.235796, 15.960902 -21.976162, 16.027285 -21.716498, 16.093466 -21.456802, 16.159448 -21.197077, 16.225235 -20.937321, 16.29083 -20.677537, 16.356235 -20.417723, 16.421458 -20.157879, 16.486497 -19.898008, 16.551355 -19.638108, 16.616034 -19.378181, 16.680537 -19.118226, 16.744867 -18.858244, 16.809026 -18.598235, 16.873019 -18.3382, 16.936849 -18.078138, 17.000518 -17.818051, 17.064025 -17.557938, 17.127375 -17.2978, 17.19057 -17.037638, 17.253613 -16.777451, 17.316505 -16.51724, 17.37925 -16.257005, 17.441853 -15.996746, 17.504312 -15.736464, 17.566631 -15.47616, 17.628811 -15.215833, 17.690855 -14.955483, 17.752765 -14.695112, 17.814544 -14.43472, 17.876194 -14.174305, 17.937719 -13.91387, 17.999118 -13.653414, 18.060395 -13.392937, 18.121551 -13.132441, 18.182589 -12.871925, 18.243511 -12.61139, 18.304318 -12.350835, 18.365014 -12.090262, 18.4256 -11.829669, 18.486078 -11.569059, 18.54645 -11.308431, 18.606718 -11.047785, 18.666884 -10.787122, 18.726949 -10.526442, 18.786917 -10.265745, 18.846789 -10.005031, 18.906567 -9.744301, 18.966252 -9.483556, 19.025847 -9.222795, 19.085354 -8.962018, 19.144773 -8.701226999999999, 19.204108 -8.440421000000001, 19.263361 -8.179601, 19.322531 -7.918767, 19.381623 -7.657918, 19.440637 -7.397056, 19.499575 -7.136181, 19.558439 -6.875293, 19.617231 -6.614392, 19.675953 -6.353479, 19.734607 -6.092555, 19.793193 -5.831617, 19.851714 -5.570669, 19.910171 -5.309709, 19.968567 -5.048738, 20.026903 -4.787756, 20.08518 -4.526765, 20.143402 -4.265763, 20.201569 -4.004752, 20.259682 -3.74373, 20.317742 -3.482699, 20.375752 -3.22166, 20.433715 -2.960611, 20.491632 -2.699555, 20.549504 -2.43849, 20.607333 -2.177417, 20.665121 -1.916338, 20.722867 -1.65525, 20.780573 -1.394155, 20.838244 -1.133053, 20.89588 -0.871945, 20.953482 -0.610831, 21.011054 -0.349711, 21.068595 -0.088586, 21.126109 0.172545, 21.183592 0.433682, 21.241049 0.694823, 21.298484 0.955969, 21.355896 1.217119, 21.413288 1.478273, 21.470662 1.739431, 21.528019 2.000592, 21.585361 2.261756, 21.642684 2.522923, 21.699995 2.784094, 21.757295 3.045266, 21.814586 3.306441, 21.87187 3.567617, 21.929148 3.828795, 21.986423 4.089974, 22.043694 4.351154, 22.100959 4.612336, 22.158225 4.873518, 22.215492 5.1347, 22.272764 5.395881, 22.330042 5.657063, 22.387327 5.918244, 22.444621 6.179424, 22.501924 6.440602, 22.559233 6.70178, 22.616556 6.962957, 22.673894 7.224131, 22.731249 7.485303, 22.788624 7.746473, 22.846018 8.007638999999999, 22.903435 8.268803, 22.960873 8.529963, 23.01833 8.791121, 23.075814 9.052274000000001, 23.133327 9.313423999999999, 23.19087 9.574569, 23.248445 9.835709, 23.306055 10.096845, 23.3637 10.357975, 23.421379 10.6191, 23.47909 10.88022, 23.536842 11.141334, 23.594636 11.402442, 23.652475 11.663543, 23.71036 11.924637, 23.768292 12.185724, 23.826274 12.446805, 23.884304 12.707877, 23.942379 12.968943, 24.00051 13.23, 24.058697 13.491049, 24.116942 13.752089, 24.175249 14.013121, 24.233617 14.274143, 24.29205 14.535156, 24.350544 14.796159, 24.409099 15.057153, 24.467723 15.318137, 24.52642 15.57911, 24.58519 15.840073, 24.644036 16.101025, 24.70296 16.361965, 24.761963 16.622893, 24.821042 16.883811, 24.880197 17.144716, 24.939439 17.40561, 24.998768 17.66649, 25.058187 17.927358, 25.117698 18.188213, 25.177303 18.449054, 25.237004 18.709881, 25.296795 18.970695, 25.356681 19.231496, 25.41667 19.492281, 25.476764 19.753052, 25.536964 20.013808, 25.597275 20.274549, 25.657697 20.535274, 25.718233 20.795983, 25.778874 21.056677, 25.83963 21.317354, 25.900507 21.578015, 25.961507 21.838659, 26.022633 22.099286, 26.083887 22.359895, 28.807021 21.780101))', 'name': 'footprint'},
                ],
                "style": {
                    "stroke_color": "red",
                    "fill_color": "rgba(255,0,0,0.3)",
                }
            },

        ]

        returned_map_l1c_missing_tooltip_info = self.driver.execute_script('return missing_segments_l1c;')
        assert map_l1c_missing_tooltip_info == returned_map_l1c_missing_tooltip_info
        
        planned_imaging_processing_completeness_l2a = self.query_eboa.get_events(gauge_names ={"filter": "PLANNED_IMAGING_PROCESSING_COMPLETENESS_L2A", "op":"=="})
        
        map_l2a_missing_tooltip_info = [
            {
                "id": str(planned_imaging_processing_completeness_l2a[0].event_uuid),
                "tooltip": "<table border='1'>" + 
                "<tr><td>UUID</td><td>" + str(planned_imaging_processing_completeness_l2a[0].event_uuid) + "</td></tr>" + 
                "<tr><td>Satellite</td><td>S2A</td></tr><tr>" + 
                "<td>Orbit</td><td>16077</td></tr>" + 
                "<tr><td>Datastrip</td><td>N/A</td></tr>" + 
                "<tr><td>Status</td><td><a class='bold-red' href='/views/dhus-completeness-by-datatake/" + str(planned_imaging_correction[0].event_uuid) + "'>MISSING ACQUISITION</a></td></tr>" + 
                "<tr><td>Start</td><td>2018-07-21T08:36:08.255634</td></tr>" + 
                "<tr><td>Stop</td><td>2018-07-21T09:08:50.195941</td></tr>" + 
                "<tr><td>Duration(m)</td><td>32.699</td></tr>" + 
                "<tr><td>Plan file</td><td>S2A_NPPF.EOF</td></tr>" + 
                '<tr><td>Planned imaging</td><td><a href="/eboa_nav/query-event-links/' + str(planned_cut_imaging[0].event_uuid) + '"><i class="fa fa-link"></i></a></td></tr>' + 
                "</table>",
                "geometries": [
                        {'value': 'POLYGON ((101.528355 79.738353, 98.393294 79.554394, 95.372456 79.34158499999999, 92.47433599999999 79.101615, 89.704358 78.83623299999999, 87.065195 78.547203, 84.557168 78.236266, 82.178646 77.905114, 79.92652200000001 77.555353, 77.796533 77.188502, 75.78361 76.80598500000001, 73.882164 76.409121, 72.086314 75.999127, 70.390066 75.577118, 68.787451 75.144115, 67.27263000000001 74.701048, 65.839963 74.248763, 64.484058 73.788026, 63.199803 73.319535, 61.98238 72.84392099999999, 60.82727 72.361756, 59.730252 71.87356, 58.687393 71.379802, 57.69504 70.880909, 56.749802 70.377269, 55.848538 69.86923400000001, 54.988339 69.357125, 54.166514 68.841234, 53.380572 68.321826, 52.628211 67.799145, 51.907284 67.273414, 51.215837 66.74483499999999, 50.552046 66.21359200000001, 49.914221 65.679856, 49.300795 65.14378499999999, 48.710317 64.605521, 48.141439 64.06519900000001, 47.592911 63.522938, 47.063571 62.978854, 46.552336 62.433049, 46.058203 61.88562, 45.580233 61.336656, 45.117553 60.786241, 44.669348 60.23445, 44.234857 59.681356, 43.813369 59.127025, 43.404219 58.571519, 43.006785 58.014895, 42.620482 57.457208, 42.244763 56.898507, 41.879116 56.33884, 41.523059 55.778251, 41.176136 55.216781, 40.837913 54.65447, 40.507999 54.091353, 40.186016 53.527465, 39.871607 52.962837, 39.564437 52.3975, 39.264186 51.831483, 38.970556 51.264812, 38.683263 50.697513, 38.402038 50.12961, 38.126626 49.561125, 37.856788 48.992081, 37.592294 48.422497, 37.332928 47.852393, 37.078485 47.281788, 36.828768 46.710698, 36.583593 46.139141, 36.342781 45.567132, 36.106166 44.994686, 35.873587 44.421818, 35.644892 43.848541, 35.419934 43.274869, 35.198576 42.700813, 34.980684 42.126386, 34.766127 41.5516, 34.554789 40.976465, 34.346555 40.400992, 34.141315 39.825191, 33.938963 39.249071, 33.739397 38.672642, 33.542521 38.095913, 33.348241 37.518892, 33.156469 36.941588, 32.967118 36.364009, 32.780106 35.786163, 32.595355 35.208056, 32.412788 34.629697, 32.232333 34.051093, 32.053919 33.472249, 31.877479 32.893174, 31.702948 32.313873, 31.530263 31.734352, 31.359365 31.154617, 31.190194 30.574676, 31.022695 29.994532, 30.856813 29.414192, 30.692496 28.833661, 30.52969 28.252945, 30.368351 27.672049, 30.208431 27.090977, 30.049883 26.509735, 29.892665 25.928328, 29.736733 25.34676, 29.582046 24.765036, 29.428563 24.183161, 29.276246 23.601139, 29.125056 23.018975, 28.974958 22.436672, 28.825915 21.854236, 28.677892 21.27167, 28.530857 20.688979, 28.384776 20.106167, 28.239618 19.523237, 28.095351 18.940194, 27.951945 18.357042, 27.809371 17.773784, 27.667601 17.190425, 27.526605 16.606967, 27.386357 16.023415, 27.24683 15.439774, 27.107997 14.856045, 26.969834 14.272233, 26.832316 13.688341, 26.695417 13.104374, 26.559115 12.520334, 26.423385 11.936225, 26.288205 11.352051, 26.153552 10.767815, 26.019404 10.18352, 25.885738 9.599170000000001, 25.752535 9.014768, 25.619771 8.430318, 25.487428 7.845822, 25.355483 7.261285, 25.223917 6.676709, 25.092711 6.092098, 24.961844 5.507454, 24.831296 4.922782, 24.701049 4.338085, 24.571084 3.753365, 24.441382 3.168625, 24.311923 2.58387, 24.182691 1.999102, 24.053667 1.414324, 23.924832 0.8295400000000001, 23.796168 0.244752, 23.667656 -0.340037, 23.53928 -0.924823, 23.411021 -1.509603, 23.282861 -2.094374, 23.154782 -2.679134, 23.026766 -3.263878, 22.898797 -3.848605, 22.770855 -4.433311, 22.642923 -5.017993, 22.514983 -5.602648, 22.387017 -6.187273, 22.259008 -6.771866, 22.130936 -7.356423, 22.002785 -7.940941, 21.874535 -8.525416999999999, 21.746168 -9.109848, 21.617666 -9.694233000000001, 21.489009 -10.278566, 21.36018 -10.862846, 21.231159 -11.44707, 21.10193 -12.031235, 20.972471 -12.615337, 20.84276 -13.199375, 20.712779 -13.783345, 20.582507 -14.367243, 20.451923 -14.951069, 20.321007 -15.534817, 20.189737 -16.118486, 20.058092 -16.702073, 19.926048 -17.285575, 19.793585 -17.868989, 19.660679 -18.452311, 19.527306 -19.03554, 19.393443 -19.618672, 19.259065 -20.201704, 19.124148 -20.784634, 18.988665 -21.367458, 18.852591 -21.950174, 18.7159 -22.532779, 18.578563 -23.115269, 18.440552 -23.697642, 18.301839 -24.279894, 18.162396 -24.862023, 18.022195 -25.444026, 17.8812 -26.0259, 17.73938 -26.607641, 17.596701 -27.189247, 17.453128 -27.770714, 17.308628 -28.352039, 17.163163 -28.933219, 17.016695 -29.514251, 16.869187 -30.095131, 13.933539 -29.491417, 14.098138 -28.912293, 14.261223 -28.33296, 14.422844 -27.753423, 14.583047 -27.173686, 14.741878 -26.593755, 14.89938 -26.013634, 15.055598 -25.433327, 15.210571 -24.852841, 15.36434 -24.272178, 15.516947 -23.691343, 15.668426 -23.11034, 15.818815 -22.529175, 15.968148 -21.94785, 16.116461 -21.36637, 16.263787 -20.784739, 16.410159 -20.202961, 16.555607 -19.62104, 16.700165 -19.038979, 16.843861 -18.456783, 16.986725 -17.874455, 17.128786 -17.292, 17.270072 -16.70942, 17.41061 -16.126719, 17.550427 -15.543901, 17.689548 -14.96097, 17.828001 -14.377929, 17.965808 -13.794781, 18.102996 -13.211531, 18.239588 -12.628181, 18.375607 -12.044735, 18.511076 -11.461196, 18.646018 -10.877568, 18.780456 -10.293853, 18.914411 -9.710056, 19.047904 -9.12618, 19.180957 -8.542228, 19.31359 -7.958203, 19.445824 -7.374108, 19.577679 -6.789947, 19.709176 -6.205723, 19.840332 -5.62144, 19.971169 -5.037099, 20.101706 -4.452706, 20.231961 -3.868262, 20.361954 -3.28377, 20.491703 -2.699235, 20.621226 -2.114659, 20.750543 -1.530045, 20.879671 -0.945397, 21.008628 -0.360717, 21.137434 0.223991, 21.266105 0.808725, 21.39466 1.393481, 21.523116 1.978257, 21.651492 2.563048, 21.779804 3.147853, 21.908071 3.732668, 22.03631 4.31749, 22.164541 4.902317, 22.29278 5.487144, 22.421046 6.071969, 22.549357 6.656789, 22.677731 7.241602, 22.806186 7.826403, 22.934741 8.41119, 23.063414 8.995960999999999, 23.192224 9.580711000000001, 23.321189 10.165439, 23.45033 10.750141, 23.579663 11.334813, 23.70921 11.919454, 23.83899 12.504061, 23.969023 13.088629, 24.099328 13.673157, 24.229927 14.257641, 24.36084 14.842078, 24.492088 15.426466, 24.623693 16.010801, 24.755672 16.59508, 24.888051 17.179302, 25.020852 17.763461, 25.1541 18.347556, 25.287817 18.931583, 25.422028 19.51554, 25.556756 20.099424, 25.692028 20.68323, 25.827869 21.266957, 25.964305 21.850601, 26.101363 22.43416, 26.23907 23.017629, 26.377456 23.601007, 26.516548 24.184289, 26.656377 24.767473, 26.796974 25.350556, 26.93837 25.933533, 27.080597 26.516404, 27.223689 27.099162, 27.367681 27.681807, 27.512607 28.264333, 27.658505 28.846738, 27.805411 29.429019, 27.95336 30.011172, 28.102397 30.593193, 28.252563 31.175079, 28.403902 31.756827, 28.556459 32.338431, 28.71028 32.91989, 28.865413 33.501198, 29.021907 34.082352, 29.179815 34.663347, 29.339189 35.244181, 29.500086 35.824848, 29.662563 36.405344, 29.82668 36.985665, 29.9925 37.565806, 30.160087 38.145763, 30.32951 38.72553, 30.500839 39.305103, 30.674149 39.884477, 30.849515 40.463646, 31.027018 41.042604, 31.206743 41.621347, 31.388777 42.199868, 31.573211 42.77816, 31.760133 43.356219, 31.94965 43.934037, 32.14187 44.511607, 32.336903 45.088922, 32.534866 45.665975, 32.73588 46.242756, 32.940074 46.819259, 33.147583 47.395475, 33.358548 47.971394, 33.573118 48.547006, 33.791452 49.122303, 34.013715 49.697273, 34.240083 50.271906, 34.470741 50.846188, 34.705884 51.420109, 34.94572 51.993655, 35.190468 52.566812, 35.440361 53.139565, 35.695644 53.711899, 35.95658 54.283798, 36.223446 54.855243, 36.496539 55.426215, 36.776173 55.996696, 37.062667 56.566664, 37.356393 57.136096, 37.657733 57.704968, 37.967096 58.273253, 38.284919 58.840923, 38.611667 59.407948, 38.947843 59.974297, 39.293984 60.539933, 39.650668 61.10482, 40.018516 61.668918, 40.398198 62.232182, 40.790436 62.794566, 41.196009 63.356018, 41.61576 63.916483, 42.050602 64.47590099999999, 42.501524 65.034205, 42.969599 65.591324, 43.455996 66.14718000000001, 43.961985 66.701688, 44.488952 67.25475299999999, 45.03841 67.806273, 45.612014 68.35613499999999, 46.211575 68.904214, 46.839057 69.45037499999999, 47.496664 69.99446399999999, 48.186803 70.536312, 48.91212 71.075732, 49.675538 71.612514, 50.480285 72.14642600000001, 51.329936 72.677209, 52.228449 73.20457, 53.180217 73.728182, 54.190117 74.247676, 55.263568 74.762637, 56.406592 75.272594, 57.625885 75.77701399999999, 58.928884 76.27529199999999, 60.323843 76.766739, 61.819901 77.25057, 63.427147 77.725889, 65.15666299999999 78.19167400000001, 67.02054699999999 78.646756, 69.03187800000001 79.0898, 71.204616 79.519285, 73.553397 79.93347900000001, 76.093174 80.330421, 78.83862000000001 80.707914, 81.803448 81.06348699999999, 84.999177 81.394426, 88.433741 81.69779, 92.109756 81.970454, 96.02262 82.209198, 101.528355 79.738353))', 'name': 'footprint'},
                ],
                "style": {
                    "stroke_color": "red",
                    "fill_color": "rgba(255,0,0,0.3)",
                }
            },
        ]

        returned_map_l2a_missing_tooltip_info = self.driver.execute_script('return missing_segments_l2a;')
        assert map_l2a_missing_tooltip_info == returned_map_l2a_missing_tooltip_info

        # Check map complete segments tooltip
        planned_imaging_processing_completeness_l1c = self.query_eboa.get_events(gauge_names ={"filter": "PLANNED_IMAGING_PROCESSING_COMPLETENESS_L1C", "op":"=="},
                                                                                start_filters =[{"date": "2018-07-21T08:52:31", "op":"=="}],
                                                                                stop_filters = [{"date": "2018-07-21T08:54:14", "op": "=="}])
        msi_l1c_ds_mps = self.query_eboa.get_explicit_refs(explicit_refs ={"filter": "S2A_OPER_MSI_L1C_DS_MPS__20180721T104253_S20180721T085229_N02.06", "op":"=="})

        map_l1c_complete_tooltip_info = [
            {
                "id": str(planned_imaging_processing_completeness_l1c[0].event_uuid),
                "tooltip": "<table border='1'>" + 
                "<tr><td>UUID</td><td>" + str(planned_imaging_processing_completeness_l1c[0].event_uuid) + "</td></tr>" + 
                "<tr><td>Satellite</td><td>S2A</td></tr><tr>" + 
                "<td>Orbit</td><td>16077</td></tr>" + 
                "<tr><td>Datastrip</td><td><a href='/eboa_nav/query-er-links/" + str(msi_l1c_ds_mps[0].explicit_ref_uuid) + "'>S2A_OPER_MSI_L1C_DS_MPS__20180721T104253_S20180721T085229_N02.06</a></td></tr>" +  
                "<tr><td>Status</td><td><a class='bold-orange' href='/views/dhus-completeness-by-datatake/" + str(planned_imaging_correction[0].event_uuid) + "'>INCOMPLETE DISSEMINATION</a></td></tr>" + 
                "<tr><td>Start</td><td>2018-07-21T08:52:31</td></tr>" + 
                "<tr><td>Stop</td><td>2018-07-21T08:54:14</td></tr>" + 
                "<tr><td>Duration(m)</td><td>1.717</td></tr>" + 
                "<tr><td>Plan file</td><td>S2A_NPPF.EOF</td></tr>" + 
                '<tr><td>Planned imaging</td><td><a href="/eboa_nav/query-event-links/' + str(planned_cut_imaging[0].event_uuid) + '"><i class="fa fa-link"></i></a></td></tr>' + 
                "</table>",
                "geometries": [
                        {'value': 'POLYGON ((30.419825 27.857979, 30.359831 27.641211, 30.300019 27.42442, 30.240408 27.207604, 30.180994 26.990764, 30.12177 26.773901, 30.062725 26.557015, 30.003871 26.340105, 29.945205 26.123173, 29.886715 25.906218, 29.8284 25.689241, 29.770267 25.472241, 29.712313 25.25522, 29.654521 25.038177, 29.596901 24.821113, 29.539455 24.604027, 29.482176 24.386921, 29.425052 24.169794, 29.368095 23.952647, 29.311302 23.735479, 29.254664 23.518292, 29.198178 23.301085, 29.141851 23.083858, 29.08568 22.866612, 29.029652 22.649347, 28.973774 22.432063, 28.918046 22.214761, 28.862467 21.99744, 28.807021 21.780101, 26.083887 22.359895, 26.135173 22.577612, 26.186525 22.795319, 26.237978 23.013011, 26.289535 23.230691, 26.341189 23.448358, 26.392922 23.666012, 26.444764 23.883653, 26.496717 24.10128, 26.548761 24.318893, 26.600902 24.536493, 26.653158 24.754079, 26.705532 24.97165, 26.757991 25.189208, 26.810565 25.406751, 26.863261 25.624279, 26.916075 25.841792, 26.968981 26.059292, 27.022014 26.276775, 27.075177 26.494243, 27.128453 26.711696, 27.181839 26.929133, 27.23536 27.146555, 27.289018 27.363959, 27.342783 27.581349, 27.396678 27.798722, 27.450716 28.016078, 27.504897 28.233417, 27.559182 28.450741, 30.419825 27.857979))', 'name': 'footprint'},
                ],
                "style": {
                    "stroke_color": "orange",
                    "fill_color": "rgba(255,165,0,0.3)",
                }
            },
            {
                "id": "S2A_OPER_MSI_L1C_TL_MPS__20180721T104253_A016077_T35QMF_N02.06",
                "tooltip": "<table border='1'>" + 
                "<tr><td>Tile</td><td><a href='/eboa_nav/query-er-by-name/S2A_OPER_MSI_L1C_TL_MPS__20180721T104253_A016077_T35QMF_N02.06'>S2A_OPER_MSI_L1C_TL_MPS__20180721T104253_A016077_T35QMF_N02.06</a></td></tr>" + 
                "<tr><td>Satellite</td><td>S2A</td></tr>" + 
                "<tr><td>Orbit</td><td>16077</td></tr>" + 
                "<tr><td>Datastrip</td><td><a href='/eboa_nav/query-er/" + str(msi_l1c_ds_mps[0].explicit_ref_uuid) + "'>S2A_OPER_MSI_L1C_DS_MPS__20180721T104253_S20180721T085229_N02.06</a></td></tr>" + 
                "<tr><td>Status</td><td><span class='bold-red'>MISSING DHUS DISSEMINATION</span></td></tr>" + 
                "<tr><td>Plan file</td><td>S2A_NPPF.EOF</td></tr>" + 
                '<tr><td>Planned imaging</td><td><a href="/eboa_nav/query-event-links/' + str(planned_cut_imaging[0].event_uuid) + '"><i class="fa fa-link"></i></a></td></tr>' +  
                "</table>",
                "geometries": [
                        {'value': 'POLYGON ((26.09894133 22.5159429, 26.09894133 22.5159429, 26.09894133 22.5159429, 27.09490348 22.51865756, 27.09559995 23.51052669, 26.33407919 23.50836496, 26.33162644 23.49803796, 26.29639897 23.34992475, 26.26124401 23.20172944, 26.22572118 23.05360261, 26.19075293 22.90526669, 26.15590511 22.75680757, 26.1208153 22.60840942, 26.09894133 22.5159429, 26.09894133 22.5159429))', 'name': 'footprint'},
                ],
                "style": {
                    "stroke_color": "red",
                    "fill_color": "rgba(255,0,0,0.3)",
                }
            },

        ]

        returned_map_l1c_complete_tooltip_info = self.driver.execute_script('return complete_segments_l1c;')
        assert map_l1c_complete_tooltip_info == returned_map_l1c_complete_tooltip_info

        map_l2a_complete_tooltip_info = []

        returned_map_l2a_complete_tooltip_info = self.driver.execute_script('return complete_segments_l2a;')
        assert map_l2a_complete_tooltip_info == returned_map_l2a_complete_tooltip_info

        # Check whether the timeliness is displayed
        timeline_section = self.driver.find_element_by_id("dhus-completeness-e2e-timeline-section")

        condition = timeline_section.is_displayed()

        assert condition is True

        l1c_timeline_section = self.driver.find_element_by_id("dhus-completeness-l1c-e2e-timeline-section")

        condition = l1c_timeline_section.is_displayed()

        assert condition is True

        l2a_timeline_section = self.driver.find_element_by_id("dhus-completeness-l2a-e2e-timeline-section")

        condition = l2a_timeline_section.is_displayed()

        assert condition is True

        # Check timeliness tooltip
        timeliness_l1c_tooltip_info = [
            {
                "id": str(msi_l1c_ds_mps[0].explicit_ref_uuid),
                "group": "S2A",
                "x": "2018-07-21T08:52:31",
                "y": "1206891.184",
                "tooltip": "<table border='1'>" + 
                "<tr><td>Datatake</td><td>GS2A_20180721T083601_016077_N02.06</td></tr>" + 
                "<tr><td>Datastrip</td><td><a href='/eboa_nav/query-er/" + str(msi_l1c_ds_mps[0].explicit_ref_uuid) + "'>S2A_OPER_MSI_L1C_DS_MPS__20180721T104253_S20180721T085229_N02.06</a></td></tr>" + 
                "<tr><td>Satellite</td><td>S2A</td></tr>" + 
                "<tr><td>Orbit</td><td>16077</td></tr>" + 
                "<tr><td>Mean (sensing stop - publication in DHUS) of related tiles (m)</td><td>1206891.184</td></tr>" + 
                "<tr><td>Plan file</td><td>S2A_NPPF.EOF</td></tr>" + 
                '<tr><td>Planned imaging</td><td><a href="/eboa_nav/query-event-links/' + str(planned_cut_imaging[0].event_uuid) + '"><i class="fa fa-link"></i></a></td></tr>' +  
                "</table>"
            },
        ]

        returned_timeliness_l1c_tooltip_info = self.driver.execute_script('return e2e_timeliness_tiles_published_in_dhus_l1c;')
        assert timeliness_l1c_tooltip_info == returned_timeliness_l1c_tooltip_info
        
        timeliness_l2a_tooltip_info = []

        returned_timeliness_l2a_tooltip_info = self.driver.execute_script('return e2e_timeliness_tiles_published_in_dhus_l2a;')
        assert timeliness_l2a_tooltip_info == returned_timeliness_l2a_tooltip_info

        # Missing dissemination table
        missing_table = self.driver.find_element_by_id("dhus-completeness-list-table-MISSING")

        # Row 1
        level = missing_table.find_element_by_xpath("tbody/tr[1]/td[1]")

        assert level.text == "L1C"

        satellite = missing_table.find_element_by_xpath("tbody/tr[1]/td[2]")

        assert satellite.text == "S2A"

        orbit = missing_table.find_element_by_xpath("tbody/tr[1]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = missing_table.find_element_by_xpath("tbody/tr[1]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:54:14"

        stop_datastrip = missing_table.find_element_by_xpath("tbody/tr[1]/td[5]")

        assert stop_datastrip.text == "2018-07-21T09:08:50.195941"

        datastrip = missing_table.find_element_by_xpath("tbody/tr[1]/td[6]")

        assert datastrip.text == "N/A"

        status = missing_table.find_element_by_xpath("tbody/tr[1]/td[7]")

        assert status.text == "MISSING ACQUISITION"

        tiles = missing_table.find_element_by_xpath("tbody/tr[1]/td[8]")

        assert tiles.text == "N/A"

        tiles_dam = missing_table.find_element_by_xpath("tbody/tr[1]/td[9]")

        assert tiles_dam.text == "N/A"

        tiles_dhus = missing_table.find_element_by_xpath("tbody/tr[1]/td[10]")

        assert tiles_dhus.text == "N/A"

        tiles_published_dhus = missing_table.find_element_by_xpath("tbody/tr[1]/td[11]")

        assert tiles_published_dhus.text == "N/A"

        mean_time_dhus = missing_table.find_element_by_xpath("tbody/tr[1]/td[12]")

        assert mean_time_dhus.text == "N/A"

        mean_time_dhus_publication = missing_table.find_element_by_xpath("tbody/tr[1]/td[13]")

        assert mean_time_dhus_publication.text == "N/A"

        datatake = missing_table.find_element_by_xpath("tbody/tr[1]/td[14]")

        assert datatake.text == "N/A"

        start_msi = missing_table.find_element_by_xpath("tbody/tr[1]/td[15]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = missing_table.find_element_by_xpath("tbody/tr[1]/td[16]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

        # Row 2
        level = missing_table.find_element_by_xpath("tbody/tr[2]/td[1]")

        assert level.text == "L1C"

        satellite = missing_table.find_element_by_xpath("tbody/tr[2]/td[2]")

        assert satellite.text == "S2A"

        orbit = missing_table.find_element_by_xpath("tbody/tr[2]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = missing_table.find_element_by_xpath("tbody/tr[2]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:52:31"

        stop_datastrip = missing_table.find_element_by_xpath("tbody/tr[2]/td[5]")

        assert stop_datastrip.text == "2018-07-21T08:54:14"

        datastrip = missing_table.find_element_by_xpath("tbody/tr[2]/td[6]")

        assert datastrip.text == "S2A_OPER_MSI_L1C_DS_MPS__20180721T104253_S20180721T085229_N02.06"

        status = missing_table.find_element_by_xpath("tbody/tr[2]/td[7]")

        assert status.text == "MISSING DAM PUBLICATION"

        tiles = missing_table.find_element_by_xpath("tbody/tr[2]/td[8]")

        assert tiles.text == "4"

        tiles_dam = missing_table.find_element_by_xpath("tbody/tr[2]/td[9]")

        assert tiles_dam.text == "3"

        tiles_dhus = missing_table.find_element_by_xpath("tbody/tr[2]/td[10]")

        assert tiles_dhus.text == "2"

        tiles_published_dhus = missing_table.find_element_by_xpath("tbody/tr[2]/td[11]")

        assert tiles_published_dhus.text == "1"

        mean_time_dhus = missing_table.find_element_by_xpath("tbody/tr[2]/td[12]")

        assert mean_time_dhus.text == "225.797"

        mean_time_dhus_publication = missing_table.find_element_by_xpath("tbody/tr[2]/td[13]")

        assert mean_time_dhus_publication.text == "1206891.184"

        datatake = missing_table.find_element_by_xpath("tbody/tr[2]/td[14]")

        assert datatake.text == "GS2A_20180721T083601_016077_N02.06"

        start_msi = missing_table.find_element_by_xpath("tbody/tr[2]/td[15]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = missing_table.find_element_by_xpath("tbody/tr[2]/td[16]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

        # Row 3
        level = missing_table.find_element_by_xpath("tbody/tr[3]/td[1]")

        assert level.text == "L1C"

        satellite = missing_table.find_element_by_xpath("tbody/tr[3]/td[2]")

        assert satellite.text == "S2A"

        orbit = missing_table.find_element_by_xpath("tbody/tr[3]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = missing_table.find_element_by_xpath("tbody/tr[3]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:36:08.255634"

        stop_datastrip = missing_table.find_element_by_xpath("tbody/tr[3]/td[5]")

        assert stop_datastrip.text == "2018-07-21T08:52:31"

        datastrip = missing_table.find_element_by_xpath("tbody/tr[3]/td[6]")

        assert datastrip.text == "N/A"

        status = missing_table.find_element_by_xpath("tbody/tr[3]/td[7]")

        assert status.text == "MISSING ACQUISITION"

        tiles = missing_table.find_element_by_xpath("tbody/tr[3]/td[8]")

        assert tiles.text == "N/A"

        tiles_dam = missing_table.find_element_by_xpath("tbody/tr[3]/td[9]")

        assert tiles_dam.text == "N/A"

        tiles_dhus = missing_table.find_element_by_xpath("tbody/tr[3]/td[10]")

        assert tiles_dhus.text == "N/A"

        tiles_published_dhus = missing_table.find_element_by_xpath("tbody/tr[3]/td[11]")

        assert tiles_published_dhus.text == "N/A"

        mean_time_dhus = missing_table.find_element_by_xpath("tbody/tr[3]/td[12]")

        assert mean_time_dhus.text == "N/A"

        mean_time_dhus_publication = missing_table.find_element_by_xpath("tbody/tr[3]/td[13]")

        assert mean_time_dhus_publication.text == "N/A"

        datatake = missing_table.find_element_by_xpath("tbody/tr[3]/td[14]")

        assert datatake.text == "N/A"

        start_msi = missing_table.find_element_by_xpath("tbody/tr[3]/td[15]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = missing_table.find_element_by_xpath("tbody/tr[3]/td[16]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

        # Row 4
        level = missing_table.find_element_by_xpath("tbody/tr[4]/td[1]")

        assert level.text == "L2A"

        satellite = missing_table.find_element_by_xpath("tbody/tr[4]/td[2]")

        assert satellite.text == "S2A"

        orbit = missing_table.find_element_by_xpath("tbody/tr[4]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = missing_table.find_element_by_xpath("tbody/tr[4]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:36:08.255634"

        stop_datastrip = missing_table.find_element_by_xpath("tbody/tr[4]/td[5]")

        assert stop_datastrip.text == "2018-07-21T09:08:50.195941"

        datastrip = missing_table.find_element_by_xpath("tbody/tr[4]/td[6]")

        assert datastrip.text == "N/A"

        status = missing_table.find_element_by_xpath("tbody/tr[4]/td[7]")

        assert status.text == "MISSING ACQUISITION"

        tiles = missing_table.find_element_by_xpath("tbody/tr[4]/td[8]")

        assert tiles.text == "N/A"

        tiles_dam = missing_table.find_element_by_xpath("tbody/tr[4]/td[9]")

        assert tiles_dam.text == "N/A"

        tiles_dhus = missing_table.find_element_by_xpath("tbody/tr[4]/td[10]")

        assert tiles_dhus.text == "N/A"

        tiles_published_dhus = missing_table.find_element_by_xpath("tbody/tr[4]/td[11]")

        assert tiles_published_dhus.text == "N/A"

        mean_time_dhus = missing_table.find_element_by_xpath("tbody/tr[4]/td[12]")

        assert mean_time_dhus.text == "N/A"

        mean_time_dhus_publication = missing_table.find_element_by_xpath("tbody/tr[4]/td[13]")

        assert mean_time_dhus_publication.text == "N/A"

        datatake = missing_table.find_element_by_xpath("tbody/tr[4]/td[14]")

        assert datatake.text == "N/A"

        start_msi = missing_table.find_element_by_xpath("tbody/tr[4]/td[15]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = missing_table.find_element_by_xpath("tbody/tr[4]/td[16]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

        # Data availability table
        complete_table = self.driver.find_element_by_id("dhus-completeness-list-table-COMPLETE")

        # Row 1
        level = complete_table.find_element_by_xpath("tbody/tr[1]/td[1]")

        assert level.text == "L1C"

        satellite = complete_table.find_element_by_xpath("tbody/tr[1]/td[2]")

        assert satellite.text == "S2A"

        orbit = complete_table.find_element_by_xpath("tbody/tr[1]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = complete_table.find_element_by_xpath("tbody/tr[1]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:54:14"

        stop_datastrip = complete_table.find_element_by_xpath("tbody/tr[1]/td[5]")

        assert stop_datastrip.text == "2018-07-21T09:08:50.195941"

        datastrip = complete_table.find_element_by_xpath("tbody/tr[1]/td[6]")

        assert datastrip.text == "N/A"

        status = complete_table.find_element_by_xpath("tbody/tr[1]/td[7]")

        assert status.text == "MISSING ACQUISITION"

        tiles = complete_table.find_element_by_xpath("tbody/tr[1]/td[8]")

        assert tiles.text == "N/A"

        tiles_dam = complete_table.find_element_by_xpath("tbody/tr[1]/td[9]")

        assert tiles_dam.text == "N/A"

        tiles_dhus = complete_table.find_element_by_xpath("tbody/tr[1]/td[10]")

        assert tiles_dhus.text == "N/A"

        tiles_published_dhus = complete_table.find_element_by_xpath("tbody/tr[1]/td[11]")

        assert tiles_published_dhus.text == "N/A"

        mean_time_dhus = complete_table.find_element_by_xpath("tbody/tr[1]/td[12]")

        assert mean_time_dhus.text == "N/A"

        mean_time_dhus_publication = complete_table.find_element_by_xpath("tbody/tr[1]/td[13]")

        assert mean_time_dhus_publication.text == "N/A"

        datatake = complete_table.find_element_by_xpath("tbody/tr[1]/td[14]")

        assert datatake.text == "N/A"

        start_msi = complete_table.find_element_by_xpath("tbody/tr[1]/td[15]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = complete_table.find_element_by_xpath("tbody/tr[1]/td[16]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

        # Row 2
        level = complete_table.find_element_by_xpath("tbody/tr[2]/td[1]")

        assert level.text == "L1C"

        satellite = complete_table.find_element_by_xpath("tbody/tr[2]/td[2]")

        assert satellite.text == "S2A"

        orbit = complete_table.find_element_by_xpath("tbody/tr[2]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = complete_table.find_element_by_xpath("tbody/tr[2]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:52:31"

        stop_datastrip = complete_table.find_element_by_xpath("tbody/tr[2]/td[5]")

        assert stop_datastrip.text == "2018-07-21T08:54:14"

        datastrip = complete_table.find_element_by_xpath("tbody/tr[2]/td[6]")

        assert datastrip.text == "S2A_OPER_MSI_L1C_DS_MPS__20180721T104253_S20180721T085229_N02.06"

        status = complete_table.find_element_by_xpath("tbody/tr[2]/td[7]")

        assert status.text == "MISSING DAM PUBLICATION"

        tiles = complete_table.find_element_by_xpath("tbody/tr[2]/td[8]")

        assert tiles.text == "4"

        tiles_dam = complete_table.find_element_by_xpath("tbody/tr[2]/td[9]")

        assert tiles_dam.text == "3"

        tiles_dhus = complete_table.find_element_by_xpath("tbody/tr[2]/td[10]")

        assert tiles_dhus.text == "2"

        tiles_published_dhus = complete_table.find_element_by_xpath("tbody/tr[2]/td[11]")

        assert tiles_published_dhus.text == "1"

        mean_time_dhus = complete_table.find_element_by_xpath("tbody/tr[2]/td[12]")

        assert mean_time_dhus.text == "225.797"

        mean_time_dhus_publication = complete_table.find_element_by_xpath("tbody/tr[2]/td[13]")

        assert mean_time_dhus_publication.text == "1206891.184"

        datatake = complete_table.find_element_by_xpath("tbody/tr[2]/td[14]")

        assert datatake.text == "GS2A_20180721T083601_016077_N02.06"

        start_msi = complete_table.find_element_by_xpath("tbody/tr[2]/td[15]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = complete_table.find_element_by_xpath("tbody/tr[2]/td[16]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

        # Row 3
        level = complete_table.find_element_by_xpath("tbody/tr[3]/td[1]")

        assert level.text == "L1C"

        satellite = complete_table.find_element_by_xpath("tbody/tr[3]/td[2]")

        assert satellite.text == "S2A"

        orbit = complete_table.find_element_by_xpath("tbody/tr[3]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = complete_table.find_element_by_xpath("tbody/tr[3]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:36:08.255634"

        stop_datastrip = complete_table.find_element_by_xpath("tbody/tr[3]/td[5]")

        assert stop_datastrip.text == "2018-07-21T08:52:31"

        datastrip = complete_table.find_element_by_xpath("tbody/tr[3]/td[6]")

        assert datastrip.text == "N/A"

        status = complete_table.find_element_by_xpath("tbody/tr[3]/td[7]")

        assert status.text == "MISSING ACQUISITION"

        tiles = complete_table.find_element_by_xpath("tbody/tr[3]/td[8]")

        assert tiles.text == "N/A"

        tiles_dam = complete_table.find_element_by_xpath("tbody/tr[3]/td[9]")

        assert tiles_dam.text == "N/A"

        tiles_dhus = complete_table.find_element_by_xpath("tbody/tr[3]/td[10]")

        assert tiles_dhus.text == "N/A"

        tiles_published_dhus = complete_table.find_element_by_xpath("tbody/tr[3]/td[11]")

        assert tiles_published_dhus.text == "N/A"

        mean_time_dhus = complete_table.find_element_by_xpath("tbody/tr[3]/td[12]")

        assert mean_time_dhus.text == "N/A"

        mean_time_dhus_publication = complete_table.find_element_by_xpath("tbody/tr[3]/td[13]")

        assert mean_time_dhus_publication.text == "N/A"

        datatake = complete_table.find_element_by_xpath("tbody/tr[3]/td[14]")

        assert datatake.text == "N/A"

        start_msi = complete_table.find_element_by_xpath("tbody/tr[3]/td[15]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = complete_table.find_element_by_xpath("tbody/tr[3]/td[16]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

        # Row 4
        level = complete_table.find_element_by_xpath("tbody/tr[4]/td[1]")

        assert level.text == "L2A"

        satellite = complete_table.find_element_by_xpath("tbody/tr[4]/td[2]")

        assert satellite.text == "S2A"

        orbit = complete_table.find_element_by_xpath("tbody/tr[4]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = complete_table.find_element_by_xpath("tbody/tr[4]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:36:08.255634"

        stop_datastrip = complete_table.find_element_by_xpath("tbody/tr[4]/td[5]")

        assert stop_datastrip.text == "2018-07-21T09:08:50.195941"

        datastrip = complete_table.find_element_by_xpath("tbody/tr[4]/td[6]")

        assert datastrip.text == "N/A"

        status = complete_table.find_element_by_xpath("tbody/tr[4]/td[7]")

        assert status.text == "MISSING ACQUISITION"

        tiles = complete_table.find_element_by_xpath("tbody/tr[4]/td[8]")

        assert tiles.text == "N/A"

        tiles_dam = complete_table.find_element_by_xpath("tbody/tr[4]/td[9]")

        assert tiles_dam.text == "N/A"

        tiles_dhus = complete_table.find_element_by_xpath("tbody/tr[4]/td[10]")

        assert tiles_dhus.text == "N/A"

        tiles_published_dhus = complete_table.find_element_by_xpath("tbody/tr[4]/td[11]")

        assert tiles_published_dhus.text == "N/A"

        mean_time_dhus = complete_table.find_element_by_xpath("tbody/tr[4]/td[12]")

        assert mean_time_dhus.text == "N/A"

        mean_time_dhus_publication = complete_table.find_element_by_xpath("tbody/tr[4]/td[13]")

        assert mean_time_dhus_publication.text == "N/A"

        datatake = complete_table.find_element_by_xpath("tbody/tr[4]/td[14]")

        assert datatake.text == "N/A"

        start_msi = complete_table.find_element_by_xpath("tbody/tr[4]/td[15]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = complete_table.find_element_by_xpath("tbody/tr[4]/td[16]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

        # Datatake by UUID missing table
        wait = WebDriverWait(self.driver,5)

        self.driver.get("http://localhost:5000/views/dhus-completeness-by-datatake/" + str(planned_imaging_correction[0].event_uuid))

        missing_datatake_table = self.driver.find_element_by_id("dhus-completeness-list-table-MISSING")

        # Row 1
        level = missing_datatake_table.find_element_by_xpath("tbody/tr[1]/td[1]")

        assert level.text == "L1C"

        satellite = missing_datatake_table.find_element_by_xpath("tbody/tr[1]/td[2]")

        assert satellite.text == "S2A"

        orbit = missing_datatake_table.find_element_by_xpath("tbody/tr[1]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = missing_datatake_table.find_element_by_xpath("tbody/tr[1]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:54:14"

        stop_datastrip = missing_datatake_table.find_element_by_xpath("tbody/tr[1]/td[5]")

        assert stop_datastrip.text == "2018-07-21T09:08:50.195941"

        datastrip = missing_datatake_table.find_element_by_xpath("tbody/tr[1]/td[6]")

        assert datastrip.text == "N/A"

        status = missing_datatake_table.find_element_by_xpath("tbody/tr[1]/td[7]")

        assert status.text == "MISSING ACQUISITION"

        tiles = missing_datatake_table.find_element_by_xpath("tbody/tr[1]/td[8]")

        assert tiles.text == "N/A"

        tiles_dam = missing_datatake_table.find_element_by_xpath("tbody/tr[1]/td[9]")

        assert tiles_dam.text == "N/A"

        tiles_dhus = missing_datatake_table.find_element_by_xpath("tbody/tr[1]/td[10]")

        assert tiles_dhus.text == "N/A"

        tiles_published_dhus = missing_datatake_table.find_element_by_xpath("tbody/tr[1]/td[11]")

        assert tiles_published_dhus.text == "N/A"

        mean_time_dhus = missing_datatake_table.find_element_by_xpath("tbody/tr[1]/td[12]")

        assert mean_time_dhus.text == "N/A"

        mean_time_dhus_publication = missing_datatake_table.find_element_by_xpath("tbody/tr[1]/td[13]")

        assert mean_time_dhus_publication.text == "N/A"

        datatake = missing_datatake_table.find_element_by_xpath("tbody/tr[1]/td[14]")

        assert datatake.text == "N/A"

        datatake = missing_datatake_table.find_element_by_xpath("tbody/tr[1]/td[15]")

        assert datatake.text == "N/A"

        datatake = missing_datatake_table.find_element_by_xpath("tbody/tr[1]/td[16]")

        assert datatake.text == "N/A"

        start_msi = missing_datatake_table.find_element_by_xpath("tbody/tr[1]/td[17]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = missing_datatake_table.find_element_by_xpath("tbody/tr[1]/td[18]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

        # Row 2
        level = missing_datatake_table.find_element_by_xpath("tbody/tr[2]/td[1]")

        assert level.text == "L1C"

        satellite = missing_datatake_table.find_element_by_xpath("tbody/tr[2]/td[2]")

        assert satellite.text == "S2A"

        orbit = missing_datatake_table.find_element_by_xpath("tbody/tr[2]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = missing_datatake_table.find_element_by_xpath("tbody/tr[2]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:52:31"

        stop_datastrip = missing_datatake_table.find_element_by_xpath("tbody/tr[2]/td[5]")

        assert stop_datastrip.text == "2018-07-21T08:54:14"

        datastrip = missing_datatake_table.find_element_by_xpath("tbody/tr[2]/td[6]")

        assert datastrip.text == "S2A_OPER_MSI_L1C_TL_MPS__20180721T104253_A016077_T35QMF_N02.06"

        status = missing_datatake_table.find_element_by_xpath("tbody/tr[2]/td[7]")

        assert status.text == "MISSING DHUS DISSEMINATION"

        tiles = missing_datatake_table.find_element_by_xpath("tbody/tr[2]/td[8]")

        assert tiles.text == "N/A"

        tiles_dam = missing_datatake_table.find_element_by_xpath("tbody/tr[2]/td[9]")

        assert tiles_dam.text == "2018-07-21 11:02:45.886792"

        tiles_dhus = missing_datatake_table.find_element_by_xpath("tbody/tr[2]/td[10]")

        assert tiles_dhus.text == "N/A"

        tiles_published_dhus = missing_datatake_table.find_element_by_xpath("tbody/tr[2]/td[11]")

        assert tiles_published_dhus.text == "N/A"

        mean_time_dhus = missing_datatake_table.find_element_by_xpath("tbody/tr[2]/td[12]")

        assert mean_time_dhus.text == "N/A"

        mean_time_dhus_publication = missing_datatake_table.find_element_by_xpath("tbody/tr[2]/td[13]")

        assert mean_time_dhus_publication.text == "N/A"

        datatake = missing_datatake_table.find_element_by_xpath("tbody/tr[2]/td[14]")

        assert datatake.text == "N/A"

        datatake = missing_datatake_table.find_element_by_xpath("tbody/tr[2]/td[15]")

        assert datatake.text == "S2A_OPER_MSI_L1C_DS_MPS__20180721T104253_S20180721T085229_N02.06"

        datatake = missing_datatake_table.find_element_by_xpath("tbody/tr[2]/td[16]")

        assert datatake.text == "GS2A_20180721T083601_016077_N02.06"

        start_msi = missing_datatake_table.find_element_by_xpath("tbody/tr[2]/td[17]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = missing_datatake_table.find_element_by_xpath("tbody/tr[2]/td[18]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

        # Row 3
        level = missing_datatake_table.find_element_by_xpath("tbody/tr[3]/td[1]")

        assert level.text == "L1C"

        satellite = missing_datatake_table.find_element_by_xpath("tbody/tr[3]/td[2]")

        assert satellite.text == "S2A"

        orbit = missing_datatake_table.find_element_by_xpath("tbody/tr[3]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = missing_datatake_table.find_element_by_xpath("tbody/tr[3]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:52:31"

        stop_datastrip = missing_datatake_table.find_element_by_xpath("tbody/tr[3]/td[5]")

        assert stop_datastrip.text == "2018-07-21T08:54:14"

        datastrip = missing_datatake_table.find_element_by_xpath("tbody/tr[3]/td[6]")

        assert datastrip.text == "S2A_OPER_MSI_L1C_TL_MPS__20180721T104253_A016077_T35QMG_N02.06"

        status = missing_datatake_table.find_element_by_xpath("tbody/tr[3]/td[7]")

        assert status.text == "MISSING DAM PUBLICATION"

        tiles = missing_datatake_table.find_element_by_xpath("tbody/tr[3]/td[8]")

        assert tiles.text == "N/A"

        tiles_dam = missing_datatake_table.find_element_by_xpath("tbody/tr[3]/td[9]")

        assert tiles_dam.text == "N/A"

        tiles_dhus = missing_datatake_table.find_element_by_xpath("tbody/tr[3]/td[10]")

        assert tiles_dhus.text == "N/A"

        tiles_published_dhus = missing_datatake_table.find_element_by_xpath("tbody/tr[3]/td[11]")

        assert tiles_published_dhus.text == "N/A"

        mean_time_dhus = missing_datatake_table.find_element_by_xpath("tbody/tr[3]/td[12]")

        assert mean_time_dhus.text == "N/A"

        mean_time_dhus_publication = missing_datatake_table.find_element_by_xpath("tbody/tr[3]/td[13]")

        assert mean_time_dhus_publication.text == "N/A"

        datatake = missing_datatake_table.find_element_by_xpath("tbody/tr[3]/td[14]")

        assert datatake.text == "N/A"

        datatake = missing_datatake_table.find_element_by_xpath("tbody/tr[3]/td[15]")

        assert datatake.text == "S2A_OPER_MSI_L1C_DS_MPS__20180721T104253_S20180721T085229_N02.06"

        datatake = missing_datatake_table.find_element_by_xpath("tbody/tr[3]/td[16]")

        assert datatake.text == "GS2A_20180721T083601_016077_N02.06"

        start_msi = missing_datatake_table.find_element_by_xpath("tbody/tr[3]/td[17]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = missing_datatake_table.find_element_by_xpath("tbody/tr[3]/td[18]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

        # Row 4
        level = missing_datatake_table.find_element_by_xpath("tbody/tr[4]/td[1]")

        assert level.text == "L1C"

        satellite = missing_datatake_table.find_element_by_xpath("tbody/tr[4]/td[2]")

        assert satellite.text == "S2A"

        orbit = missing_datatake_table.find_element_by_xpath("tbody/tr[4]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = missing_datatake_table.find_element_by_xpath("tbody/tr[4]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:52:31"

        stop_datastrip = missing_datatake_table.find_element_by_xpath("tbody/tr[4]/td[5]")

        assert stop_datastrip.text == "2018-07-21T08:54:14"

        datastrip = missing_datatake_table.find_element_by_xpath("tbody/tr[4]/td[6]")

        assert datastrip.text == "S2A_OPER_MSI_L1C_TL_MPS__20180721T104253_A016077_T35QMQ_N02.06"

        status = missing_datatake_table.find_element_by_xpath("tbody/tr[4]/td[7]")

        assert status.text == "MISSING DHUS PUBLICATION"

        tiles = missing_datatake_table.find_element_by_xpath("tbody/tr[4]/td[8]")

        assert tiles.text == "S2B_MSIL1C_20180721T085229_N0206_R107_T35QMQ_20180721T104253.SAFE"

        tiles_dam = missing_datatake_table.find_element_by_xpath("tbody/tr[4]/td[9]")

        assert tiles_dam.text == "N/A"

        tiles_dhus = missing_datatake_table.find_element_by_xpath("tbody/tr[4]/td[10]")

        assert tiles_dhus.text == "2018-07-21 12:54:48"

        tiles_published_dhus = missing_datatake_table.find_element_by_xpath("tbody/tr[4]/td[11]")

        assert tiles_published_dhus.text == "N/A"

        mean_time_dhus = missing_datatake_table.find_element_by_xpath("tbody/tr[4]/td[12]")

        assert mean_time_dhus.text == "N/A"

        mean_time_dhus_publication = missing_datatake_table.find_element_by_xpath("tbody/tr[4]/td[13]")

        assert mean_time_dhus_publication.text == "225.797"

        datatake = missing_datatake_table.find_element_by_xpath("tbody/tr[4]/td[14]")

        assert datatake.text == "N/A"

        datatake = missing_datatake_table.find_element_by_xpath("tbody/tr[4]/td[15]")

        assert datatake.text == "S2A_OPER_MSI_L1C_DS_MPS__20180721T104253_S20180721T085229_N02.06"

        datatake = missing_datatake_table.find_element_by_xpath("tbody/tr[4]/td[16]")

        assert datatake.text == "GS2A_20180721T083601_016077_N02.06"

        start_msi = missing_datatake_table.find_element_by_xpath("tbody/tr[4]/td[17]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = missing_datatake_table.find_element_by_xpath("tbody/tr[4]/td[18]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

        # Row 5
        level = missing_datatake_table.find_element_by_xpath("tbody/tr[5]/td[1]")

        assert level.text == "L1C"

        satellite = missing_datatake_table.find_element_by_xpath("tbody/tr[5]/td[2]")

        assert satellite.text == "S2A"

        orbit = missing_datatake_table.find_element_by_xpath("tbody/tr[5]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = missing_datatake_table.find_element_by_xpath("tbody/tr[5]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:36:08.255634"

        stop_datastrip = missing_datatake_table.find_element_by_xpath("tbody/tr[5]/td[5]")

        assert stop_datastrip.text == "2018-07-21T08:52:31"

        datastrip = missing_datatake_table.find_element_by_xpath("tbody/tr[5]/td[6]")

        assert datastrip.text == "N/A"

        status = missing_datatake_table.find_element_by_xpath("tbody/tr[5]/td[7]")

        assert status.text == "MISSING ACQUISITION"

        tiles = missing_datatake_table.find_element_by_xpath("tbody/tr[5]/td[8]")

        assert tiles.text == "N/A"

        tiles_dam = missing_datatake_table.find_element_by_xpath("tbody/tr[5]/td[9]")

        assert tiles_dam.text == "N/A"

        tiles_dhus = missing_datatake_table.find_element_by_xpath("tbody/tr[5]/td[10]")

        assert tiles_dhus.text == "N/A"

        tiles_published_dhus = missing_datatake_table.find_element_by_xpath("tbody/tr[5]/td[11]")

        assert tiles_published_dhus.text == "N/A"

        mean_time_dhus = missing_datatake_table.find_element_by_xpath("tbody/tr[5]/td[12]")

        assert mean_time_dhus.text == "N/A"

        mean_time_dhus_publication = missing_datatake_table.find_element_by_xpath("tbody/tr[5]/td[13]")

        assert mean_time_dhus_publication.text == "N/A"

        datatake = missing_datatake_table.find_element_by_xpath("tbody/tr[5]/td[14]")

        assert datatake.text == "N/A"

        datatake = missing_datatake_table.find_element_by_xpath("tbody/tr[5]/td[15]")

        assert datatake.text == "N/A"

        datatake = missing_datatake_table.find_element_by_xpath("tbody/tr[5]/td[16]")

        assert datatake.text == "N/A"

        start_msi = missing_datatake_table.find_element_by_xpath("tbody/tr[5]/td[17]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = missing_datatake_table.find_element_by_xpath("tbody/tr[5]/td[18]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

        # Row 6
        level = missing_datatake_table.find_element_by_xpath("tbody/tr[6]/td[1]")

        assert level.text == "L2A"

        satellite = missing_datatake_table.find_element_by_xpath("tbody/tr[6]/td[2]")

        assert satellite.text == "S2A"

        orbit = missing_datatake_table.find_element_by_xpath("tbody/tr[6]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = missing_datatake_table.find_element_by_xpath("tbody/tr[6]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:36:08.255634"

        stop_datastrip = missing_datatake_table.find_element_by_xpath("tbody/tr[6]/td[5]")

        assert stop_datastrip.text == "2018-07-21T09:08:50.195941"

        datastrip = missing_datatake_table.find_element_by_xpath("tbody/tr[6]/td[6]")

        assert datastrip.text == "N/A"

        status = missing_datatake_table.find_element_by_xpath("tbody/tr[6]/td[7]")

        assert status.text == "MISSING ACQUISITION"

        tiles = missing_datatake_table.find_element_by_xpath("tbody/tr[6]/td[8]")

        assert tiles.text == "N/A"

        tiles_dam = missing_datatake_table.find_element_by_xpath("tbody/tr[6]/td[9]")

        assert tiles_dam.text == "N/A"

        tiles_dhus = missing_datatake_table.find_element_by_xpath("tbody/tr[6]/td[10]")

        assert tiles_dhus.text == "N/A"

        tiles_published_dhus = missing_datatake_table.find_element_by_xpath("tbody/tr[6]/td[11]")

        assert tiles_published_dhus.text == "N/A"

        mean_time_dhus = missing_datatake_table.find_element_by_xpath("tbody/tr[6]/td[12]")

        assert mean_time_dhus.text == "N/A"

        mean_time_dhus_publication = missing_datatake_table.find_element_by_xpath("tbody/tr[6]/td[13]")

        assert mean_time_dhus_publication.text == "N/A"

        datatake = missing_datatake_table.find_element_by_xpath("tbody/tr[6]/td[14]")

        assert datatake.text == "N/A"

        datatake = missing_datatake_table.find_element_by_xpath("tbody/tr[6]/td[15]")

        assert datatake.text == "N/A"

        datatake = missing_datatake_table.find_element_by_xpath("tbody/tr[6]/td[16]")

        assert datatake.text == "N/A"

        start_msi = missing_datatake_table.find_element_by_xpath("tbody/tr[6]/td[17]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = missing_datatake_table.find_element_by_xpath("tbody/tr[6]/td[18]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

        # Datatake by UUID complete table
        complete_datatake_table = self.driver.find_element_by_id("dhus-completeness-list-table-COMPLETE")

        # Row 1
        level = complete_datatake_table.find_element_by_xpath("tbody/tr[1]/td[1]")

        assert level.text == "L1C"

        satellite = complete_datatake_table.find_element_by_xpath("tbody/tr[1]/td[2]")

        assert satellite.text == "S2A"

        orbit = complete_datatake_table.find_element_by_xpath("tbody/tr[1]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = complete_datatake_table.find_element_by_xpath("tbody/tr[1]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:54:14"

        stop_datastrip = complete_datatake_table.find_element_by_xpath("tbody/tr[1]/td[5]")

        assert stop_datastrip.text == "2018-07-21T09:08:50.195941"

        datastrip = complete_datatake_table.find_element_by_xpath("tbody/tr[1]/td[6]")

        assert datastrip.text == "N/A"

        status = complete_datatake_table.find_element_by_xpath("tbody/tr[1]/td[7]")

        assert status.text == "MISSING ACQUISITION"

        tiles = complete_datatake_table.find_element_by_xpath("tbody/tr[1]/td[8]")

        assert tiles.text == "N/A"

        tiles_dam = complete_datatake_table.find_element_by_xpath("tbody/tr[1]/td[9]")

        assert tiles_dam.text == "N/A"

        tiles_dhus = complete_datatake_table.find_element_by_xpath("tbody/tr[1]/td[10]")

        assert tiles_dhus.text == "N/A"

        tiles_published_dhus = complete_datatake_table.find_element_by_xpath("tbody/tr[1]/td[11]")

        assert tiles_published_dhus.text == "N/A"

        mean_time_dhus = complete_datatake_table.find_element_by_xpath("tbody/tr[1]/td[12]")

        assert mean_time_dhus.text == "N/A"

        mean_time_dhus_publication = complete_datatake_table.find_element_by_xpath("tbody/tr[1]/td[13]")

        assert mean_time_dhus_publication.text == "N/A"

        datatake = complete_datatake_table.find_element_by_xpath("tbody/tr[1]/td[14]")

        assert datatake.text == "N/A"

        datatake = complete_datatake_table.find_element_by_xpath("tbody/tr[1]/td[15]")

        assert datatake.text == "N/A"

        datatake = complete_datatake_table.find_element_by_xpath("tbody/tr[1]/td[16]")

        assert datatake.text == "N/A"

        start_msi = complete_datatake_table.find_element_by_xpath("tbody/tr[1]/td[17]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = complete_datatake_table.find_element_by_xpath("tbody/tr[1]/td[18]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

         # Row 2
        level = complete_datatake_table.find_element_by_xpath("tbody/tr[2]/td[1]")

        assert level.text == "L1C"

        satellite = complete_datatake_table.find_element_by_xpath("tbody/tr[2]/td[2]")

        assert satellite.text == "S2A"

        orbit = complete_datatake_table.find_element_by_xpath("tbody/tr[2]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = complete_datatake_table.find_element_by_xpath("tbody/tr[2]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:52:31"

        stop_datastrip = complete_datatake_table.find_element_by_xpath("tbody/tr[2]/td[5]")

        assert stop_datastrip.text == "2018-07-21T08:54:14"

        datastrip = complete_datatake_table.find_element_by_xpath("tbody/tr[2]/td[6]")

        assert datastrip.text == "S2A_OPER_MSI_L1C_TL_MPS__20180721T104253_A016077_T35QME_N02.06"

        status = complete_datatake_table.find_element_by_xpath("tbody/tr[2]/td[7]")

        assert status.text == "OK"

        tiles = complete_datatake_table.find_element_by_xpath("tbody/tr[2]/td[8]")

        assert tiles.text == "S2B_MSIL1C_20180721T085229_N0206_R107_T35QME_20180721T104253.SAFE"

        tiles_dam = complete_datatake_table.find_element_by_xpath("tbody/tr[2]/td[9]")

        assert tiles_dam.text == "2018-07-21 11:02:45.891129"

        tiles_dhus = complete_datatake_table.find_element_by_xpath("tbody/tr[2]/td[10]")

        assert tiles_dhus.text == "2018-07-21 12:54:48"

        tiles_published_dhus = complete_datatake_table.find_element_by_xpath("tbody/tr[2]/td[11]")

        assert tiles_published_dhus.text == "2020-11-05 12:00:11.234000"

        mean_time_dhus = complete_datatake_table.find_element_by_xpath("tbody/tr[2]/td[12]")

        assert mean_time_dhus.text == "112.035"

        mean_time_dhus_publication = complete_datatake_table.find_element_by_xpath("tbody/tr[2]/td[13]")

        assert mean_time_dhus_publication.text == "225.797"

        datatake = complete_datatake_table.find_element_by_xpath("tbody/tr[2]/td[14]")

        assert datatake.text == "1206891.184"

        datatake = complete_datatake_table.find_element_by_xpath("tbody/tr[2]/td[15]")

        assert datatake.text == "S2A_OPER_MSI_L1C_DS_MPS__20180721T104253_S20180721T085229_N02.06"

        datatake = complete_datatake_table.find_element_by_xpath("tbody/tr[2]/td[16]")

        assert datatake.text == "GS2A_20180721T083601_016077_N02.06"

        start_msi = complete_datatake_table.find_element_by_xpath("tbody/tr[2]/td[17]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = complete_datatake_table.find_element_by_xpath("tbody/tr[2]/td[18]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

        # Row 3
        level = complete_datatake_table.find_element_by_xpath("tbody/tr[3]/td[1]")

        assert level.text == "L1C"

        satellite = complete_datatake_table.find_element_by_xpath("tbody/tr[3]/td[2]")

        assert satellite.text == "S2A"

        orbit = complete_datatake_table.find_element_by_xpath("tbody/tr[3]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = complete_datatake_table.find_element_by_xpath("tbody/tr[3]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:52:31"

        stop_datastrip = complete_datatake_table.find_element_by_xpath("tbody/tr[3]/td[5]")

        assert stop_datastrip.text == "2018-07-21T08:54:14"

        datastrip = complete_datatake_table.find_element_by_xpath("tbody/tr[3]/td[6]")

        assert datastrip.text == "S2A_OPER_MSI_L1C_TL_MPS__20180721T104253_A016077_T35QMF_N02.06"

        status = complete_datatake_table.find_element_by_xpath("tbody/tr[3]/td[7]")

        assert status.text == "MISSING DHUS DISSEMINATION"

        tiles = complete_datatake_table.find_element_by_xpath("tbody/tr[3]/td[8]")

        assert tiles.text == "N/A"

        tiles_dam = complete_datatake_table.find_element_by_xpath("tbody/tr[3]/td[9]")

        assert tiles_dam.text == "2018-07-21 11:02:45.886792"

        tiles_dhus = complete_datatake_table.find_element_by_xpath("tbody/tr[3]/td[10]")

        assert tiles_dhus.text == "N/A"

        tiles_published_dhus = complete_datatake_table.find_element_by_xpath("tbody/tr[3]/td[11]")

        assert tiles_published_dhus.text == "N/A"

        mean_time_dhus = complete_datatake_table.find_element_by_xpath("tbody/tr[3]/td[12]")

        assert mean_time_dhus.text == "N/A"

        mean_time_dhus_publication = complete_datatake_table.find_element_by_xpath("tbody/tr[3]/td[13]")

        assert mean_time_dhus_publication.text == "N/A"

        datatake = complete_datatake_table.find_element_by_xpath("tbody/tr[3]/td[14]")

        assert datatake.text == "N/A"

        datatake = complete_datatake_table.find_element_by_xpath("tbody/tr[3]/td[15]")

        assert datatake.text == "S2A_OPER_MSI_L1C_DS_MPS__20180721T104253_S20180721T085229_N02.06"

        datatake = complete_datatake_table.find_element_by_xpath("tbody/tr[3]/td[16]")

        assert datatake.text == "GS2A_20180721T083601_016077_N02.06"

        start_msi = complete_datatake_table.find_element_by_xpath("tbody/tr[3]/td[17]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = complete_datatake_table.find_element_by_xpath("tbody/tr[3]/td[18]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

        # Row 4
        level = complete_datatake_table.find_element_by_xpath("tbody/tr[4]/td[1]")

        assert level.text == "L1C"

        satellite = complete_datatake_table.find_element_by_xpath("tbody/tr[4]/td[2]")

        assert satellite.text == "S2A"

        orbit = complete_datatake_table.find_element_by_xpath("tbody/tr[4]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = complete_datatake_table.find_element_by_xpath("tbody/tr[4]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:52:31"

        stop_datastrip = complete_datatake_table.find_element_by_xpath("tbody/tr[4]/td[5]")

        assert stop_datastrip.text == "2018-07-21T08:54:14"

        datastrip = complete_datatake_table.find_element_by_xpath("tbody/tr[4]/td[6]")

        assert datastrip.text == "S2A_OPER_MSI_L1C_TL_MPS__20180721T104253_A016077_T35QMG_N02.06"

        status = complete_datatake_table.find_element_by_xpath("tbody/tr[4]/td[7]")

        assert status.text == "MISSING DAM PUBLICATION"

        tiles = complete_datatake_table.find_element_by_xpath("tbody/tr[4]/td[8]")

        assert tiles.text == "N/A"

        tiles_dam = complete_datatake_table.find_element_by_xpath("tbody/tr[4]/td[9]")

        assert tiles_dam.text == "N/A"

        tiles_dhus = complete_datatake_table.find_element_by_xpath("tbody/tr[4]/td[10]")

        assert tiles_dhus.text == "N/A"

        tiles_published_dhus = complete_datatake_table.find_element_by_xpath("tbody/tr[4]/td[11]")

        assert tiles_published_dhus.text == "N/A"

        mean_time_dhus = complete_datatake_table.find_element_by_xpath("tbody/tr[4]/td[12]")

        assert mean_time_dhus.text == "N/A"

        mean_time_dhus_publication = complete_datatake_table.find_element_by_xpath("tbody/tr[4]/td[13]")

        assert mean_time_dhus_publication.text == "N/A"

        datatake = complete_datatake_table.find_element_by_xpath("tbody/tr[4]/td[14]")

        assert datatake.text == "N/A"

        datatake = complete_datatake_table.find_element_by_xpath("tbody/tr[4]/td[15]")

        assert datatake.text == "S2A_OPER_MSI_L1C_DS_MPS__20180721T104253_S20180721T085229_N02.06"

        datatake = complete_datatake_table.find_element_by_xpath("tbody/tr[4]/td[16]")

        assert datatake.text == "GS2A_20180721T083601_016077_N02.06"

        start_msi = complete_datatake_table.find_element_by_xpath("tbody/tr[4]/td[17]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = complete_datatake_table.find_element_by_xpath("tbody/tr[4]/td[18]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

        # Row 5
        level = complete_datatake_table.find_element_by_xpath("tbody/tr[5]/td[1]")

        assert level.text == "L1C"

        satellite = complete_datatake_table.find_element_by_xpath("tbody/tr[5]/td[2]")

        assert satellite.text == "S2A"

        orbit = complete_datatake_table.find_element_by_xpath("tbody/tr[5]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = complete_datatake_table.find_element_by_xpath("tbody/tr[5]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:52:31"

        stop_datastrip = complete_datatake_table.find_element_by_xpath("tbody/tr[5]/td[5]")

        assert stop_datastrip.text == "2018-07-21T08:54:14"

        datastrip = complete_datatake_table.find_element_by_xpath("tbody/tr[5]/td[6]")

        assert datastrip.text == "S2A_OPER_MSI_L1C_TL_MPS__20180721T104253_A016077_T35QMQ_N02.06"

        status = complete_datatake_table.find_element_by_xpath("tbody/tr[5]/td[7]")

        assert status.text == "MISSING DHUS PUBLICATION"

        tiles = complete_datatake_table.find_element_by_xpath("tbody/tr[5]/td[8]")

        assert tiles.text == "S2B_MSIL1C_20180721T085229_N0206_R107_T35QMQ_20180721T104253.SAFE"

        tiles_dam = complete_datatake_table.find_element_by_xpath("tbody/tr[5]/td[9]")

        assert tiles_dam.text == "N/A"

        tiles_dhus = complete_datatake_table.find_element_by_xpath("tbody/tr[5]/td[10]")

        assert tiles_dhus.text == "2018-07-21 12:54:48"

        tiles_published_dhus = complete_datatake_table.find_element_by_xpath("tbody/tr[5]/td[11]")

        assert tiles_published_dhus.text == "N/A"

        mean_time_dhus = complete_datatake_table.find_element_by_xpath("tbody/tr[5]/td[12]")

        assert mean_time_dhus.text == "N/A"

        mean_time_dhus_publication = complete_datatake_table.find_element_by_xpath("tbody/tr[5]/td[13]")

        assert mean_time_dhus_publication.text == "225.797"

        datatake = complete_datatake_table.find_element_by_xpath("tbody/tr[5]/td[14]")

        assert datatake.text == "N/A"

        datatake = complete_datatake_table.find_element_by_xpath("tbody/tr[5]/td[15]")

        assert datatake.text == "S2A_OPER_MSI_L1C_DS_MPS__20180721T104253_S20180721T085229_N02.06"

        datatake = complete_datatake_table.find_element_by_xpath("tbody/tr[5]/td[16]")

        assert datatake.text == "GS2A_20180721T083601_016077_N02.06"

        start_msi = complete_datatake_table.find_element_by_xpath("tbody/tr[5]/td[17]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = complete_datatake_table.find_element_by_xpath("tbody/tr[5]/td[18]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

        # Row 6
        level = complete_datatake_table.find_element_by_xpath("tbody/tr[6]/td[1]")

        assert level.text == "L1C"

        satellite = complete_datatake_table.find_element_by_xpath("tbody/tr[6]/td[2]")

        assert satellite.text == "S2A"

        orbit = complete_datatake_table.find_element_by_xpath("tbody/tr[6]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = complete_datatake_table.find_element_by_xpath("tbody/tr[6]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:36:08.255634"

        stop_datastrip = complete_datatake_table.find_element_by_xpath("tbody/tr[6]/td[5]")

        assert stop_datastrip.text == "2018-07-21T08:52:31"

        datastrip = complete_datatake_table.find_element_by_xpath("tbody/tr[6]/td[6]")

        assert datastrip.text == "N/A"

        status = complete_datatake_table.find_element_by_xpath("tbody/tr[6]/td[7]")

        assert status.text == "MISSING ACQUISITION"

        tiles = complete_datatake_table.find_element_by_xpath("tbody/tr[6]/td[8]")

        assert tiles.text == "N/A"

        tiles_dam = complete_datatake_table.find_element_by_xpath("tbody/tr[6]/td[9]")

        assert tiles_dam.text == "N/A"

        tiles_dhus = complete_datatake_table.find_element_by_xpath("tbody/tr[6]/td[10]")

        assert tiles_dhus.text == "N/A"

        tiles_published_dhus = complete_datatake_table.find_element_by_xpath("tbody/tr[6]/td[11]")

        assert tiles_published_dhus.text == "N/A"

        mean_time_dhus = complete_datatake_table.find_element_by_xpath("tbody/tr[6]/td[12]")

        assert mean_time_dhus.text == "N/A"

        mean_time_dhus_publication = complete_datatake_table.find_element_by_xpath("tbody/tr[6]/td[13]")

        assert mean_time_dhus_publication.text == "N/A"

        datatake = complete_datatake_table.find_element_by_xpath("tbody/tr[6]/td[14]")

        assert datatake.text == "N/A"

        datatake = complete_datatake_table.find_element_by_xpath("tbody/tr[6]/td[15]")

        assert datatake.text == "N/A"

        datatake = complete_datatake_table.find_element_by_xpath("tbody/tr[6]/td[16]")

        assert datatake.text == "N/A"

        start_msi = complete_datatake_table.find_element_by_xpath("tbody/tr[6]/td[17]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = complete_datatake_table.find_element_by_xpath("tbody/tr[6]/td[18]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

        # Row 7
        level = complete_datatake_table.find_element_by_xpath("tbody/tr[7]/td[1]")

        assert level.text == "L2A"

        satellite = complete_datatake_table.find_element_by_xpath("tbody/tr[7]/td[2]")

        assert satellite.text == "S2A"

        orbit = complete_datatake_table.find_element_by_xpath("tbody/tr[7]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = complete_datatake_table.find_element_by_xpath("tbody/tr[7]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:36:08.255634"

        stop_datastrip = complete_datatake_table.find_element_by_xpath("tbody/tr[7]/td[5]")

        assert stop_datastrip.text == "2018-07-21T09:08:50.195941"

        datastrip = complete_datatake_table.find_element_by_xpath("tbody/tr[7]/td[6]")

        assert datastrip.text == "N/A"

        status = complete_datatake_table.find_element_by_xpath("tbody/tr[7]/td[7]")

        assert status.text == "MISSING ACQUISITION"

        tiles = complete_datatake_table.find_element_by_xpath("tbody/tr[7]/td[8]")

        assert tiles.text == "N/A"

        tiles_dam = complete_datatake_table.find_element_by_xpath("tbody/tr[7]/td[9]")

        assert tiles_dam.text == "N/A"

        tiles_dhus = complete_datatake_table.find_element_by_xpath("tbody/tr[7]/td[10]")

        assert tiles_dhus.text == "N/A"

        tiles_published_dhus = complete_datatake_table.find_element_by_xpath("tbody/tr[7]/td[11]")

        assert tiles_published_dhus.text == "N/A"

        mean_time_dhus = complete_datatake_table.find_element_by_xpath("tbody/tr[7]/td[12]")

        assert mean_time_dhus.text == "N/A"

        mean_time_dhus_publication = complete_datatake_table.find_element_by_xpath("tbody/tr[7]/td[13]")

        assert mean_time_dhus_publication.text == "N/A"

        datatake = complete_datatake_table.find_element_by_xpath("tbody/tr[7]/td[14]")

        assert datatake.text == "N/A"

        datatake = complete_datatake_table.find_element_by_xpath("tbody/tr[7]/td[15]")

        assert datatake.text == "N/A"

        datatake = complete_datatake_table.find_element_by_xpath("tbody/tr[7]/td[16]")

        assert datatake.text == "N/A"

        start_msi = complete_datatake_table.find_element_by_xpath("tbody/tr[7]/td[17]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = complete_datatake_table.find_element_by_xpath("tbody/tr[7]/td[18]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

    def test_dhus_completeness_only_nppf_and_orbpre(self):

        filename = "S2A_NPPF.EOF"
        file_path = os.path.dirname(os.path.abspath(__file__)) + "/inputs/" + filename

        exit_status = ingestion.command_process_file("s2boa.ingestions.ingestion_nppf.ingestion_nppf", file_path, "2018-01-01T00:00:00")

        assert len([item for item in exit_status if item["status"] != eboa_engine.exit_codes["OK"]["status"]]) == 0

        filename = "S2A_ORBPRE.EOF"
        file_path = os.path.dirname(os.path.abspath(__file__)) + "/inputs/" + filename

        exit_status = ingestion.command_process_file("s2boa.ingestions.ingestion_orbpre.ingestion_orbpre", file_path, "2018-01-01T00:00:00")

        assert len([item for item in exit_status if item["status"] != eboa_engine.exit_codes["OK"]["status"]]) == 0

        wait = WebDriverWait(self.driver,5)

        self.driver.get("http://localhost:5000/views/dhus-completeness")

        functions.query(self.driver, wait, "S2A", start = "2018-07-01T00:00:00", stop = "2018-07-31T23:59:59", start_orbit = "17600", stop_orbit = "17800", table_details = True, map = True, station_reports = True)

        # Check summary expected msi
        summary_expected_msi = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-expected-msi")))

        assert summary_expected_msi

        assert summary_expected_msi.text == "33.033"

        # Check summary acquired msi
        summary_acquired_msi = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-acquired-msi")))

        assert summary_acquired_msi

        assert summary_acquired_msi.text == "0.0"

        # Check summary processed to l1c msi
        summary_processed_l1c_msi = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-processed-to-l1c-msi")))

        assert summary_processed_l1c_msi

        assert summary_processed_l1c_msi.text == "0.0"

        # Check summary processed to l2a msi
        summary_processed_l2a_msi = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-processed-to-l2a-msi")))

        assert summary_processed_l2a_msi

        assert summary_processed_l2a_msi.text == "0.0"

        # Check summary generated to l1c tiles
        summary_generated_l1c_tiles = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-generated-l1c-tiles")))

        assert summary_generated_l1c_tiles

        assert summary_generated_l1c_tiles.text == "0"

        # Check summary generated to l2a tiles
        summary_generated_l2a_tiles = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-generated-l2a-tiles")))

        assert summary_generated_l2a_tiles

        assert summary_generated_l2a_tiles.text == "0"

        # Check summary missing acquistion
        summary_missing_acquistion = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-missing-acquistion")))

        assert summary_missing_acquistion

        assert summary_missing_acquistion.text == "32.699"

        # Check summary missing processing l1c
        summary_missing_processing_l1c = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-missing-processing-l1c")))

        assert summary_missing_processing_l1c

        assert summary_missing_processing_l1c.text == "32.699"

        # Check summary missing processing l2a
        summary_missing_processing_l2a = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-missing-processing-l2a")))

        assert summary_missing_processing_l2a

        assert summary_missing_processing_l2a.text == "32.699"

        # Check number of elements in summary
        assert len(summary_expected_msi.find_elements_by_xpath("../../../div")) == 9

        # Check whether the map is displayed
        map_section = self.driver.find_element_by_id("dhus-completeness-on-map-section")

        condition = map_section.is_displayed()

        assert condition is True

        l1c_map_section = self.driver.find_element_by_id("dhus-completeness-l1c-on-map-section")

        condition = l1c_map_section.is_displayed()

        assert condition is True

        l2a_map_section = self.driver.find_element_by_id("dhus-completeness-l2a-on-map-section")

        condition = l2a_map_section.is_displayed()

        assert condition is True

        # Check map missing segments tooltip
        planned_imaging_processing_completeness_l1c_1 = self.query_eboa.get_events(gauge_names ={"filter": "PLANNED_IMAGING_PROCESSING_COMPLETENESS_L1C", "op":"=="},
                                                                                start_filters =[{"date": "2018-07-21T08:36:08.255634", "op":"=="}],
                                                                                stop_filters = [{"date": "2018-07-21T09:08:50.195941", "op": "=="}])
        planned_imaging_correction = self.query_eboa.get_events(gauge_names ={"filter": "PLANNED_CUT_IMAGING_CORRECTION", "op":"=="})
        planned_cut_imaging = self.query_eboa.get_events(gauge_names ={"filter": "PLANNED_CUT_IMAGING", "op":"=="})

        map_l1c_missing_tooltip_info = [
            {
                "id": str(planned_imaging_processing_completeness_l1c_1[0].event_uuid),
                "tooltip": "<table border='1'>" + 
                "<tr><td>UUID</td><td>" + str(planned_imaging_processing_completeness_l1c_1[0].event_uuid) + "</td></tr>" + 
                "<tr><td>Satellite</td><td>S2A</td></tr><tr>" + 
                "<td>Orbit</td><td>16077</td></tr>" + 
                "<tr><td>Datastrip</td><td>N/A</td></tr>" + 
                "<tr><td>Status</td><td><a class='bold-red' href='/views/dhus-completeness-by-datatake/" + str(planned_imaging_correction[0].event_uuid) + "'>MISSING ACQUISITION</a></td></tr>" + 
                "<tr><td>Start</td><td>2018-07-21T08:36:08.255634</td></tr>" + 
                "<tr><td>Stop</td><td>2018-07-21T09:08:50.195941</td></tr>" + 
                "<tr><td>Duration(m)</td><td>32.699</td></tr>" + 
                "<tr><td>Plan file</td><td>S2A_NPPF.EOF</td></tr>" + 
                '<tr><td>Planned imaging</td><td><a href="/eboa_nav/query-event-links/' + str(planned_cut_imaging[0].event_uuid) + '"><i class="fa fa-link"></i></a></td></tr>' + 
                "</table>",
                "geometries": [
                        {'value': 'POLYGON ((101.528355 79.738353, 98.393294 79.554394, 95.372456 79.34158499999999, 92.47433599999999 79.101615, 89.704358 78.83623299999999, 87.065195 78.547203, 84.557168 78.236266, 82.178646 77.905114, 79.92652200000001 77.555353, 77.796533 77.188502, 75.78361 76.80598500000001, 73.882164 76.409121, 72.086314 75.999127, 70.390066 75.577118, 68.787451 75.144115, 67.27263000000001 74.701048, 65.839963 74.248763, 64.484058 73.788026, 63.199803 73.319535, 61.98238 72.84392099999999, 60.82727 72.361756, 59.730252 71.87356, 58.687393 71.379802, 57.69504 70.880909, 56.749802 70.377269, 55.848538 69.86923400000001, 54.988339 69.357125, 54.166514 68.841234, 53.380572 68.321826, 52.628211 67.799145, 51.907284 67.273414, 51.215837 66.74483499999999, 50.552046 66.21359200000001, 49.914221 65.679856, 49.300795 65.14378499999999, 48.710317 64.605521, 48.141439 64.06519900000001, 47.592911 63.522938, 47.063571 62.978854, 46.552336 62.433049, 46.058203 61.88562, 45.580233 61.336656, 45.117553 60.786241, 44.669348 60.23445, 44.234857 59.681356, 43.813369 59.127025, 43.404219 58.571519, 43.006785 58.014895, 42.620482 57.457208, 42.244763 56.898507, 41.879116 56.33884, 41.523059 55.778251, 41.176136 55.216781, 40.837913 54.65447, 40.507999 54.091353, 40.186016 53.527465, 39.871607 52.962837, 39.564437 52.3975, 39.264186 51.831483, 38.970556 51.264812, 38.683263 50.697513, 38.402038 50.12961, 38.126626 49.561125, 37.856788 48.992081, 37.592294 48.422497, 37.332928 47.852393, 37.078485 47.281788, 36.828768 46.710698, 36.583593 46.139141, 36.342781 45.567132, 36.106166 44.994686, 35.873587 44.421818, 35.644892 43.848541, 35.419934 43.274869, 35.198576 42.700813, 34.980684 42.126386, 34.766127 41.5516, 34.554789 40.976465, 34.346555 40.400992, 34.141315 39.825191, 33.938963 39.249071, 33.739397 38.672642, 33.542521 38.095913, 33.348241 37.518892, 33.156469 36.941588, 32.967118 36.364009, 32.780106 35.786163, 32.595355 35.208056, 32.412788 34.629697, 32.232333 34.051093, 32.053919 33.472249, 31.877479 32.893174, 31.702948 32.313873, 31.530263 31.734352, 31.359365 31.154617, 31.190194 30.574676, 31.022695 29.994532, 30.856813 29.414192, 30.692496 28.833661, 30.52969 28.252945, 30.368351 27.672049, 30.208431 27.090977, 30.049883 26.509735, 29.892665 25.928328, 29.736733 25.34676, 29.582046 24.765036, 29.428563 24.183161, 29.276246 23.601139, 29.125056 23.018975, 28.974958 22.436672, 28.825915 21.854236, 28.677892 21.27167, 28.530857 20.688979, 28.384776 20.106167, 28.239618 19.523237, 28.095351 18.940194, 27.951945 18.357042, 27.809371 17.773784, 27.667601 17.190425, 27.526605 16.606967, 27.386357 16.023415, 27.24683 15.439774, 27.107997 14.856045, 26.969834 14.272233, 26.832316 13.688341, 26.695417 13.104374, 26.559115 12.520334, 26.423385 11.936225, 26.288205 11.352051, 26.153552 10.767815, 26.019404 10.18352, 25.885738 9.599170000000001, 25.752535 9.014768, 25.619771 8.430318, 25.487428 7.845822, 25.355483 7.261285, 25.223917 6.676709, 25.092711 6.092098, 24.961844 5.507454, 24.831296 4.922782, 24.701049 4.338085, 24.571084 3.753365, 24.441382 3.168625, 24.311923 2.58387, 24.182691 1.999102, 24.053667 1.414324, 23.924832 0.8295400000000001, 23.796168 0.244752, 23.667656 -0.340037, 23.53928 -0.924823, 23.411021 -1.509603, 23.282861 -2.094374, 23.154782 -2.679134, 23.026766 -3.263878, 22.898797 -3.848605, 22.770855 -4.433311, 22.642923 -5.017993, 22.514983 -5.602648, 22.387017 -6.187273, 22.259008 -6.771866, 22.130936 -7.356423, 22.002785 -7.940941, 21.874535 -8.525416999999999, 21.746168 -9.109848, 21.617666 -9.694233000000001, 21.489009 -10.278566, 21.36018 -10.862846, 21.231159 -11.44707, 21.10193 -12.031235, 20.972471 -12.615337, 20.84276 -13.199375, 20.712779 -13.783345, 20.582507 -14.367243, 20.451923 -14.951069, 20.321007 -15.534817, 20.189737 -16.118486, 20.058092 -16.702073, 19.926048 -17.285575, 19.793585 -17.868989, 19.660679 -18.452311, 19.527306 -19.03554, 19.393443 -19.618672, 19.259065 -20.201704, 19.124148 -20.784634, 18.988665 -21.367458, 18.852591 -21.950174, 18.7159 -22.532779, 18.578563 -23.115269, 18.440552 -23.697642, 18.301839 -24.279894, 18.162396 -24.862023, 18.022195 -25.444026, 17.8812 -26.0259, 17.73938 -26.607641, 17.596701 -27.189247, 17.453128 -27.770714, 17.308628 -28.352039, 17.163163 -28.933219, 17.016695 -29.514251, 16.869187 -30.095131, 13.933539 -29.491417, 14.098138 -28.912293, 14.261223 -28.33296, 14.422844 -27.753423, 14.583047 -27.173686, 14.741878 -26.593755, 14.89938 -26.013634, 15.055598 -25.433327, 15.210571 -24.852841, 15.36434 -24.272178, 15.516947 -23.691343, 15.668426 -23.11034, 15.818815 -22.529175, 15.968148 -21.94785, 16.116461 -21.36637, 16.263787 -20.784739, 16.410159 -20.202961, 16.555607 -19.62104, 16.700165 -19.038979, 16.843861 -18.456783, 16.986725 -17.874455, 17.128786 -17.292, 17.270072 -16.70942, 17.41061 -16.126719, 17.550427 -15.543901, 17.689548 -14.96097, 17.828001 -14.377929, 17.965808 -13.794781, 18.102996 -13.211531, 18.239588 -12.628181, 18.375607 -12.044735, 18.511076 -11.461196, 18.646018 -10.877568, 18.780456 -10.293853, 18.914411 -9.710056, 19.047904 -9.12618, 19.180957 -8.542228, 19.31359 -7.958203, 19.445824 -7.374108, 19.577679 -6.789947, 19.709176 -6.205723, 19.840332 -5.62144, 19.971169 -5.037099, 20.101706 -4.452706, 20.231961 -3.868262, 20.361954 -3.28377, 20.491703 -2.699235, 20.621226 -2.114659, 20.750543 -1.530045, 20.879671 -0.945397, 21.008628 -0.360717, 21.137434 0.223991, 21.266105 0.808725, 21.39466 1.393481, 21.523116 1.978257, 21.651492 2.563048, 21.779804 3.147853, 21.908071 3.732668, 22.03631 4.31749, 22.164541 4.902317, 22.29278 5.487144, 22.421046 6.071969, 22.549357 6.656789, 22.677731 7.241602, 22.806186 7.826403, 22.934741 8.41119, 23.063414 8.995960999999999, 23.192224 9.580711000000001, 23.321189 10.165439, 23.45033 10.750141, 23.579663 11.334813, 23.70921 11.919454, 23.83899 12.504061, 23.969023 13.088629, 24.099328 13.673157, 24.229927 14.257641, 24.36084 14.842078, 24.492088 15.426466, 24.623693 16.010801, 24.755672 16.59508, 24.888051 17.179302, 25.020852 17.763461, 25.1541 18.347556, 25.287817 18.931583, 25.422028 19.51554, 25.556756 20.099424, 25.692028 20.68323, 25.827869 21.266957, 25.964305 21.850601, 26.101363 22.43416, 26.23907 23.017629, 26.377456 23.601007, 26.516548 24.184289, 26.656377 24.767473, 26.796974 25.350556, 26.93837 25.933533, 27.080597 26.516404, 27.223689 27.099162, 27.367681 27.681807, 27.512607 28.264333, 27.658505 28.846738, 27.805411 29.429019, 27.95336 30.011172, 28.102397 30.593193, 28.252563 31.175079, 28.403902 31.756827, 28.556459 32.338431, 28.71028 32.91989, 28.865413 33.501198, 29.021907 34.082352, 29.179815 34.663347, 29.339189 35.244181, 29.500086 35.824848, 29.662563 36.405344, 29.82668 36.985665, 29.9925 37.565806, 30.160087 38.145763, 30.32951 38.72553, 30.500839 39.305103, 30.674149 39.884477, 30.849515 40.463646, 31.027018 41.042604, 31.206743 41.621347, 31.388777 42.199868, 31.573211 42.77816, 31.760133 43.356219, 31.94965 43.934037, 32.14187 44.511607, 32.336903 45.088922, 32.534866 45.665975, 32.73588 46.242756, 32.940074 46.819259, 33.147583 47.395475, 33.358548 47.971394, 33.573118 48.547006, 33.791452 49.122303, 34.013715 49.697273, 34.240083 50.271906, 34.470741 50.846188, 34.705884 51.420109, 34.94572 51.993655, 35.190468 52.566812, 35.440361 53.139565, 35.695644 53.711899, 35.95658 54.283798, 36.223446 54.855243, 36.496539 55.426215, 36.776173 55.996696, 37.062667 56.566664, 37.356393 57.136096, 37.657733 57.704968, 37.967096 58.273253, 38.284919 58.840923, 38.611667 59.407948, 38.947843 59.974297, 39.293984 60.539933, 39.650668 61.10482, 40.018516 61.668918, 40.398198 62.232182, 40.790436 62.794566, 41.196009 63.356018, 41.61576 63.916483, 42.050602 64.47590099999999, 42.501524 65.034205, 42.969599 65.591324, 43.455996 66.14718000000001, 43.961985 66.701688, 44.488952 67.25475299999999, 45.03841 67.806273, 45.612014 68.35613499999999, 46.211575 68.904214, 46.839057 69.45037499999999, 47.496664 69.99446399999999, 48.186803 70.536312, 48.91212 71.075732, 49.675538 71.612514, 50.480285 72.14642600000001, 51.329936 72.677209, 52.228449 73.20457, 53.180217 73.728182, 54.190117 74.247676, 55.263568 74.762637, 56.406592 75.272594, 57.625885 75.77701399999999, 58.928884 76.27529199999999, 60.323843 76.766739, 61.819901 77.25057, 63.427147 77.725889, 65.15666299999999 78.19167400000001, 67.02054699999999 78.646756, 69.03187800000001 79.0898, 71.204616 79.519285, 73.553397 79.93347900000001, 76.093174 80.330421, 78.83862000000001 80.707914, 81.803448 81.06348699999999, 84.999177 81.394426, 88.433741 81.69779, 92.109756 81.970454, 96.02262 82.209198, 101.528355 79.738353))', 'name': 'footprint'}
                ],
                "style": {
                    "stroke_color": "red",
                    "fill_color": "rgba(255,0,0,0.3)",
                }
            },
        ]

        returned_map_l1c_missing_tooltip_info = self.driver.execute_script('return missing_segments_l1c;')
        assert map_l1c_missing_tooltip_info == returned_map_l1c_missing_tooltip_info
        
        planned_imaging_processing_completeness_l2a = self.query_eboa.get_events(gauge_names ={"filter": "PLANNED_IMAGING_PROCESSING_COMPLETENESS_L2A", "op":"=="})
        
        map_l2a_missing_tooltip_info = [
            {
                "id": str(planned_imaging_processing_completeness_l2a[0].event_uuid),
                "tooltip": "<table border='1'>" + 
                "<tr><td>UUID</td><td>" + str(planned_imaging_processing_completeness_l2a[0].event_uuid) + "</td></tr>" + 
                "<tr><td>Satellite</td><td>S2A</td></tr><tr>" + 
                "<td>Orbit</td><td>16077</td></tr>" + 
                "<tr><td>Datastrip</td><td>N/A</td></tr>" + 
                "<tr><td>Status</td><td><a class='bold-red' href='/views/dhus-completeness-by-datatake/" + str(planned_imaging_correction[0].event_uuid) + "'>MISSING ACQUISITION</a></td></tr>" + 
                "<tr><td>Start</td><td>2018-07-21T08:36:08.255634</td></tr>" + 
                "<tr><td>Stop</td><td>2018-07-21T09:08:50.195941</td></tr>" + 
                "<tr><td>Duration(m)</td><td>32.699</td></tr>" + 
                "<tr><td>Plan file</td><td>S2A_NPPF.EOF</td></tr>" + 
                '<tr><td>Planned imaging</td><td><a href="/eboa_nav/query-event-links/' + str(planned_cut_imaging[0].event_uuid) + '"><i class="fa fa-link"></i></a></td></tr>' + 
                "</table>",
                "geometries": [
                        {'value': 'POLYGON ((101.528355 79.738353, 98.393294 79.554394, 95.372456 79.34158499999999, 92.47433599999999 79.101615, 89.704358 78.83623299999999, 87.065195 78.547203, 84.557168 78.236266, 82.178646 77.905114, 79.92652200000001 77.555353, 77.796533 77.188502, 75.78361 76.80598500000001, 73.882164 76.409121, 72.086314 75.999127, 70.390066 75.577118, 68.787451 75.144115, 67.27263000000001 74.701048, 65.839963 74.248763, 64.484058 73.788026, 63.199803 73.319535, 61.98238 72.84392099999999, 60.82727 72.361756, 59.730252 71.87356, 58.687393 71.379802, 57.69504 70.880909, 56.749802 70.377269, 55.848538 69.86923400000001, 54.988339 69.357125, 54.166514 68.841234, 53.380572 68.321826, 52.628211 67.799145, 51.907284 67.273414, 51.215837 66.74483499999999, 50.552046 66.21359200000001, 49.914221 65.679856, 49.300795 65.14378499999999, 48.710317 64.605521, 48.141439 64.06519900000001, 47.592911 63.522938, 47.063571 62.978854, 46.552336 62.433049, 46.058203 61.88562, 45.580233 61.336656, 45.117553 60.786241, 44.669348 60.23445, 44.234857 59.681356, 43.813369 59.127025, 43.404219 58.571519, 43.006785 58.014895, 42.620482 57.457208, 42.244763 56.898507, 41.879116 56.33884, 41.523059 55.778251, 41.176136 55.216781, 40.837913 54.65447, 40.507999 54.091353, 40.186016 53.527465, 39.871607 52.962837, 39.564437 52.3975, 39.264186 51.831483, 38.970556 51.264812, 38.683263 50.697513, 38.402038 50.12961, 38.126626 49.561125, 37.856788 48.992081, 37.592294 48.422497, 37.332928 47.852393, 37.078485 47.281788, 36.828768 46.710698, 36.583593 46.139141, 36.342781 45.567132, 36.106166 44.994686, 35.873587 44.421818, 35.644892 43.848541, 35.419934 43.274869, 35.198576 42.700813, 34.980684 42.126386, 34.766127 41.5516, 34.554789 40.976465, 34.346555 40.400992, 34.141315 39.825191, 33.938963 39.249071, 33.739397 38.672642, 33.542521 38.095913, 33.348241 37.518892, 33.156469 36.941588, 32.967118 36.364009, 32.780106 35.786163, 32.595355 35.208056, 32.412788 34.629697, 32.232333 34.051093, 32.053919 33.472249, 31.877479 32.893174, 31.702948 32.313873, 31.530263 31.734352, 31.359365 31.154617, 31.190194 30.574676, 31.022695 29.994532, 30.856813 29.414192, 30.692496 28.833661, 30.52969 28.252945, 30.368351 27.672049, 30.208431 27.090977, 30.049883 26.509735, 29.892665 25.928328, 29.736733 25.34676, 29.582046 24.765036, 29.428563 24.183161, 29.276246 23.601139, 29.125056 23.018975, 28.974958 22.436672, 28.825915 21.854236, 28.677892 21.27167, 28.530857 20.688979, 28.384776 20.106167, 28.239618 19.523237, 28.095351 18.940194, 27.951945 18.357042, 27.809371 17.773784, 27.667601 17.190425, 27.526605 16.606967, 27.386357 16.023415, 27.24683 15.439774, 27.107997 14.856045, 26.969834 14.272233, 26.832316 13.688341, 26.695417 13.104374, 26.559115 12.520334, 26.423385 11.936225, 26.288205 11.352051, 26.153552 10.767815, 26.019404 10.18352, 25.885738 9.599170000000001, 25.752535 9.014768, 25.619771 8.430318, 25.487428 7.845822, 25.355483 7.261285, 25.223917 6.676709, 25.092711 6.092098, 24.961844 5.507454, 24.831296 4.922782, 24.701049 4.338085, 24.571084 3.753365, 24.441382 3.168625, 24.311923 2.58387, 24.182691 1.999102, 24.053667 1.414324, 23.924832 0.8295400000000001, 23.796168 0.244752, 23.667656 -0.340037, 23.53928 -0.924823, 23.411021 -1.509603, 23.282861 -2.094374, 23.154782 -2.679134, 23.026766 -3.263878, 22.898797 -3.848605, 22.770855 -4.433311, 22.642923 -5.017993, 22.514983 -5.602648, 22.387017 -6.187273, 22.259008 -6.771866, 22.130936 -7.356423, 22.002785 -7.940941, 21.874535 -8.525416999999999, 21.746168 -9.109848, 21.617666 -9.694233000000001, 21.489009 -10.278566, 21.36018 -10.862846, 21.231159 -11.44707, 21.10193 -12.031235, 20.972471 -12.615337, 20.84276 -13.199375, 20.712779 -13.783345, 20.582507 -14.367243, 20.451923 -14.951069, 20.321007 -15.534817, 20.189737 -16.118486, 20.058092 -16.702073, 19.926048 -17.285575, 19.793585 -17.868989, 19.660679 -18.452311, 19.527306 -19.03554, 19.393443 -19.618672, 19.259065 -20.201704, 19.124148 -20.784634, 18.988665 -21.367458, 18.852591 -21.950174, 18.7159 -22.532779, 18.578563 -23.115269, 18.440552 -23.697642, 18.301839 -24.279894, 18.162396 -24.862023, 18.022195 -25.444026, 17.8812 -26.0259, 17.73938 -26.607641, 17.596701 -27.189247, 17.453128 -27.770714, 17.308628 -28.352039, 17.163163 -28.933219, 17.016695 -29.514251, 16.869187 -30.095131, 13.933539 -29.491417, 14.098138 -28.912293, 14.261223 -28.33296, 14.422844 -27.753423, 14.583047 -27.173686, 14.741878 -26.593755, 14.89938 -26.013634, 15.055598 -25.433327, 15.210571 -24.852841, 15.36434 -24.272178, 15.516947 -23.691343, 15.668426 -23.11034, 15.818815 -22.529175, 15.968148 -21.94785, 16.116461 -21.36637, 16.263787 -20.784739, 16.410159 -20.202961, 16.555607 -19.62104, 16.700165 -19.038979, 16.843861 -18.456783, 16.986725 -17.874455, 17.128786 -17.292, 17.270072 -16.70942, 17.41061 -16.126719, 17.550427 -15.543901, 17.689548 -14.96097, 17.828001 -14.377929, 17.965808 -13.794781, 18.102996 -13.211531, 18.239588 -12.628181, 18.375607 -12.044735, 18.511076 -11.461196, 18.646018 -10.877568, 18.780456 -10.293853, 18.914411 -9.710056, 19.047904 -9.12618, 19.180957 -8.542228, 19.31359 -7.958203, 19.445824 -7.374108, 19.577679 -6.789947, 19.709176 -6.205723, 19.840332 -5.62144, 19.971169 -5.037099, 20.101706 -4.452706, 20.231961 -3.868262, 20.361954 -3.28377, 20.491703 -2.699235, 20.621226 -2.114659, 20.750543 -1.530045, 20.879671 -0.945397, 21.008628 -0.360717, 21.137434 0.223991, 21.266105 0.808725, 21.39466 1.393481, 21.523116 1.978257, 21.651492 2.563048, 21.779804 3.147853, 21.908071 3.732668, 22.03631 4.31749, 22.164541 4.902317, 22.29278 5.487144, 22.421046 6.071969, 22.549357 6.656789, 22.677731 7.241602, 22.806186 7.826403, 22.934741 8.41119, 23.063414 8.995960999999999, 23.192224 9.580711000000001, 23.321189 10.165439, 23.45033 10.750141, 23.579663 11.334813, 23.70921 11.919454, 23.83899 12.504061, 23.969023 13.088629, 24.099328 13.673157, 24.229927 14.257641, 24.36084 14.842078, 24.492088 15.426466, 24.623693 16.010801, 24.755672 16.59508, 24.888051 17.179302, 25.020852 17.763461, 25.1541 18.347556, 25.287817 18.931583, 25.422028 19.51554, 25.556756 20.099424, 25.692028 20.68323, 25.827869 21.266957, 25.964305 21.850601, 26.101363 22.43416, 26.23907 23.017629, 26.377456 23.601007, 26.516548 24.184289, 26.656377 24.767473, 26.796974 25.350556, 26.93837 25.933533, 27.080597 26.516404, 27.223689 27.099162, 27.367681 27.681807, 27.512607 28.264333, 27.658505 28.846738, 27.805411 29.429019, 27.95336 30.011172, 28.102397 30.593193, 28.252563 31.175079, 28.403902 31.756827, 28.556459 32.338431, 28.71028 32.91989, 28.865413 33.501198, 29.021907 34.082352, 29.179815 34.663347, 29.339189 35.244181, 29.500086 35.824848, 29.662563 36.405344, 29.82668 36.985665, 29.9925 37.565806, 30.160087 38.145763, 30.32951 38.72553, 30.500839 39.305103, 30.674149 39.884477, 30.849515 40.463646, 31.027018 41.042604, 31.206743 41.621347, 31.388777 42.199868, 31.573211 42.77816, 31.760133 43.356219, 31.94965 43.934037, 32.14187 44.511607, 32.336903 45.088922, 32.534866 45.665975, 32.73588 46.242756, 32.940074 46.819259, 33.147583 47.395475, 33.358548 47.971394, 33.573118 48.547006, 33.791452 49.122303, 34.013715 49.697273, 34.240083 50.271906, 34.470741 50.846188, 34.705884 51.420109, 34.94572 51.993655, 35.190468 52.566812, 35.440361 53.139565, 35.695644 53.711899, 35.95658 54.283798, 36.223446 54.855243, 36.496539 55.426215, 36.776173 55.996696, 37.062667 56.566664, 37.356393 57.136096, 37.657733 57.704968, 37.967096 58.273253, 38.284919 58.840923, 38.611667 59.407948, 38.947843 59.974297, 39.293984 60.539933, 39.650668 61.10482, 40.018516 61.668918, 40.398198 62.232182, 40.790436 62.794566, 41.196009 63.356018, 41.61576 63.916483, 42.050602 64.47590099999999, 42.501524 65.034205, 42.969599 65.591324, 43.455996 66.14718000000001, 43.961985 66.701688, 44.488952 67.25475299999999, 45.03841 67.806273, 45.612014 68.35613499999999, 46.211575 68.904214, 46.839057 69.45037499999999, 47.496664 69.99446399999999, 48.186803 70.536312, 48.91212 71.075732, 49.675538 71.612514, 50.480285 72.14642600000001, 51.329936 72.677209, 52.228449 73.20457, 53.180217 73.728182, 54.190117 74.247676, 55.263568 74.762637, 56.406592 75.272594, 57.625885 75.77701399999999, 58.928884 76.27529199999999, 60.323843 76.766739, 61.819901 77.25057, 63.427147 77.725889, 65.15666299999999 78.19167400000001, 67.02054699999999 78.646756, 69.03187800000001 79.0898, 71.204616 79.519285, 73.553397 79.93347900000001, 76.093174 80.330421, 78.83862000000001 80.707914, 81.803448 81.06348699999999, 84.999177 81.394426, 88.433741 81.69779, 92.109756 81.970454, 96.02262 82.209198, 101.528355 79.738353))', 'name': 'footprint'},
                ],
                "style": {
                    "stroke_color": "red",
                    "fill_color": "rgba(255,0,0,0.3)",
                }
            },
        ]

        returned_map_l2a_missing_tooltip_info = self.driver.execute_script('return missing_segments_l2a;')
        assert map_l2a_missing_tooltip_info == returned_map_l2a_missing_tooltip_info

        # Check whether the timeliness is displayed
        timeline_section = self.driver.find_element_by_id("dhus-completeness-e2e-timeline-section")

        condition = timeline_section.is_displayed()

        assert condition is True

        l1c_timeline_section = self.driver.find_element_by_id("dhus-completeness-l1c-e2e-timeline-section")

        condition = l1c_timeline_section.is_displayed()

        assert condition is True

        l2a_timeline_section = self.driver.find_element_by_id("dhus-completeness-l2a-e2e-timeline-section")

        condition = l2a_timeline_section.is_displayed()

        assert condition is True

        # Check timeliness tooltip
        timeliness_l1c_tooltip_info = []

        returned_timeliness_l1c_tooltip_info = self.driver.execute_script('return e2e_timeliness_tiles_published_in_dhus_l1c;')
        assert timeliness_l1c_tooltip_info == returned_timeliness_l1c_tooltip_info
        
        timeliness_l2a_tooltip_info = []

        returned_timeliness_l2a_tooltip_info = self.driver.execute_script('return e2e_timeliness_tiles_published_in_dhus_l2a;')
        assert timeliness_l2a_tooltip_info == returned_timeliness_l2a_tooltip_info

        # Missing dissemination table
        missing_table = self.driver.find_element_by_id("dhus-completeness-list-table-MISSING")

        # Row 1
        level = missing_table.find_element_by_xpath("tbody/tr[1]/td[1]")

        assert level.text == "L1C"

        satellite = missing_table.find_element_by_xpath("tbody/tr[1]/td[2]")

        assert satellite.text == "S2A"

        orbit = missing_table.find_element_by_xpath("tbody/tr[1]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = missing_table.find_element_by_xpath("tbody/tr[1]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:36:08.255634"

        stop_datastrip = missing_table.find_element_by_xpath("tbody/tr[1]/td[5]")

        assert stop_datastrip.text == "2018-07-21T09:08:50.195941"

        datastrip = missing_table.find_element_by_xpath("tbody/tr[1]/td[6]")

        assert datastrip.text == "N/A"

        status = missing_table.find_element_by_xpath("tbody/tr[1]/td[7]")

        assert status.text == "MISSING ACQUISITION"

        tiles = missing_table.find_element_by_xpath("tbody/tr[1]/td[8]")

        assert tiles.text == "N/A"

        tiles_dam = missing_table.find_element_by_xpath("tbody/tr[1]/td[9]")

        assert tiles_dam.text == "N/A"

        tiles_dhus = missing_table.find_element_by_xpath("tbody/tr[1]/td[10]")

        assert tiles_dhus.text == "N/A"

        tiles_published_dhus = missing_table.find_element_by_xpath("tbody/tr[1]/td[11]")

        assert tiles_published_dhus.text == "N/A"

        mean_time_dhus = missing_table.find_element_by_xpath("tbody/tr[1]/td[12]")

        assert mean_time_dhus.text == "N/A"

        mean_time_dhus_publication = missing_table.find_element_by_xpath("tbody/tr[1]/td[13]")

        assert mean_time_dhus_publication.text == "N/A"

        datatake = missing_table.find_element_by_xpath("tbody/tr[1]/td[14]")

        assert datatake.text == "N/A"

        start_msi = missing_table.find_element_by_xpath("tbody/tr[1]/td[15]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = missing_table.find_element_by_xpath("tbody/tr[1]/td[16]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

        # Row 2
        level = missing_table.find_element_by_xpath("tbody/tr[2]/td[1]")

        assert level.text == "L2A"

        satellite = missing_table.find_element_by_xpath("tbody/tr[2]/td[2]")

        assert satellite.text == "S2A"

        orbit = missing_table.find_element_by_xpath("tbody/tr[2]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = missing_table.find_element_by_xpath("tbody/tr[2]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:36:08.255634"

        stop_datastrip = missing_table.find_element_by_xpath("tbody/tr[2]/td[5]")

        assert stop_datastrip.text == "2018-07-21T09:08:50.195941"

        datastrip = missing_table.find_element_by_xpath("tbody/tr[2]/td[6]")

        assert datastrip.text == "N/A"

        status = missing_table.find_element_by_xpath("tbody/tr[2]/td[7]")

        assert status.text == "MISSING ACQUISITION"

        tiles = missing_table.find_element_by_xpath("tbody/tr[2]/td[8]")

        assert tiles.text == "N/A"

        tiles_dam = missing_table.find_element_by_xpath("tbody/tr[2]/td[9]")

        assert tiles_dam.text == "N/A"

        tiles_dhus = missing_table.find_element_by_xpath("tbody/tr[2]/td[10]")

        assert tiles_dhus.text == "N/A"

        tiles_published_dhus = missing_table.find_element_by_xpath("tbody/tr[2]/td[11]")

        assert tiles_published_dhus.text == "N/A"

        mean_time_dhus = missing_table.find_element_by_xpath("tbody/tr[2]/td[12]")

        assert mean_time_dhus.text == "N/A"

        mean_time_dhus_publication = missing_table.find_element_by_xpath("tbody/tr[2]/td[13]")

        assert mean_time_dhus_publication.text == "N/A"

        datatake = missing_table.find_element_by_xpath("tbody/tr[2]/td[14]")

        assert datatake.text == "N/A"

        start_msi = missing_table.find_element_by_xpath("tbody/tr[2]/td[15]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = missing_table.find_element_by_xpath("tbody/tr[2]/td[16]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

        # Data availability table
        complete_table = self.driver.find_element_by_id("dhus-completeness-list-table-COMPLETE")

        # Row 1
        level = complete_table.find_element_by_xpath("tbody/tr[1]/td[1]")

        assert level.text == "L1C"

        satellite = complete_table.find_element_by_xpath("tbody/tr[1]/td[2]")

        assert satellite.text == "S2A"

        orbit = complete_table.find_element_by_xpath("tbody/tr[1]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = complete_table.find_element_by_xpath("tbody/tr[1]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:36:08.255634"

        stop_datastrip = complete_table.find_element_by_xpath("tbody/tr[1]/td[5]")

        assert stop_datastrip.text == "2018-07-21T09:08:50.195941"

        datastrip = complete_table.find_element_by_xpath("tbody/tr[1]/td[6]")

        assert datastrip.text == "N/A"

        status = complete_table.find_element_by_xpath("tbody/tr[1]/td[7]")

        assert status.text == "MISSING ACQUISITION"

        tiles = complete_table.find_element_by_xpath("tbody/tr[1]/td[8]")

        assert tiles.text == "N/A"

        tiles_dam = complete_table.find_element_by_xpath("tbody/tr[1]/td[9]")

        assert tiles_dam.text == "N/A"

        tiles_dhus = complete_table.find_element_by_xpath("tbody/tr[1]/td[10]")

        assert tiles_dhus.text == "N/A"

        tiles_published_dhus = complete_table.find_element_by_xpath("tbody/tr[1]/td[11]")

        assert tiles_published_dhus.text == "N/A"

        mean_time_dhus = complete_table.find_element_by_xpath("tbody/tr[1]/td[12]")

        assert mean_time_dhus.text == "N/A"

        mean_time_dhus_publication = complete_table.find_element_by_xpath("tbody/tr[1]/td[13]")

        assert mean_time_dhus_publication.text == "N/A"

        datatake = complete_table.find_element_by_xpath("tbody/tr[1]/td[14]")

        assert datatake.text == "N/A"

        start_msi = complete_table.find_element_by_xpath("tbody/tr[1]/td[15]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = complete_table.find_element_by_xpath("tbody/tr[1]/td[16]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

        # Row 2
        level = complete_table.find_element_by_xpath("tbody/tr[2]/td[1]")

        assert level.text == "L2A"

        satellite = complete_table.find_element_by_xpath("tbody/tr[2]/td[2]")

        assert satellite.text == "S2A"

        orbit = complete_table.find_element_by_xpath("tbody/tr[2]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = complete_table.find_element_by_xpath("tbody/tr[2]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:36:08.255634"

        stop_datastrip = complete_table.find_element_by_xpath("tbody/tr[2]/td[5]")

        assert stop_datastrip.text == "2018-07-21T09:08:50.195941"

        datastrip = complete_table.find_element_by_xpath("tbody/tr[2]/td[6]")

        assert datastrip.text == "N/A"

        status = complete_table.find_element_by_xpath("tbody/tr[2]/td[7]")

        assert status.text == "MISSING ACQUISITION"

        tiles = complete_table.find_element_by_xpath("tbody/tr[2]/td[8]")

        assert tiles.text == "N/A"

        tiles_dam = complete_table.find_element_by_xpath("tbody/tr[2]/td[9]")

        assert tiles_dam.text == "N/A"

        tiles_dhus = complete_table.find_element_by_xpath("tbody/tr[2]/td[10]")

        assert tiles_dhus.text == "N/A"

        tiles_published_dhus = complete_table.find_element_by_xpath("tbody/tr[2]/td[11]")

        assert tiles_published_dhus.text == "N/A"

        mean_time_dhus = complete_table.find_element_by_xpath("tbody/tr[2]/td[12]")

        assert mean_time_dhus.text == "N/A"

        mean_time_dhus_publication = complete_table.find_element_by_xpath("tbody/tr[2]/td[13]")

        assert mean_time_dhus_publication.text == "N/A"

        datatake = complete_table.find_element_by_xpath("tbody/tr[2]/td[14]")

        assert datatake.text == "N/A"

        start_msi = complete_table.find_element_by_xpath("tbody/tr[2]/td[15]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = complete_table.find_element_by_xpath("tbody/tr[2]/td[16]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

    def test_dhus_completeness_only_nppf_and_orbpre_and_rep_pass(self):

        filename = "S2A_NPPF.EOF"
        file_path = os.path.dirname(os.path.abspath(__file__)) + "/inputs/" + filename

        exit_status = ingestion.command_process_file("s2boa.ingestions.ingestion_nppf.ingestion_nppf", file_path, "2018-01-01T00:00:00")

        assert len([item for item in exit_status if item["status"] != eboa_engine.exit_codes["OK"]["status"]]) == 0

        filename = "S2A_ORBPRE.EOF"
        file_path = os.path.dirname(os.path.abspath(__file__)) + "/inputs/" + filename

        exit_status = ingestion.command_process_file("s2boa.ingestions.ingestion_orbpre.ingestion_orbpre", file_path, "2018-01-01T00:00:00")

        assert len([item for item in exit_status if item["status"] != eboa_engine.exit_codes["OK"]["status"]]) == 0

        filename = "S2A_REP_PASS_NO_GAPS.EOF"
        file_path = os.path.dirname(os.path.abspath(__file__)) + "/inputs/" + filename

        exit_status = ingestion.command_process_file("s2boa.ingestions.ingestion_dfep_acquisition.ingestion_dfep_acquisition", file_path, "2018-01-01T00:00:00")

        assert len([item for item in exit_status if item["status"] != eboa_engine.exit_codes["OK"]["status"]]) == 0

        wait = WebDriverWait(self.driver,5)

        self.driver.get("http://localhost:5000/views/dhus-completeness")

        functions.query(self.driver, wait, "S2A", start = "2018-07-01T00:00:00", stop = "2018-07-31T23:59:59", start_orbit = "17600", stop_orbit = "17800", table_details = True, map = True, station_reports = True)

        # Check summary expected msi
        summary_expected_msi = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-expected-msi")))

        assert summary_expected_msi

        assert summary_expected_msi.text == "33.033"

        # Check summary acquired msi
        summary_acquired_msi = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-acquired-msi")))

        assert summary_acquired_msi

        assert summary_acquired_msi.text == "1.804"

        # Check summary processed to l1c msi
        summary_processed_l1c_msi = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-processed-to-l1c-msi")))

        assert summary_processed_l1c_msi

        assert summary_processed_l1c_msi.text == "0.0"

        # Check summary processed to l2a msi
        summary_processed_l2a_msi = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-processed-to-l2a-msi")))

        assert summary_processed_l2a_msi

        assert summary_processed_l2a_msi.text == "0.0"

        # Check summary generated to l1c tiles
        summary_generated_l1c_tiles = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-generated-l1c-tiles")))

        assert summary_generated_l1c_tiles

        assert summary_generated_l1c_tiles.text == "0"

        # Check summary generated to l2a tiles
        summary_generated_l2a_tiles = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-generated-l2a-tiles")))

        assert summary_generated_l2a_tiles

        assert summary_generated_l2a_tiles.text == "0"

        # Check summary missing acquistion
        summary_missing_acquistion = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-missing-acquistion")))

        assert summary_missing_acquistion

        assert summary_missing_acquistion.text == "30.895"

        # Check summary missing processing l1c
        summary_missing_processing_l1c = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-missing-processing-l1c")))

        assert summary_missing_processing_l1c

        assert summary_missing_processing_l1c.text == "32.699"

        # Check summary missing processing l2a
        summary_missing_processing_l2a = wait.until(EC.visibility_of_element_located((By.ID,"summary-dhus-completeness-missing-processing-l2a")))

        assert summary_missing_processing_l2a

        assert summary_missing_processing_l2a.text == "32.699"

        # Check number of elements in summary
        assert len(summary_expected_msi.find_elements_by_xpath("../../../div")) == 9

        # Check whether the map is displayed
        map_section = self.driver.find_element_by_id("dhus-completeness-on-map-section")

        condition = map_section.is_displayed()

        assert condition is True

        l1c_map_section = self.driver.find_element_by_id("dhus-completeness-l1c-on-map-section")

        condition = l1c_map_section.is_displayed()

        assert condition is True

        l2a_map_section = self.driver.find_element_by_id("dhus-completeness-l2a-on-map-section")

        condition = l2a_map_section.is_displayed()

        assert condition is True

        # Check map missing segments tooltip
        planned_imaging_processing_completeness_l1c_1 = self.query_eboa.get_events(gauge_names ={"filter": "PLANNED_IMAGING_PROCESSING_COMPLETENESS_L1C", "op":"=="},
                                                                                start_filters =[{"date": "2018-07-21T08:36:08.255634", "op":"=="}],
                                                                                stop_filters = [{"date": "2018-07-21T09:08:50.195941", "op": "=="}])
        planned_imaging_correction = self.query_eboa.get_events(gauge_names ={"filter": "PLANNED_CUT_IMAGING_CORRECTION", "op":"=="})
        planned_cut_imaging = self.query_eboa.get_events(gauge_names ={"filter": "PLANNED_CUT_IMAGING", "op":"=="})

        map_l1c_missing_tooltip_info = [
            {
                "id": str(planned_imaging_processing_completeness_l1c_1[0].event_uuid),
                "tooltip": "<table border='1'>" + 
                "<tr><td>UUID</td><td>" + str(planned_imaging_processing_completeness_l1c_1[0].event_uuid) + "</td></tr>" + 
                "<tr><td>Satellite</td><td>S2A</td></tr><tr>" + 
                "<td>Orbit</td><td>16077</td></tr>" + 
                "<tr><td>Datastrip</td><td>N/A</td></tr>" + 
                "<tr><td>Status</td><td><a class='bold-red' href='/views/dhus-completeness-by-datatake/" + str(planned_imaging_correction[0].event_uuid) + "'>MISSING ACQUISITION</a></td></tr>" + 
                "<tr><td>Start</td><td>2018-07-21T08:36:08.255634</td></tr>" + 
                "<tr><td>Stop</td><td>2018-07-21T09:08:50.195941</td></tr>" + 
                "<tr><td>Duration(m)</td><td>32.699</td></tr>" + 
                "<tr><td>Plan file</td><td>S2A_NPPF.EOF</td></tr>" + 
                '<tr><td>Planned imaging</td><td><a href="/eboa_nav/query-event-links/' + str(planned_cut_imaging[0].event_uuid) + '"><i class="fa fa-link"></i></a></td></tr>' + 
                "</table>",
                "geometries": [
                        {'value': 'POLYGON ((101.528355 79.738353, 98.393294 79.554394, 95.372456 79.34158499999999, 92.47433599999999 79.101615, 89.704358 78.83623299999999, 87.065195 78.547203, 84.557168 78.236266, 82.178646 77.905114, 79.92652200000001 77.555353, 77.796533 77.188502, 75.78361 76.80598500000001, 73.882164 76.409121, 72.086314 75.999127, 70.390066 75.577118, 68.787451 75.144115, 67.27263000000001 74.701048, 65.839963 74.248763, 64.484058 73.788026, 63.199803 73.319535, 61.98238 72.84392099999999, 60.82727 72.361756, 59.730252 71.87356, 58.687393 71.379802, 57.69504 70.880909, 56.749802 70.377269, 55.848538 69.86923400000001, 54.988339 69.357125, 54.166514 68.841234, 53.380572 68.321826, 52.628211 67.799145, 51.907284 67.273414, 51.215837 66.74483499999999, 50.552046 66.21359200000001, 49.914221 65.679856, 49.300795 65.14378499999999, 48.710317 64.605521, 48.141439 64.06519900000001, 47.592911 63.522938, 47.063571 62.978854, 46.552336 62.433049, 46.058203 61.88562, 45.580233 61.336656, 45.117553 60.786241, 44.669348 60.23445, 44.234857 59.681356, 43.813369 59.127025, 43.404219 58.571519, 43.006785 58.014895, 42.620482 57.457208, 42.244763 56.898507, 41.879116 56.33884, 41.523059 55.778251, 41.176136 55.216781, 40.837913 54.65447, 40.507999 54.091353, 40.186016 53.527465, 39.871607 52.962837, 39.564437 52.3975, 39.264186 51.831483, 38.970556 51.264812, 38.683263 50.697513, 38.402038 50.12961, 38.126626 49.561125, 37.856788 48.992081, 37.592294 48.422497, 37.332928 47.852393, 37.078485 47.281788, 36.828768 46.710698, 36.583593 46.139141, 36.342781 45.567132, 36.106166 44.994686, 35.873587 44.421818, 35.644892 43.848541, 35.419934 43.274869, 35.198576 42.700813, 34.980684 42.126386, 34.766127 41.5516, 34.554789 40.976465, 34.346555 40.400992, 34.141315 39.825191, 33.938963 39.249071, 33.739397 38.672642, 33.542521 38.095913, 33.348241 37.518892, 33.156469 36.941588, 32.967118 36.364009, 32.780106 35.786163, 32.595355 35.208056, 32.412788 34.629697, 32.232333 34.051093, 32.053919 33.472249, 31.877479 32.893174, 31.702948 32.313873, 31.530263 31.734352, 31.359365 31.154617, 31.190194 30.574676, 31.022695 29.994532, 30.856813 29.414192, 30.692496 28.833661, 30.52969 28.252945, 30.368351 27.672049, 30.208431 27.090977, 30.049883 26.509735, 29.892665 25.928328, 29.736733 25.34676, 29.582046 24.765036, 29.428563 24.183161, 29.276246 23.601139, 29.125056 23.018975, 28.974958 22.436672, 28.825915 21.854236, 28.677892 21.27167, 28.530857 20.688979, 28.384776 20.106167, 28.239618 19.523237, 28.095351 18.940194, 27.951945 18.357042, 27.809371 17.773784, 27.667601 17.190425, 27.526605 16.606967, 27.386357 16.023415, 27.24683 15.439774, 27.107997 14.856045, 26.969834 14.272233, 26.832316 13.688341, 26.695417 13.104374, 26.559115 12.520334, 26.423385 11.936225, 26.288205 11.352051, 26.153552 10.767815, 26.019404 10.18352, 25.885738 9.599170000000001, 25.752535 9.014768, 25.619771 8.430318, 25.487428 7.845822, 25.355483 7.261285, 25.223917 6.676709, 25.092711 6.092098, 24.961844 5.507454, 24.831296 4.922782, 24.701049 4.338085, 24.571084 3.753365, 24.441382 3.168625, 24.311923 2.58387, 24.182691 1.999102, 24.053667 1.414324, 23.924832 0.8295400000000001, 23.796168 0.244752, 23.667656 -0.340037, 23.53928 -0.924823, 23.411021 -1.509603, 23.282861 -2.094374, 23.154782 -2.679134, 23.026766 -3.263878, 22.898797 -3.848605, 22.770855 -4.433311, 22.642923 -5.017993, 22.514983 -5.602648, 22.387017 -6.187273, 22.259008 -6.771866, 22.130936 -7.356423, 22.002785 -7.940941, 21.874535 -8.525416999999999, 21.746168 -9.109848, 21.617666 -9.694233000000001, 21.489009 -10.278566, 21.36018 -10.862846, 21.231159 -11.44707, 21.10193 -12.031235, 20.972471 -12.615337, 20.84276 -13.199375, 20.712779 -13.783345, 20.582507 -14.367243, 20.451923 -14.951069, 20.321007 -15.534817, 20.189737 -16.118486, 20.058092 -16.702073, 19.926048 -17.285575, 19.793585 -17.868989, 19.660679 -18.452311, 19.527306 -19.03554, 19.393443 -19.618672, 19.259065 -20.201704, 19.124148 -20.784634, 18.988665 -21.367458, 18.852591 -21.950174, 18.7159 -22.532779, 18.578563 -23.115269, 18.440552 -23.697642, 18.301839 -24.279894, 18.162396 -24.862023, 18.022195 -25.444026, 17.8812 -26.0259, 17.73938 -26.607641, 17.596701 -27.189247, 17.453128 -27.770714, 17.308628 -28.352039, 17.163163 -28.933219, 17.016695 -29.514251, 16.869187 -30.095131, 13.933539 -29.491417, 14.098138 -28.912293, 14.261223 -28.33296, 14.422844 -27.753423, 14.583047 -27.173686, 14.741878 -26.593755, 14.89938 -26.013634, 15.055598 -25.433327, 15.210571 -24.852841, 15.36434 -24.272178, 15.516947 -23.691343, 15.668426 -23.11034, 15.818815 -22.529175, 15.968148 -21.94785, 16.116461 -21.36637, 16.263787 -20.784739, 16.410159 -20.202961, 16.555607 -19.62104, 16.700165 -19.038979, 16.843861 -18.456783, 16.986725 -17.874455, 17.128786 -17.292, 17.270072 -16.70942, 17.41061 -16.126719, 17.550427 -15.543901, 17.689548 -14.96097, 17.828001 -14.377929, 17.965808 -13.794781, 18.102996 -13.211531, 18.239588 -12.628181, 18.375607 -12.044735, 18.511076 -11.461196, 18.646018 -10.877568, 18.780456 -10.293853, 18.914411 -9.710056, 19.047904 -9.12618, 19.180957 -8.542228, 19.31359 -7.958203, 19.445824 -7.374108, 19.577679 -6.789947, 19.709176 -6.205723, 19.840332 -5.62144, 19.971169 -5.037099, 20.101706 -4.452706, 20.231961 -3.868262, 20.361954 -3.28377, 20.491703 -2.699235, 20.621226 -2.114659, 20.750543 -1.530045, 20.879671 -0.945397, 21.008628 -0.360717, 21.137434 0.223991, 21.266105 0.808725, 21.39466 1.393481, 21.523116 1.978257, 21.651492 2.563048, 21.779804 3.147853, 21.908071 3.732668, 22.03631 4.31749, 22.164541 4.902317, 22.29278 5.487144, 22.421046 6.071969, 22.549357 6.656789, 22.677731 7.241602, 22.806186 7.826403, 22.934741 8.41119, 23.063414 8.995960999999999, 23.192224 9.580711000000001, 23.321189 10.165439, 23.45033 10.750141, 23.579663 11.334813, 23.70921 11.919454, 23.83899 12.504061, 23.969023 13.088629, 24.099328 13.673157, 24.229927 14.257641, 24.36084 14.842078, 24.492088 15.426466, 24.623693 16.010801, 24.755672 16.59508, 24.888051 17.179302, 25.020852 17.763461, 25.1541 18.347556, 25.287817 18.931583, 25.422028 19.51554, 25.556756 20.099424, 25.692028 20.68323, 25.827869 21.266957, 25.964305 21.850601, 26.101363 22.43416, 26.23907 23.017629, 26.377456 23.601007, 26.516548 24.184289, 26.656377 24.767473, 26.796974 25.350556, 26.93837 25.933533, 27.080597 26.516404, 27.223689 27.099162, 27.367681 27.681807, 27.512607 28.264333, 27.658505 28.846738, 27.805411 29.429019, 27.95336 30.011172, 28.102397 30.593193, 28.252563 31.175079, 28.403902 31.756827, 28.556459 32.338431, 28.71028 32.91989, 28.865413 33.501198, 29.021907 34.082352, 29.179815 34.663347, 29.339189 35.244181, 29.500086 35.824848, 29.662563 36.405344, 29.82668 36.985665, 29.9925 37.565806, 30.160087 38.145763, 30.32951 38.72553, 30.500839 39.305103, 30.674149 39.884477, 30.849515 40.463646, 31.027018 41.042604, 31.206743 41.621347, 31.388777 42.199868, 31.573211 42.77816, 31.760133 43.356219, 31.94965 43.934037, 32.14187 44.511607, 32.336903 45.088922, 32.534866 45.665975, 32.73588 46.242756, 32.940074 46.819259, 33.147583 47.395475, 33.358548 47.971394, 33.573118 48.547006, 33.791452 49.122303, 34.013715 49.697273, 34.240083 50.271906, 34.470741 50.846188, 34.705884 51.420109, 34.94572 51.993655, 35.190468 52.566812, 35.440361 53.139565, 35.695644 53.711899, 35.95658 54.283798, 36.223446 54.855243, 36.496539 55.426215, 36.776173 55.996696, 37.062667 56.566664, 37.356393 57.136096, 37.657733 57.704968, 37.967096 58.273253, 38.284919 58.840923, 38.611667 59.407948, 38.947843 59.974297, 39.293984 60.539933, 39.650668 61.10482, 40.018516 61.668918, 40.398198 62.232182, 40.790436 62.794566, 41.196009 63.356018, 41.61576 63.916483, 42.050602 64.47590099999999, 42.501524 65.034205, 42.969599 65.591324, 43.455996 66.14718000000001, 43.961985 66.701688, 44.488952 67.25475299999999, 45.03841 67.806273, 45.612014 68.35613499999999, 46.211575 68.904214, 46.839057 69.45037499999999, 47.496664 69.99446399999999, 48.186803 70.536312, 48.91212 71.075732, 49.675538 71.612514, 50.480285 72.14642600000001, 51.329936 72.677209, 52.228449 73.20457, 53.180217 73.728182, 54.190117 74.247676, 55.263568 74.762637, 56.406592 75.272594, 57.625885 75.77701399999999, 58.928884 76.27529199999999, 60.323843 76.766739, 61.819901 77.25057, 63.427147 77.725889, 65.15666299999999 78.19167400000001, 67.02054699999999 78.646756, 69.03187800000001 79.0898, 71.204616 79.519285, 73.553397 79.93347900000001, 76.093174 80.330421, 78.83862000000001 80.707914, 81.803448 81.06348699999999, 84.999177 81.394426, 88.433741 81.69779, 92.109756 81.970454, 96.02262 82.209198, 101.528355 79.738353))', 'name': 'footprint'}
                ],
                "style": {
                    "stroke_color": "red",
                    "fill_color": "rgba(255,0,0,0.3)",
                }
            },
        ]

        returned_map_l1c_missing_tooltip_info = self.driver.execute_script('return missing_segments_l1c;')
        assert map_l1c_missing_tooltip_info == returned_map_l1c_missing_tooltip_info
        
        planned_imaging_processing_completeness_l2a = self.query_eboa.get_events(gauge_names ={"filter": "PLANNED_IMAGING_PROCESSING_COMPLETENESS_L2A", "op":"=="})
        
        map_l2a_missing_tooltip_info = [
            {
                "id": str(planned_imaging_processing_completeness_l2a[0].event_uuid),
                "tooltip": "<table border='1'>" + 
                "<tr><td>UUID</td><td>" + str(planned_imaging_processing_completeness_l2a[0].event_uuid) + "</td></tr>" + 
                "<tr><td>Satellite</td><td>S2A</td></tr><tr>" + 
                "<td>Orbit</td><td>16077</td></tr>" + 
                "<tr><td>Datastrip</td><td>N/A</td></tr>" + 
                "<tr><td>Status</td><td><a class='bold-red' href='/views/dhus-completeness-by-datatake/" + str(planned_imaging_correction[0].event_uuid) + "'>MISSING ACQUISITION</a></td></tr>" + 
                "<tr><td>Start</td><td>2018-07-21T08:36:08.255634</td></tr>" + 
                "<tr><td>Stop</td><td>2018-07-21T09:08:50.195941</td></tr>" + 
                "<tr><td>Duration(m)</td><td>32.699</td></tr>" + 
                "<tr><td>Plan file</td><td>S2A_NPPF.EOF</td></tr>" + 
                '<tr><td>Planned imaging</td><td><a href="/eboa_nav/query-event-links/' + str(planned_cut_imaging[0].event_uuid) + '"><i class="fa fa-link"></i></a></td></tr>' + 
                "</table>",
                "geometries": [
                        {'value': 'POLYGON ((101.528355 79.738353, 98.393294 79.554394, 95.372456 79.34158499999999, 92.47433599999999 79.101615, 89.704358 78.83623299999999, 87.065195 78.547203, 84.557168 78.236266, 82.178646 77.905114, 79.92652200000001 77.555353, 77.796533 77.188502, 75.78361 76.80598500000001, 73.882164 76.409121, 72.086314 75.999127, 70.390066 75.577118, 68.787451 75.144115, 67.27263000000001 74.701048, 65.839963 74.248763, 64.484058 73.788026, 63.199803 73.319535, 61.98238 72.84392099999999, 60.82727 72.361756, 59.730252 71.87356, 58.687393 71.379802, 57.69504 70.880909, 56.749802 70.377269, 55.848538 69.86923400000001, 54.988339 69.357125, 54.166514 68.841234, 53.380572 68.321826, 52.628211 67.799145, 51.907284 67.273414, 51.215837 66.74483499999999, 50.552046 66.21359200000001, 49.914221 65.679856, 49.300795 65.14378499999999, 48.710317 64.605521, 48.141439 64.06519900000001, 47.592911 63.522938, 47.063571 62.978854, 46.552336 62.433049, 46.058203 61.88562, 45.580233 61.336656, 45.117553 60.786241, 44.669348 60.23445, 44.234857 59.681356, 43.813369 59.127025, 43.404219 58.571519, 43.006785 58.014895, 42.620482 57.457208, 42.244763 56.898507, 41.879116 56.33884, 41.523059 55.778251, 41.176136 55.216781, 40.837913 54.65447, 40.507999 54.091353, 40.186016 53.527465, 39.871607 52.962837, 39.564437 52.3975, 39.264186 51.831483, 38.970556 51.264812, 38.683263 50.697513, 38.402038 50.12961, 38.126626 49.561125, 37.856788 48.992081, 37.592294 48.422497, 37.332928 47.852393, 37.078485 47.281788, 36.828768 46.710698, 36.583593 46.139141, 36.342781 45.567132, 36.106166 44.994686, 35.873587 44.421818, 35.644892 43.848541, 35.419934 43.274869, 35.198576 42.700813, 34.980684 42.126386, 34.766127 41.5516, 34.554789 40.976465, 34.346555 40.400992, 34.141315 39.825191, 33.938963 39.249071, 33.739397 38.672642, 33.542521 38.095913, 33.348241 37.518892, 33.156469 36.941588, 32.967118 36.364009, 32.780106 35.786163, 32.595355 35.208056, 32.412788 34.629697, 32.232333 34.051093, 32.053919 33.472249, 31.877479 32.893174, 31.702948 32.313873, 31.530263 31.734352, 31.359365 31.154617, 31.190194 30.574676, 31.022695 29.994532, 30.856813 29.414192, 30.692496 28.833661, 30.52969 28.252945, 30.368351 27.672049, 30.208431 27.090977, 30.049883 26.509735, 29.892665 25.928328, 29.736733 25.34676, 29.582046 24.765036, 29.428563 24.183161, 29.276246 23.601139, 29.125056 23.018975, 28.974958 22.436672, 28.825915 21.854236, 28.677892 21.27167, 28.530857 20.688979, 28.384776 20.106167, 28.239618 19.523237, 28.095351 18.940194, 27.951945 18.357042, 27.809371 17.773784, 27.667601 17.190425, 27.526605 16.606967, 27.386357 16.023415, 27.24683 15.439774, 27.107997 14.856045, 26.969834 14.272233, 26.832316 13.688341, 26.695417 13.104374, 26.559115 12.520334, 26.423385 11.936225, 26.288205 11.352051, 26.153552 10.767815, 26.019404 10.18352, 25.885738 9.599170000000001, 25.752535 9.014768, 25.619771 8.430318, 25.487428 7.845822, 25.355483 7.261285, 25.223917 6.676709, 25.092711 6.092098, 24.961844 5.507454, 24.831296 4.922782, 24.701049 4.338085, 24.571084 3.753365, 24.441382 3.168625, 24.311923 2.58387, 24.182691 1.999102, 24.053667 1.414324, 23.924832 0.8295400000000001, 23.796168 0.244752, 23.667656 -0.340037, 23.53928 -0.924823, 23.411021 -1.509603, 23.282861 -2.094374, 23.154782 -2.679134, 23.026766 -3.263878, 22.898797 -3.848605, 22.770855 -4.433311, 22.642923 -5.017993, 22.514983 -5.602648, 22.387017 -6.187273, 22.259008 -6.771866, 22.130936 -7.356423, 22.002785 -7.940941, 21.874535 -8.525416999999999, 21.746168 -9.109848, 21.617666 -9.694233000000001, 21.489009 -10.278566, 21.36018 -10.862846, 21.231159 -11.44707, 21.10193 -12.031235, 20.972471 -12.615337, 20.84276 -13.199375, 20.712779 -13.783345, 20.582507 -14.367243, 20.451923 -14.951069, 20.321007 -15.534817, 20.189737 -16.118486, 20.058092 -16.702073, 19.926048 -17.285575, 19.793585 -17.868989, 19.660679 -18.452311, 19.527306 -19.03554, 19.393443 -19.618672, 19.259065 -20.201704, 19.124148 -20.784634, 18.988665 -21.367458, 18.852591 -21.950174, 18.7159 -22.532779, 18.578563 -23.115269, 18.440552 -23.697642, 18.301839 -24.279894, 18.162396 -24.862023, 18.022195 -25.444026, 17.8812 -26.0259, 17.73938 -26.607641, 17.596701 -27.189247, 17.453128 -27.770714, 17.308628 -28.352039, 17.163163 -28.933219, 17.016695 -29.514251, 16.869187 -30.095131, 13.933539 -29.491417, 14.098138 -28.912293, 14.261223 -28.33296, 14.422844 -27.753423, 14.583047 -27.173686, 14.741878 -26.593755, 14.89938 -26.013634, 15.055598 -25.433327, 15.210571 -24.852841, 15.36434 -24.272178, 15.516947 -23.691343, 15.668426 -23.11034, 15.818815 -22.529175, 15.968148 -21.94785, 16.116461 -21.36637, 16.263787 -20.784739, 16.410159 -20.202961, 16.555607 -19.62104, 16.700165 -19.038979, 16.843861 -18.456783, 16.986725 -17.874455, 17.128786 -17.292, 17.270072 -16.70942, 17.41061 -16.126719, 17.550427 -15.543901, 17.689548 -14.96097, 17.828001 -14.377929, 17.965808 -13.794781, 18.102996 -13.211531, 18.239588 -12.628181, 18.375607 -12.044735, 18.511076 -11.461196, 18.646018 -10.877568, 18.780456 -10.293853, 18.914411 -9.710056, 19.047904 -9.12618, 19.180957 -8.542228, 19.31359 -7.958203, 19.445824 -7.374108, 19.577679 -6.789947, 19.709176 -6.205723, 19.840332 -5.62144, 19.971169 -5.037099, 20.101706 -4.452706, 20.231961 -3.868262, 20.361954 -3.28377, 20.491703 -2.699235, 20.621226 -2.114659, 20.750543 -1.530045, 20.879671 -0.945397, 21.008628 -0.360717, 21.137434 0.223991, 21.266105 0.808725, 21.39466 1.393481, 21.523116 1.978257, 21.651492 2.563048, 21.779804 3.147853, 21.908071 3.732668, 22.03631 4.31749, 22.164541 4.902317, 22.29278 5.487144, 22.421046 6.071969, 22.549357 6.656789, 22.677731 7.241602, 22.806186 7.826403, 22.934741 8.41119, 23.063414 8.995960999999999, 23.192224 9.580711000000001, 23.321189 10.165439, 23.45033 10.750141, 23.579663 11.334813, 23.70921 11.919454, 23.83899 12.504061, 23.969023 13.088629, 24.099328 13.673157, 24.229927 14.257641, 24.36084 14.842078, 24.492088 15.426466, 24.623693 16.010801, 24.755672 16.59508, 24.888051 17.179302, 25.020852 17.763461, 25.1541 18.347556, 25.287817 18.931583, 25.422028 19.51554, 25.556756 20.099424, 25.692028 20.68323, 25.827869 21.266957, 25.964305 21.850601, 26.101363 22.43416, 26.23907 23.017629, 26.377456 23.601007, 26.516548 24.184289, 26.656377 24.767473, 26.796974 25.350556, 26.93837 25.933533, 27.080597 26.516404, 27.223689 27.099162, 27.367681 27.681807, 27.512607 28.264333, 27.658505 28.846738, 27.805411 29.429019, 27.95336 30.011172, 28.102397 30.593193, 28.252563 31.175079, 28.403902 31.756827, 28.556459 32.338431, 28.71028 32.91989, 28.865413 33.501198, 29.021907 34.082352, 29.179815 34.663347, 29.339189 35.244181, 29.500086 35.824848, 29.662563 36.405344, 29.82668 36.985665, 29.9925 37.565806, 30.160087 38.145763, 30.32951 38.72553, 30.500839 39.305103, 30.674149 39.884477, 30.849515 40.463646, 31.027018 41.042604, 31.206743 41.621347, 31.388777 42.199868, 31.573211 42.77816, 31.760133 43.356219, 31.94965 43.934037, 32.14187 44.511607, 32.336903 45.088922, 32.534866 45.665975, 32.73588 46.242756, 32.940074 46.819259, 33.147583 47.395475, 33.358548 47.971394, 33.573118 48.547006, 33.791452 49.122303, 34.013715 49.697273, 34.240083 50.271906, 34.470741 50.846188, 34.705884 51.420109, 34.94572 51.993655, 35.190468 52.566812, 35.440361 53.139565, 35.695644 53.711899, 35.95658 54.283798, 36.223446 54.855243, 36.496539 55.426215, 36.776173 55.996696, 37.062667 56.566664, 37.356393 57.136096, 37.657733 57.704968, 37.967096 58.273253, 38.284919 58.840923, 38.611667 59.407948, 38.947843 59.974297, 39.293984 60.539933, 39.650668 61.10482, 40.018516 61.668918, 40.398198 62.232182, 40.790436 62.794566, 41.196009 63.356018, 41.61576 63.916483, 42.050602 64.47590099999999, 42.501524 65.034205, 42.969599 65.591324, 43.455996 66.14718000000001, 43.961985 66.701688, 44.488952 67.25475299999999, 45.03841 67.806273, 45.612014 68.35613499999999, 46.211575 68.904214, 46.839057 69.45037499999999, 47.496664 69.99446399999999, 48.186803 70.536312, 48.91212 71.075732, 49.675538 71.612514, 50.480285 72.14642600000001, 51.329936 72.677209, 52.228449 73.20457, 53.180217 73.728182, 54.190117 74.247676, 55.263568 74.762637, 56.406592 75.272594, 57.625885 75.77701399999999, 58.928884 76.27529199999999, 60.323843 76.766739, 61.819901 77.25057, 63.427147 77.725889, 65.15666299999999 78.19167400000001, 67.02054699999999 78.646756, 69.03187800000001 79.0898, 71.204616 79.519285, 73.553397 79.93347900000001, 76.093174 80.330421, 78.83862000000001 80.707914, 81.803448 81.06348699999999, 84.999177 81.394426, 88.433741 81.69779, 92.109756 81.970454, 96.02262 82.209198, 101.528355 79.738353))', 'name': 'footprint'},
                ],
                "style": {
                    "stroke_color": "red",
                    "fill_color": "rgba(255,0,0,0.3)",
                }
            },
        ]

        returned_map_l2a_missing_tooltip_info = self.driver.execute_script('return missing_segments_l2a;')
        assert map_l2a_missing_tooltip_info == returned_map_l2a_missing_tooltip_info

        # Check whether the timeliness is displayed
        timeline_section = self.driver.find_element_by_id("dhus-completeness-e2e-timeline-section")

        condition = timeline_section.is_displayed()

        assert condition is True

        l1c_timeline_section = self.driver.find_element_by_id("dhus-completeness-l1c-e2e-timeline-section")

        condition = l1c_timeline_section.is_displayed()

        assert condition is True

        l2a_timeline_section = self.driver.find_element_by_id("dhus-completeness-l2a-e2e-timeline-section")

        condition = l2a_timeline_section.is_displayed()

        assert condition is True

        # Check timeliness tooltip
        timeliness_l1c_tooltip_info = []

        returned_timeliness_l1c_tooltip_info = self.driver.execute_script('return e2e_timeliness_tiles_published_in_dhus_l1c;')
        assert timeliness_l1c_tooltip_info == returned_timeliness_l1c_tooltip_info
        
        timeliness_l2a_tooltip_info = []

        returned_timeliness_l2a_tooltip_info = self.driver.execute_script('return e2e_timeliness_tiles_published_in_dhus_l2a;')
        assert timeliness_l2a_tooltip_info == returned_timeliness_l2a_tooltip_info

        # Missing dissemination table
        missing_table = self.driver.find_element_by_id("dhus-completeness-list-table-MISSING")

        # Row 1
        level = missing_table.find_element_by_xpath("tbody/tr[1]/td[1]")

        assert level.text == "L1C"

        satellite = missing_table.find_element_by_xpath("tbody/tr[1]/td[2]")

        assert satellite.text == "S2A"

        orbit = missing_table.find_element_by_xpath("tbody/tr[1]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = missing_table.find_element_by_xpath("tbody/tr[1]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:36:08.255634"

        stop_datastrip = missing_table.find_element_by_xpath("tbody/tr[1]/td[5]")

        assert stop_datastrip.text == "2018-07-21T09:08:50.195941"

        datastrip = missing_table.find_element_by_xpath("tbody/tr[1]/td[6]")

        assert datastrip.text == "N/A"

        status = missing_table.find_element_by_xpath("tbody/tr[1]/td[7]")

        assert status.text == "MISSING ACQUISITION"

        tiles = missing_table.find_element_by_xpath("tbody/tr[1]/td[8]")

        assert tiles.text == "N/A"

        tiles_dam = missing_table.find_element_by_xpath("tbody/tr[1]/td[9]")

        assert tiles_dam.text == "N/A"

        tiles_dhus = missing_table.find_element_by_xpath("tbody/tr[1]/td[10]")

        assert tiles_dhus.text == "N/A"

        tiles_published_dhus = missing_table.find_element_by_xpath("tbody/tr[1]/td[11]")

        assert tiles_published_dhus.text == "N/A"

        mean_time_dhus = missing_table.find_element_by_xpath("tbody/tr[1]/td[12]")

        assert mean_time_dhus.text == "N/A"

        mean_time_dhus_publication = missing_table.find_element_by_xpath("tbody/tr[1]/td[13]")

        assert mean_time_dhus_publication.text == "N/A"

        datatake = missing_table.find_element_by_xpath("tbody/tr[1]/td[14]")

        assert datatake.text == "N/A"

        start_msi = missing_table.find_element_by_xpath("tbody/tr[1]/td[15]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = missing_table.find_element_by_xpath("tbody/tr[1]/td[16]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

        # Row 2
        level = missing_table.find_element_by_xpath("tbody/tr[2]/td[1]")

        assert level.text == "L2A"

        satellite = missing_table.find_element_by_xpath("tbody/tr[2]/td[2]")

        assert satellite.text == "S2A"

        orbit = missing_table.find_element_by_xpath("tbody/tr[2]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = missing_table.find_element_by_xpath("tbody/tr[2]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:36:08.255634"

        stop_datastrip = missing_table.find_element_by_xpath("tbody/tr[2]/td[5]")

        assert stop_datastrip.text == "2018-07-21T09:08:50.195941"

        datastrip = missing_table.find_element_by_xpath("tbody/tr[2]/td[6]")

        assert datastrip.text == "N/A"

        status = missing_table.find_element_by_xpath("tbody/tr[2]/td[7]")

        assert status.text == "MISSING ACQUISITION"

        tiles = missing_table.find_element_by_xpath("tbody/tr[2]/td[8]")

        assert tiles.text == "N/A"

        tiles_dam = missing_table.find_element_by_xpath("tbody/tr[2]/td[9]")

        assert tiles_dam.text == "N/A"

        tiles_dhus = missing_table.find_element_by_xpath("tbody/tr[2]/td[10]")

        assert tiles_dhus.text == "N/A"

        tiles_published_dhus = missing_table.find_element_by_xpath("tbody/tr[2]/td[11]")

        assert tiles_published_dhus.text == "N/A"

        mean_time_dhus = missing_table.find_element_by_xpath("tbody/tr[2]/td[12]")

        assert mean_time_dhus.text == "N/A"

        mean_time_dhus_publication = missing_table.find_element_by_xpath("tbody/tr[2]/td[13]")

        assert mean_time_dhus_publication.text == "N/A"

        datatake = missing_table.find_element_by_xpath("tbody/tr[2]/td[14]")

        assert datatake.text == "N/A"

        start_msi = missing_table.find_element_by_xpath("tbody/tr[2]/td[15]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = missing_table.find_element_by_xpath("tbody/tr[2]/td[16]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

        # Data availability table
        complete_table = self.driver.find_element_by_id("dhus-completeness-list-table-COMPLETE")

        # Row 1
        level = complete_table.find_element_by_xpath("tbody/tr[1]/td[1]")

        assert level.text == "L1C"

        satellite = complete_table.find_element_by_xpath("tbody/tr[1]/td[2]")

        assert satellite.text == "S2A"

        orbit = complete_table.find_element_by_xpath("tbody/tr[1]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = complete_table.find_element_by_xpath("tbody/tr[1]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:36:08.255634"

        stop_datastrip = complete_table.find_element_by_xpath("tbody/tr[1]/td[5]")

        assert stop_datastrip.text == "2018-07-21T09:08:50.195941"

        datastrip = complete_table.find_element_by_xpath("tbody/tr[1]/td[6]")

        assert datastrip.text == "N/A"

        status = complete_table.find_element_by_xpath("tbody/tr[1]/td[7]")

        assert status.text == "MISSING ACQUISITION"

        tiles = complete_table.find_element_by_xpath("tbody/tr[1]/td[8]")

        assert tiles.text == "N/A"

        tiles_dam = complete_table.find_element_by_xpath("tbody/tr[1]/td[9]")

        assert tiles_dam.text == "N/A"

        tiles_dhus = complete_table.find_element_by_xpath("tbody/tr[1]/td[10]")

        assert tiles_dhus.text == "N/A"

        tiles_published_dhus = complete_table.find_element_by_xpath("tbody/tr[1]/td[11]")

        assert tiles_published_dhus.text == "N/A"

        mean_time_dhus = complete_table.find_element_by_xpath("tbody/tr[1]/td[12]")

        assert mean_time_dhus.text == "N/A"

        mean_time_dhus_publication = complete_table.find_element_by_xpath("tbody/tr[1]/td[13]")

        assert mean_time_dhus_publication.text == "N/A"

        datatake = complete_table.find_element_by_xpath("tbody/tr[1]/td[14]")

        assert datatake.text == "N/A"

        start_msi = complete_table.find_element_by_xpath("tbody/tr[1]/td[15]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = complete_table.find_element_by_xpath("tbody/tr[1]/td[16]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"

        # Row 2
        level = complete_table.find_element_by_xpath("tbody/tr[2]/td[1]")

        assert level.text == "L2A"

        satellite = complete_table.find_element_by_xpath("tbody/tr[2]/td[2]")

        assert satellite.text == "S2A"

        orbit = complete_table.find_element_by_xpath("tbody/tr[2]/td[3]")

        assert orbit.text == "16077"

        start_datastrip = complete_table.find_element_by_xpath("tbody/tr[2]/td[4]")

        assert start_datastrip.text == "2018-07-21T08:36:08.255634"

        stop_datastrip = complete_table.find_element_by_xpath("tbody/tr[2]/td[5]")

        assert stop_datastrip.text == "2018-07-21T09:08:50.195941"

        datastrip = complete_table.find_element_by_xpath("tbody/tr[2]/td[6]")

        assert datastrip.text == "N/A"

        status = complete_table.find_element_by_xpath("tbody/tr[2]/td[7]")

        assert status.text == "MISSING ACQUISITION"

        tiles = complete_table.find_element_by_xpath("tbody/tr[2]/td[8]")

        assert tiles.text == "N/A"

        tiles_dam = complete_table.find_element_by_xpath("tbody/tr[2]/td[9]")

        assert tiles_dam.text == "N/A"

        tiles_dhus = complete_table.find_element_by_xpath("tbody/tr[2]/td[10]")

        assert tiles_dhus.text == "N/A"

        tiles_published_dhus = complete_table.find_element_by_xpath("tbody/tr[2]/td[11]")

        assert tiles_published_dhus.text == "N/A"

        mean_time_dhus = complete_table.find_element_by_xpath("tbody/tr[2]/td[12]")

        assert mean_time_dhus.text == "N/A"

        mean_time_dhus_publication = complete_table.find_element_by_xpath("tbody/tr[2]/td[13]")

        assert mean_time_dhus_publication.text == "N/A"

        datatake = complete_table.find_element_by_xpath("tbody/tr[2]/td[14]")

        assert datatake.text == "N/A"

        start_msi = complete_table.find_element_by_xpath("tbody/tr[2]/td[15]")

        assert start_msi.text == "2018-07-21T08:35:58.255634"

        stop_msi = complete_table.find_element_by_xpath("tbody/tr[2]/td[16]")

        assert stop_msi.text == "2018-07-21T09:09:00.195941"
